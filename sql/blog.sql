/*
 Navicat Premium Data Transfer

 Source Server         : localhost
 Source Server Type    : MySQL
 Source Server Version : 50731
 Source Host           : localhost:3306
 Source Schema         : blog

 Target Server Type    : MySQL
 Target Server Version : 50731
 File Encoding         : 65001

 Date: 11/04/2021 21:55:09
*/

SET NAMES utf8mb4;
SET FOREIGN_KEY_CHECKS = 0;

-- ----------------------------
-- Table structure for bl_about
-- ----------------------------
DROP TABLE IF EXISTS `bl_about`;
CREATE TABLE `bl_about` (
  `about_id` int(11) NOT NULL AUTO_INCREMENT COMMENT '帖子id',
  `about_title` varchar(63) NOT NULL COMMENT '标题',
  `about_content` mediumtext NOT NULL COMMENT '帖子内容',
  `about_read` int(11) NOT NULL DEFAULT '0' COMMENT '阅读数',
  `created_time` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `update_time` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '更新时间',
  `enable` int(1) NOT NULL DEFAULT '0' COMMENT '是否启用，0否1是',
  `version` int(11) NOT NULL DEFAULT '1' COMMENT '乐观锁',
  `deleted` int(1) NOT NULL DEFAULT '0' COMMENT '是否删除，0否1是',
  PRIMARY KEY (`about_id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=11 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC COMMENT='关于闲言表';

-- ----------------------------
-- Records of bl_about
-- ----------------------------
BEGIN;
INSERT INTO `bl_about` VALUES (5, '关于我的 关于“闲言”', '<h1><a id=\"_0\"></a>前言</h1>\n<p>我是一名即将大三的在校大学生，自主学习的过程中跟随讲师开发了该个人博客“闲言博客”，这个博客功能简单，但是为我巩固了不少的技术知识，该网站为前后端分离项目，后端:<em><strong>springboot+mybatis</strong></em> 前端-前台：_<strong>vue+ and design</strong><em>前端-后台: <em><strong>vue+ element-ui</strong></em> 开发该项目花了我大概10来天时间，前台页面代码是我copy的讲师提供的静态页面（原谅我写的css自己都看不下去），后续想追加个</em><strong>redis</strong><em>写个缓存，以及加一个</em><strong>ElasticSearch</strong>_搜索引擎，加油吧！</p>\n<h2><a id=\"_4\"></a>该博客使用到的技术栈：</h2>\n<p>SpringBoot，Mybatis，Shiro，Maven，Vue，ElementUI，AntDesignVue，Flex布局，Linux，Nginx，Docker，FastDFS，MongoDB，SpringDataMongoDB<br />\n该博客由我在腾讯课堂购买课程学习开发，网址：</p>\n<p><a href=\"https://ke.qq.com/course/1129309\" target=\"_blank\">课程地址</a></p>\n<hr />\n<p>目前我正在修改该博客的小bug并且在集成更多的新功能，我希望能够使用这个博客项目去巩固我学习的新知识，也希望能有更多的人看到我写的这个项目。</p>\n<h2><a id=\"_15\"></a>目前需要改进的地方：</h2>\n<ol>\n<li>使用elasticSearch 进行博客的检索</li>\n<li>将首页的主图片修改为轮播图</li>\n<li><s>注册时上传头像</s></li>\n<li><s>将富文本编辑器改为Markdown编辑器</s></li>\n<li><s>更新记录日志的方式</s></li>\n<li><s>首页url的问题</s></li>\n<li><s>数据库时间问题</s></li>\n<li><s>前台md5加密改为后台加密后再匹配</s></li>\n<li><s>推荐博客下的时间</s></li>\n<li><s>登录注册页面的背景图片</s></li>\n<li><s>登录注册页面的卡片问题</s></li>\n<li>后台中写博客路由问题</li>\n<li>后端登录中管理员和用户混淆不清关系</li>\n<li><s>阅读博客时会更新version(乐观锁)这可能会导致在别人观看博客的时候导致博主无法更新博客影响博主体验</s></li>\n<li>在进入下一个路由之后回到顶部</li>\n<li>将分页功能改为加载更多</li>\n</ol>\n<p>暂时还需要学习一点其他的之后，等有时间的时候再来继续完善该博客。</p>\n<h2><a id=\"_36\"></a>更新记录</h2>\n<ul>\n<li>\n<p>2020-11-17 09:25 add:如果添加博客不上传封面将会设置一个默认封面图片</p>\n</li>\n<li>\n<p>2020-11-18 21:48 update:将原本前端md5加密后再跟后端匹配改为后端进行加密后再匹配</p>\n</li>\n<li>\n<p>2020-11-19 22:15 fix:将页面url后面会添加publicPath问题解决</p>\n</li>\n<li>\n<p>2020-11-24 11:25 update:将前端静态资源使用cdn加速、日志原记录为controller层的所有方法切入改为Log注解处切入</p>\n</li>\n<li>\n<p>2020-11-24 21:51 fix:修复推荐博客下的时间bug</p>\n</li>\n<li>\n<p>2020-11-24 21:51 add:注册时添加上传头像功能</p>\n</li>\n<li>\n<p>2020-11-25 11:46 fix:修复数据库时间问题，具体问题已发博客，<a href=\"http://oopsw.top:1001/info/1331436834413211648\" target=\"_blank\">点我查看</a></p>\n</li>\n<li>\n<p>2020-11-27 23:47 fix:登录注册页面卡片超出页面没有显示滚动条、背景图片在页面放大时会出现多个背景图片</p>\n</li>\n<li>\n<p>2020-11-29 00:51 update:将前后台的所有富文本编辑器更换为markdown编辑器，并用markdown的样式</p>\n</li>\n<li>\n<p>2020-12-01 08:30 update:修改markdown代码块样式</p>\n</li>\n<li>\n<p>2020-12-01 08:57 fix:手机访问登录注册页面时样式体验差</p>\n</li>\n<li>\n<p>2020-12-03 22:18 update:更换markdown存储方式，从存储markdown源码改为存储HTML源码</p>\n</li>\n</ul>\n', 181, '2020-08-19 13:59:51', '2021-04-11 17:39:43', 1, 231, 0);
COMMIT;

-- ----------------------------
-- Table structure for bl_admin
-- ----------------------------
DROP TABLE IF EXISTS `bl_admin`;
CREATE TABLE `bl_admin` (
  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT '管理员id',
  `name` varchar(31) NOT NULL COMMENT '姓名',
  `header` varchar(255) DEFAULT NULL COMMENT '头像',
  `signature` varchar(255) DEFAULT NULL COMMENT '签名',
  `comment` varchar(511) DEFAULT NULL COMMENT '介绍',
  `username` varchar(31) NOT NULL COMMENT '账号',
  `password` varchar(32) NOT NULL COMMENT '密码',
  `salt` varchar(32) NOT NULL COMMENT '盐',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC COMMENT='管理员表';

-- ----------------------------
-- Records of bl_admin
-- ----------------------------
BEGIN;
INSERT INTO `bl_admin` VALUES (1, 'w', 'http://808km.top/blog/img/img/default/1336860461110280192', '生而为人，我很抱歉!', NULL, 'qq1437631334', 'fd5a74d480a130d5d56ba1abd8ed003f', 'D6FF3816E4B14CA089DCEF61E707A780');
COMMIT;

-- ----------------------------
-- Table structure for bl_blog
-- ----------------------------
DROP TABLE IF EXISTS `bl_blog`;
CREATE TABLE `bl_blog` (
  `blog_id` varchar(31) NOT NULL COMMENT '帖子id',
  `blog_title` varchar(63) NOT NULL COMMENT '标题',
  `blog_image` varchar(255) DEFAULT NULL COMMENT '封面',
  `blog_content` mediumtext NOT NULL COMMENT '帖子内容',
  `blog_goods` int(11) NOT NULL DEFAULT '0' COMMENT '点赞数',
  `blog_read` int(11) NOT NULL DEFAULT '0' COMMENT '阅读数',
  `blog_collection` int(11) NOT NULL DEFAULT '0' COMMENT '收藏数',
  `blog_type` int(11) NOT NULL COMMENT '博客分类',
  `blog_remark` varchar(127) DEFAULT NULL COMMENT '简介',
  `blog_comment` int(11) NOT NULL DEFAULT '0' COMMENT '评论数',
  `blog_source` varchar(127) DEFAULT NULL COMMENT '文章来源（爬虫时使用）',
  `created_time` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `update_time` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '更新时间',
  `version` int(11) NOT NULL DEFAULT '1' COMMENT '乐观锁',
  `deleted` int(1) NOT NULL DEFAULT '0' COMMENT '是否删除，0否1是',
  PRIMARY KEY (`blog_id`) USING BTREE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC COMMENT='博客表';

-- ----------------------------
-- Records of bl_blog
-- ----------------------------
BEGIN;
INSERT INTO `bl_blog` VALUES ('1293808631053139968', 'docker 安装 mysql5.7', 'http://808km.top/blog/img/default.jpg', '<h1><a id=\"Mybatis_if_0\"></a>Mybatis <if>标签的使用问题</h1>\n<p>今天在使用Mybatis的时候发现前端传参’0’无效，无法更新字段，于是第一想到的就是百度解决，果然百度上已经有不少的案例了。</p>\n<pre><div class=\"hljs\"><code class=\"lang-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">update</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"update\"</span>&gt;</span>\n        update bl_type\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">set</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">if</span> <span class=\"hljs-attr\">test</span>=<span class=\"hljs-string\">\"typeName!=null and typeNmae!=\'\'\"</span>&gt;</span>\n                    type_name = #{typeName},\n                <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">if</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">if</span> <span class=\"hljs-attr\">test</span>=<span class=\"hljs-string\">\"typeBlogCount!=null and typeBlogCount!=\'\'\"</span>&gt;</span>\n                    type_blog_count = #{typeBlogCount},\n                <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">if</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">if</span> <span class=\"hljs-attr\">test</span>=<span class=\"hljs-string\">\"enable!=null\"</span>&gt;</span>\n                    enable = #{enable},\n                <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">if</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">set</span>&gt;</span>\n        where type_id = #{typeId}\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">update</span>&gt;</span>\n</code></div></pre>\n<p>使用mybatis 写mapper.xml文件时，使用if标签如：</p>\n<pre><div class=\"hljs\"><code class=\"lang-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">if</span> <span class=\"hljs-attr\">test</span>=<span class=\"hljs-string\">\"typeName!=null and typeNmae!=\'\'\"</span>&gt;</span> \n</code></div></pre>\n<p>这时如果传入的参数为0的话会被忽略掉 无法正常的更新</p>\n<p>使用if标签的嵌套经测试也是会忽略参数’0</p>\n<pre><div class=\"hljs\"><code class=\"lang-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">update</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"update\"</span>&gt;</span>\n        update bl_type\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">set</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">if</span> <span class=\"hljs-attr\">test</span>=<span class=\"hljs-string\">\"typeName!=null\"</span>&gt;</span>\n                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">if</span> <span class=\"hljs-attr\">test</span>=<span class=\"hljs-string\">\"typeName!=\'\'\"</span>&gt;</span>\n                    type_name = #{typeName},\n                    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">if</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">if</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">if</span> <span class=\"hljs-attr\">test</span>=<span class=\"hljs-string\">\"typeBlogCount!=null\"</span>&gt;</span>\n                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">if</span> <span class=\"hljs-attr\">test</span>=<span class=\"hljs-string\">\"typeBlogCount!=\'\'\"</span>&gt;</span>\n                    type_blog_count = #{typeBlogCount},\n                    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">if</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">if</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">if</span> <span class=\"hljs-attr\">test</span>=<span class=\"hljs-string\">\"enable!=null\"</span>&gt;</span>\n                    enable = #{enable},\n                <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">if</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">set</span>&gt;</span>\n        where type_id = #{typeId}\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">update</span>&gt;</span>\n</code></div></pre>\n<p>如果if标签判断的是字段是否为空字符串也会忽略参数’0’</p>\n<pre><div class=\"hljs\"><code class=\"lang-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">update</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"update\"</span>&gt;</span>\n        update bl_type\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">set</span>&gt;</span>\n                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">if</span> <span class=\"hljs-attr\">test</span>=<span class=\"hljs-string\">\"typeName!=\'\'\"</span>&gt;</span>\n                    type_name = #{typeName},\n                    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">if</span>&gt;</span>\n                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">if</span> <span class=\"hljs-attr\">test</span>=<span class=\"hljs-string\">\"typeBlogCount!=\'\'\"</span>&gt;</span>\n                    type_blog_count = #{typeBlogCount},\n                    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">if</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">if</span> <span class=\"hljs-attr\">test</span>=<span class=\"hljs-string\">\"enable!=null\"</span>&gt;</span>\n                    enable = #{enable},\n                <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">if</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">set</span>&gt;</span>\n        where type_id = #{typeId}\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">update</span>&gt;</span>\n</code></div></pre>\n<p>结论是if标签只有如以下代码时才不省略参数’‘0’：</p>\n<pre><div class=\"hljs\"><code class=\"lang-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">update</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"update\"</span>&gt;</span>\n        update bl_type\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">set</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">if</span> <span class=\"hljs-attr\">test</span>=<span class=\"hljs-string\">\"typeName!=null\"</span>&gt;</span>\n                    type_name = #{typeName},\n                <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">if</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">if</span> <span class=\"hljs-attr\">test</span>=<span class=\"hljs-string\">\"typeBlogCount!=null\"</span>&gt;</span>\n                    type_blog_count = #{typeBlogCount},\n                <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">if</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">if</span> <span class=\"hljs-attr\">test</span>=<span class=\"hljs-string\">\"enable!=null\"</span>&gt;</span>\n                    enable = #{enable},\n                <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">if</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">set</span>&gt;</span>\n        where type_id = #{typeId}\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">update</span>&gt;</span>\n</code></div></pre>\n<p>那么又有问题来了，如果前台传来一个字符串时，某些字段就会被置为空字符串，这个怎么解决呢？</p>\n<p>---------------------------------------更新-------------------------------------</p>\n<p>问题已解决</p>\n<p>为什么会出现这个问题？</p>\n<p>因为在mybatis源码中有将空字符串给转换为0这个操作 所以我们传入的参数’0’时就会被判断与空字符串相等 所以if标签的结果值为false</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20200810225335144.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ0ODU5OA==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /><br />\n参考资料：<a href=\"https://blog.csdn.net/Dongguabai/article/details/82981250\" target=\"_blank\">https://blog.csdn.net/Dongguabai/article/details/82981250</a></p>\n', 0, 3, 0, 16, NULL, 0, NULL, '2020-08-13 07:16:30', '2020-12-03 19:30:32', 12, 0);
INSERT INTO `bl_blog` VALUES ('1293850784802377728', 'mybatis <if>标签踩坑', 'http://808km.top/blog/img/default.jpg', '<h1><a id=\"Mybatis_if_0\"></a>Mybatis <if>标签的使用问题</h1>\n<p>今天在使用Mybatis的时候发现前端传参’0’无效，无法更新字段，于是第一想到的就是百度解决，果然百度上已经有不少的案例了。</p>\n<pre><div class=\"hljs\"><code class=\"lang-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">update</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"update\"</span>&gt;</span>\n        update bl_type\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">set</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">if</span> <span class=\"hljs-attr\">test</span>=<span class=\"hljs-string\">\"typeName!=null and typeNmae!=\'\'\"</span>&gt;</span>\n                    type_name = #{typeName},\n                <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">if</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">if</span> <span class=\"hljs-attr\">test</span>=<span class=\"hljs-string\">\"typeBlogCount!=null and typeBlogCount!=\'\'\"</span>&gt;</span>\n                    type_blog_count = #{typeBlogCount},\n                <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">if</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">if</span> <span class=\"hljs-attr\">test</span>=<span class=\"hljs-string\">\"enable!=null\"</span>&gt;</span>\n                    enable = #{enable},\n                <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">if</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">set</span>&gt;</span>\n        where type_id = #{typeId}\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">update</span>&gt;</span>\n</code></div></pre>\n<p>使用mybatis 写mapper.xml文件时，使用if标签如：</p>\n<pre><div class=\"hljs\"><code class=\"lang-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">if</span> <span class=\"hljs-attr\">test</span>=<span class=\"hljs-string\">\"typeName!=null and typeNmae!=\'\'\"</span>&gt;</span> \n</code></div></pre>\n<p>这时如果传入的参数为0的话会被忽略掉 无法正常的更新</p>\n<p>使用if标签的嵌套经测试也是会忽略参数’0</p>\n<pre><div class=\"hljs\"><code class=\"lang-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">update</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"update\"</span>&gt;</span>\n        update bl_type\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">set</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">if</span> <span class=\"hljs-attr\">test</span>=<span class=\"hljs-string\">\"typeName!=null\"</span>&gt;</span>\n                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">if</span> <span class=\"hljs-attr\">test</span>=<span class=\"hljs-string\">\"typeName!=\'\'\"</span>&gt;</span>\n                    type_name = #{typeName},\n                    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">if</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">if</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">if</span> <span class=\"hljs-attr\">test</span>=<span class=\"hljs-string\">\"typeBlogCount!=null\"</span>&gt;</span>\n                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">if</span> <span class=\"hljs-attr\">test</span>=<span class=\"hljs-string\">\"typeBlogCount!=\'\'\"</span>&gt;</span>\n                    type_blog_count = #{typeBlogCount},\n                    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">if</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">if</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">if</span> <span class=\"hljs-attr\">test</span>=<span class=\"hljs-string\">\"enable!=null\"</span>&gt;</span>\n                    enable = #{enable},\n                <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">if</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">set</span>&gt;</span>\n        where type_id = #{typeId}\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">update</span>&gt;</span>\n</code></div></pre>\n<p>如果if标签判断的是字段是否为空字符串也会忽略参数’0’</p>\n<pre><div class=\"hljs\"><code class=\"lang-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">update</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"update\"</span>&gt;</span>\n        update bl_type\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">set</span>&gt;</span>\n                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">if</span> <span class=\"hljs-attr\">test</span>=<span class=\"hljs-string\">\"typeName!=\'\'\"</span>&gt;</span>\n                    type_name = #{typeName},\n                    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">if</span>&gt;</span>\n                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">if</span> <span class=\"hljs-attr\">test</span>=<span class=\"hljs-string\">\"typeBlogCount!=\'\'\"</span>&gt;</span>\n                    type_blog_count = #{typeBlogCount},\n                    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">if</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">if</span> <span class=\"hljs-attr\">test</span>=<span class=\"hljs-string\">\"enable!=null\"</span>&gt;</span>\n                    enable = #{enable},\n                <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">if</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">set</span>&gt;</span>\n        where type_id = #{typeId}\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">update</span>&gt;</span>\n</code></div></pre>\n<p>结论是if标签只有如以下代码时才不省略参数’‘0’：</p>\n<pre><div class=\"hljs\"><code class=\"lang-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">update</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"update\"</span>&gt;</span>\n        update bl_type\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">set</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">if</span> <span class=\"hljs-attr\">test</span>=<span class=\"hljs-string\">\"typeName!=null\"</span>&gt;</span>\n                    type_name = #{typeName},\n                <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">if</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">if</span> <span class=\"hljs-attr\">test</span>=<span class=\"hljs-string\">\"typeBlogCount!=null\"</span>&gt;</span>\n                    type_blog_count = #{typeBlogCount},\n                <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">if</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">if</span> <span class=\"hljs-attr\">test</span>=<span class=\"hljs-string\">\"enable!=null\"</span>&gt;</span>\n                    enable = #{enable},\n                <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">if</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">set</span>&gt;</span>\n        where type_id = #{typeId}\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">update</span>&gt;</span>\n</code></div></pre>\n<p>那么又有问题来了，如果前台传来一个字符串时，某些字段就会被置为空字符串，这个怎么解决呢？</p>\n<p>---------------------------------------更新-------------------------------------</p>\n<p>问题已解决</p>\n<p>为什么会出现这个问题？</p>\n<p>因为在mybatis源码中有将空字符串给转换为0这个操作 所以我们传入的参数’0’时就会被判断与空字符串相等 所以if标签的结果值为false</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20200810225335144.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ0ODU5OA==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /><br />\n参考资料：<a href=\"https://blog.csdn.net/Dongguabai/article/details/82981250\" target=\"_blank\">https://blog.csdn.net/Dongguabai/article/details/82981250</a></p>\n', 0, 13, 0, 10, NULL, 0, NULL, '2020-07-13 10:04:00', '2020-12-12 10:35:25', 47, 0);
INSERT INTO `bl_blog` VALUES ('1294647161643978752', 'shiroFilter踩坑', 'http://808km.top/blog/img/default.jpg', '<h1><a id=\"shiroFilter_0\"></a>shiroFilter踩坑</h1>\n<p>今天出门了一趟，没有关电脑，服务器一直开着，回来发现某一些shiro设置了放行的后端接口竟然无法访问了。经过一段时间的debug，总的来说找到了原因，就是shiro过滤器的问题，通过搜索资料找到了问题根源。原来是HashMap和LinkedMap的问题。 我使用的是HashMap，HashMap不会按照顺序去存储，而shiro有个要求，就是&quot;<strong>authc&quot;</strong> 这个权限必须得放在放行权限的后面&quot;<strong>anon</strong>&quot;。所以使用HashMap时会导致某一些需要放行的接口被放在了authc下面，导致放行无效。</p>\n', 0, 13, 0, 12, NULL, 0, NULL, '2020-08-15 14:48:32', '2020-12-03 19:30:07', 220, 0);
INSERT INTO `bl_blog` VALUES ('1305852969815642112', 'dubbo-admin登录问题', 'http://808km.top/blog/img/default.jpg', '<h1><a id=\"dubboadmin_0\"></a>dubbo-admin登录问题</h1>\n<p>今天在学习dubbo时，clone了dubbo-admin这个dubbo的后台管理项目，结果配置了密码之后发现一直登录不上，也没有任何报错等消息，经过了不少时间的测试和在网上翻阅博客，发现了原来是配置文件里面有一个坑，我习惯性的认为是配置的是账号与密码，结果发现是配置的root的密码和guest的密码。无语。。。。。<br />\n<img src=\"https://img-blog.csdnimg.cn/20200915205347940.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ0ODU5OA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\" /></p>\n', 0, 12, 0, 18, NULL, 0, NULL, '2020-09-15 20:56:24', '2020-12-03 19:30:00', 14, 0);
INSERT INTO `bl_blog` VALUES ('1311375132718956544', 'docker中使用fastdfs问题', 'http://808km.top/blog/img/default.jpg', '<h1><a id=\"dockerfastdfs_0\"></a>docker中使用fastdfs问题</h1>\n<p>在今天部署之前制作的个人博客项目时，突然图片都获取不到了，我尝试上传图片，可以上传成功，但是访问不到，显示请求被拒绝。经过排查，准备尝试重新启动一个fastdfs容器时，发现之前启动的fastdfs容器的数据卷无法删除，以此猜测可能是数据卷出了问题，所以我重新启动了一个容器，数据卷使用的之前的容器使用的数据卷，发现还是无法访问图片，我删除该容器后再次启动了一个新容器，使用了新的数据卷，这时候上传图片后正常访问。</p>\n', 0, 19, 0, 13, NULL, 0, NULL, '2020-09-30 18:39:30', '2020-12-03 19:29:48', 18, 0);
INSERT INTO `bl_blog` VALUES ('1322169187161767936', 'Dubbo超时问题', 'http://808km.top/blog/img/default.jpg', '<h1><a id=\"Dubbo_0\"></a>Dubbo的超时问题</h1>\n<p>Dubbo如果不设置timeout属性的话，默认会有一个1000ms的超时时间，当你超过这个值的时候dubbo就会抛出TimeOutException<br />\n<img src=\"https://img-blog.csdnimg.cn/20201030210230916.png#pic_center\" alt=\"在这里插入图片描述\" /><br />\n而我在Controller里使用了hystrix做了熔断保护</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\">    <span class=\"hljs-comment\">/**\n     * 入库操作\n     * <span class=\"hljs-doctag\">@param</span> purchaseId 采购单id\n     * <span class=\"hljs-doctag\">@return</span> 统一返回类型\n     */</span>\n    <span class=\"hljs-meta\">@HystrixCommand</span>\n    <span class=\"hljs-meta\">@PostMapping</span>(<span class=\"hljs-string\">\"doInventory/{purchaseId}\"</span>)\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> AjaxResult <span class=\"hljs-title\">doInventory</span><span class=\"hljs-params\">(@PathVariable String purchaseId)</span> </span>{\n        <span class=\"hljs-keyword\">return</span> AjaxResult.toAjax(<span class=\"hljs-keyword\">this</span>.purchaseService.doInventory(purchaseId, ShiroSecurityUtils.getCurrentSimpleUser()));\n    }\n</code></div></pre>\n<p>其中熔断保护后执行的方法来自于Controller里集成的BaseController</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-comment\">/**\n * <span class=\"hljs-doctag\">@author</span> wsy\n * <span class=\"hljs-doctag\">@date</span> 2020-10-29 9:33\n * <span class=\"hljs-doctag\">@DefaultProperties</span> 配置熔断保护的方法\n */</span>\n<span class=\"hljs-meta\">@DefaultProperties</span>(defaultFallback = <span class=\"hljs-string\">\"fullBack\"</span>)\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">BaseController</span> </span>{\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> AjaxResult <span class=\"hljs-title\">fullBack</span><span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">return</span> AjaxResult.toAjax(-<span class=\"hljs-number\">1</span>);\n    }\n}\n</code></div></pre>\n<p>fullBack方法的返回值就是给我的统一返回类返回一个-1值<br />\n我的统一返回类中会认为-1值是错误信息， 所以会返回操作失败</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\">    <span class=\"hljs-comment\">/**\n     * 返回错误消息\n     *\n     * <span class=\"hljs-doctag\">@param</span> rows 返回行数\n     * <span class=\"hljs-doctag\">@return</span> 添加修改删除转化信息\n     */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> AjaxResult <span class=\"hljs-title\">toAjax</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> rows)</span> </span>{\n        <span class=\"hljs-keyword\">return</span> rows &gt; <span class=\"hljs-number\">0</span> ? AjaxResult.success() : AjaxResult.fail();\n    }\n</code></div></pre>\n<p>在我今天3个小时的一步步排查异常下终于找到了错误，就是Dubbo的超时机制，在我没有设置超时时间的情况下给我一直在抛异常，导致服务返回的code一直是操作失败</p>\n<h1><a id=\"_47\"></a>优先级选择</h1>\n<p>在dubbo中如果provider和consumer都配置了相同的一个属性，比如本文分析的timeout，其实是有一个优先级的，优先级：<br />\n<strong>consumer方法配置 &gt; provider方法配置 &gt; consumer接口配置 &gt; provider接口配置 &gt; consumer全局配置 &gt; provider全局配置。</strong></p>\n<p>参考博客：<a href=\"https://segmentfault.com/a/1190000018924018\" target=\"_blank\">https://segmentfault.com/a/1190000018924018</a></p>\n', 0, 40, 0, 18, NULL, 0, NULL, '2020-10-30 21:31:13', '2020-12-28 01:40:19', 39, 0);
INSERT INTO `bl_blog` VALUES ('1331436834413211648', 'springboot 后端传给前端相差8小时', 'http://808km.top/blog/img/default.jpg', '<p>在开发中日期最常打交道的东西之一，但是日期又会存在各式各样的格式，常见的情形就是，从数据库取出的日期往往都是时间戳（毫秒数）的形式，这个一般情况下是前端不想要的结果，需要进行处理，那在springboot中比较简单：<br />\n因为后端传给前端时默认使用jackson转换格式所以我们可以</p>\n<ol>\n<li>在application.yml中设置</li>\n</ol>\n<pre><div class=\"hljs\"><code class=\"lang-yml\"><span class=\"hljs-attr\">spring:</span>\n<span class=\"hljs-attr\">  jackson:</span>\n<span class=\"hljs-attr\">    date-format:</span> <span class=\"hljs-string\">yyyy-MM-dd</span> <span class=\"hljs-attr\">HH:mm:ss</span>\n<span class=\"hljs-attr\">    time-zone:</span> <span class=\"hljs-string\">GMT+8</span>\n</code></div></pre>\n<ol start=\"2\">\n<li>在pojo对象上添加@JsonFormat注解</li>\n</ol>\n<pre><div class=\"hljs\"><code class=\"lang-java\">    <span class=\"hljs-meta\">@JsonFormat</span>(pattern = <span class=\"hljs-string\">\"yyyy-MM-dd HH:mm:ss\"</span>, timezone = <span class=\"hljs-string\">\"GMT+8\"</span>)\n    <span class=\"hljs-keyword\">private</span> Date createdTime;\n</code></div></pre>\n<p>但是我在尝试了这两个方法以及相类似的方法，但是都无效，要么就是格式化无效，直接返回的时间戳，要么就是时间还是相差8个小时，但是格式化有效。</p>\n<p>这时我看到了另外一篇不一样的博客，随后明白了为什么我的配置没有用，原来是因为我添加拦截器时写的配置类的问题。<br />\n以下代码是我更改之前的配置类</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">package</span> com.wsy.blog.config;\n\n<span class=\"hljs-keyword\">import</span> com.fasterxml.jackson.databind.DeserializationFeature;\n<span class=\"hljs-keyword\">import</span> com.fasterxml.jackson.databind.ObjectMapper;\n<span class=\"hljs-keyword\">import</span> com.wsy.blog.interceptor.LoginInterceptor;\n<span class=\"hljs-keyword\">import</span> org.springframework.context.annotation.Bean;\n<span class=\"hljs-keyword\">import</span> org.springframework.context.annotation.Configuration;\n<span class=\"hljs-keyword\">import</span> org.springframework.http.converter.HttpMessageConverter;\n<span class=\"hljs-keyword\">import</span> org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;\n<span class=\"hljs-keyword\">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistry;\n<span class=\"hljs-keyword\">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport;\n\n<span class=\"hljs-keyword\">import</span> java.text.SimpleDateFormat;\n<span class=\"hljs-keyword\">import</span> java.util.List;\n\n<span class=\"hljs-comment\">/**\n * <span class=\"hljs-doctag\">@Author</span>: wsy\n * <span class=\"hljs-doctag\">@Date</span>: 2020/8/10 11:34\n */</span>\n<span class=\"hljs-meta\">@Configuration</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">InterceptorConfig</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">WebMvcConfigurationSupport</span> </span>{\n\n    <span class=\"hljs-meta\">@Bean</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> LoginInterceptor <span class=\"hljs-title\">getLoginInterceptor</span><span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> LoginInterceptor();\n    }\n\n    <span class=\"hljs-comment\">/**\n     * 添加拦截器\n     * <span class=\"hljs-doctag\">@param</span> registry  拦截器注册\n     */</span>\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">addInterceptors</span><span class=\"hljs-params\">(InterceptorRegistry registry)</span> </span>{\n        <span class=\"hljs-comment\">// TODO Auto-generated method stub</span>\n        registry.addInterceptor(getLoginInterceptor()).addPathPatterns(<span class=\"hljs-string\">\"/**\"</span>)\n                .excludePathPatterns(<span class=\"hljs-string\">\"/*/login\"</span>);;\n        <span class=\"hljs-keyword\">super</span>.addInterceptors(registry);\n    }\n}\n</code></div></pre>\n<p>这里大家注意，看看自己的代码有没有因为添加拦截器而创建了一个配置类，该类继承了<code>WebMvcConfigurationSupport</code>，就是他！以前是用 <code>WebMvcConfigurerAdapter</code> ，springboot 2.0 建议使用 <code>WebMvcConfigurationSupport</code> 。但是在添加拦截器并继承 <code>WebMvcConfigurationSupport</code> 后会覆盖<code>@EnableAutoConfiguration</code>关于<code>WebMvcAutoConfiguration</code>的配置！从而导致所有的Date返回都变成时间戳！<br />\n可以采用另外一种方式，在你继承<code>WebMvcConfigurationSupport</code>的子类中添加日期转换的bean<br />\n以下是我更改后的代码</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">package</span> com.wsy.blog.config;\n\n<span class=\"hljs-keyword\">import</span> com.fasterxml.jackson.databind.DeserializationFeature;\n<span class=\"hljs-keyword\">import</span> com.fasterxml.jackson.databind.ObjectMapper;\n<span class=\"hljs-keyword\">import</span> com.wsy.blog.interceptor.LoginInterceptor;\n<span class=\"hljs-keyword\">import</span> org.springframework.context.annotation.Bean;\n<span class=\"hljs-keyword\">import</span> org.springframework.context.annotation.Configuration;\n<span class=\"hljs-keyword\">import</span> org.springframework.http.converter.HttpMessageConverter;\n<span class=\"hljs-keyword\">import</span> org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;\n<span class=\"hljs-keyword\">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistry;\n<span class=\"hljs-keyword\">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport;\n\n<span class=\"hljs-keyword\">import</span> java.text.SimpleDateFormat;\n<span class=\"hljs-keyword\">import</span> java.util.List;\n\n<span class=\"hljs-comment\">/**\n * <span class=\"hljs-doctag\">@Author</span>: wsy\n * <span class=\"hljs-doctag\">@Date</span>: 2020/8/10 11:34\n */</span>\n<span class=\"hljs-meta\">@Configuration</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">InterceptorConfig</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">WebMvcConfigurationSupport</span> </span>{\n\n    <span class=\"hljs-meta\">@Bean</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> LoginInterceptor <span class=\"hljs-title\">getLoginInterceptor</span><span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> LoginInterceptor();\n    }\n\n    <span class=\"hljs-comment\">/**\n     * 定义时间格式转换器\n     * <span class=\"hljs-doctag\">@return</span>  MappingJackson2HttpMessageConverter\n     */</span>\n    <span class=\"hljs-meta\">@Bean</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> MappingJackson2HttpMessageConverter <span class=\"hljs-title\">jackson2HttpMessageConverter</span><span class=\"hljs-params\">()</span> </span>{\n        MappingJackson2HttpMessageConverter converter = <span class=\"hljs-keyword\">new</span> MappingJackson2HttpMessageConverter();\n        ObjectMapper mapper = <span class=\"hljs-keyword\">new</span> ObjectMapper();\n        mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, <span class=\"hljs-keyword\">false</span>);\n        mapper.setDateFormat(<span class=\"hljs-keyword\">new</span> SimpleDateFormat(<span class=\"hljs-string\">\"yyyy-MM-dd HH:mm:ss\"</span>));\n        converter.setObjectMapper(mapper);\n        <span class=\"hljs-keyword\">return</span> converter;\n    }\n\n    <span class=\"hljs-comment\">/**\n     * 添加转换器\n     * <span class=\"hljs-doctag\">@param</span> converters    converters\n     */</span>\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">configureMessageConverters</span><span class=\"hljs-params\">(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters)</span> </span>{\n        <span class=\"hljs-comment\">//将我们定义的时间格式转换器添加到转换器列表中,</span>\n        <span class=\"hljs-comment\">//这样jackson格式化时候但凡遇到Date类型就会转换成我们定义的格式</span>\n        converters.add(jackson2HttpMessageConverter());\n    }\n\n    <span class=\"hljs-comment\">/**\n     * 添加拦截器\n     * <span class=\"hljs-doctag\">@param</span> registry  拦截器注册\n     */</span>\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">addInterceptors</span><span class=\"hljs-params\">(InterceptorRegistry registry)</span> </span>{\n        <span class=\"hljs-comment\">// TODO Auto-generated method stub</span>\n        registry.addInterceptor(getLoginInterceptor()).addPathPatterns(<span class=\"hljs-string\">\"/**\"</span>)\n                .excludePathPatterns(<span class=\"hljs-string\">\"/*/login\"</span>);;\n        <span class=\"hljs-keyword\">super</span>.addInterceptors(registry);\n    }\n}\n</code></div></pre>\n<p>感谢博主的分享经验<br />\n参考博客：<a href=\"https://blog.csdn.net/qq_34975710/article/details/84872489\" target=\"_blank\">https://blog.csdn.net/qq_34975710/article/details/84872489</a></p>\n', 1, 77, 0, 9, NULL, 0, NULL, '2020-11-25 11:17:33', '2021-01-02 15:19:24', 37, 0);
INSERT INTO `bl_blog` VALUES ('1332742588649615360', 'vue项目引入markdown', 'http://808km.top/blog/img/img/default/1332742519359713280', '<h2><a id=\"_0\"></a>前言</h2>\n<p>咳咳，终于终于终于将我的博客项目引入了<strong>markdown</strong>了，之前博客使用的是富文本编辑器，因为最近我都是使用的<strong>markdown</strong>做笔记和写博客，而自己的项目博客是个富文本编辑器这让我很不舒服，所以花了一整个晚上的时间把我的博客项目换成了<strong>markdown</strong>编辑器，让我先用这个<strong>markdown</strong>编辑器写一个博客试试哈哈哈哈！</p>\n<h2><a id=\"_2\"></a>操作步骤</h2>\n<h3><a id=\"markdown_3\"></a>引入markdown相关插件</h3>\n<h4><a id=\"mavonEditor_4\"></a>mavonEditor</h4>\n<p>我现在博客使用的markdown编辑器是使用的是mavonEditor<br />\n我们需要使用它的话首先需要安装</p>\n<pre><code class=\"lang-\">npm install mavon-editor --save\n</code></pre>\n<p>然后我们在main.js中全局引用它</p>\n<pre><div class=\"hljs\"><code class=\"lang-javascript\"><span class=\"hljs-comment\">// 引入markdown组件</span>\n<span class=\"hljs-keyword\">import</span> Vue <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\'vue\'</span>\n<span class=\"hljs-keyword\">import</span> mavonEditor <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\'mavon-editor\'</span>\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">\'mavon-editor/dist/css/index.css\'</span>\n\nVue.use(mavonEditor)\n\n<span class=\"hljs-keyword\">new</span> Vue({\n  <span class=\"hljs-attr\">el</span>: <span class=\"hljs-string\">\'#app\'</span>,\n  router,\n  store,\n  <span class=\"hljs-attr\">render</span>: <span class=\"hljs-function\"><span class=\"hljs-params\">h</span> =&gt;</span> h(App)\n})\n</code></div></pre>\n<p>随后我们便可以在项目中引用该组件,value绑定的是markdown的源内容</p>\n<pre><div class=\"hljs\"><code class=\"lang-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"main\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">mavon-editor</span> <span class=\"hljs-attr\">v-model</span>=<span class=\"hljs-string\">\"value\"</span>/&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</code></div></pre>\n<p>markdown中的图片上传</p>\n<pre><div class=\"hljs\"><code class=\"lang-javascript\"><span class=\"hljs-comment\">// 图片上传</span>\n    uploadImg(pos, $file) {\n      <span class=\"hljs-comment\">// 定义上传uri</span>\n      <span class=\"hljs-keyword\">const</span> uploadUri = <span class=\"hljs-string\">\'img/blogImg/\'</span>\n      <span class=\"hljs-comment\">// 定义上传对象</span>\n      <span class=\"hljs-keyword\">var</span> formData = <span class=\"hljs-keyword\">new</span> FormData()\n      formData.append(<span class=\"hljs-string\">\'file\'</span>, $file)\n      formData.append(<span class=\"hljs-string\">\'uploadUri\'</span>, uploadUri)\n      uploadImage(formData).then(<span class=\"hljs-function\"><span class=\"hljs-params\">res</span> =&gt;</span> {\n        <span class=\"hljs-comment\">// 将markdown插入的图片url更换为返回的ul</span>\n        <span class=\"hljs-keyword\">this</span>.$refs.md.$img2Url(pos, res.data)\n      })\n    }\n</code></div></pre>\n<table>\n<thead>\n<tr>\n<th>pos</th>\n<th>$file</th>\n<th>this.<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>r</mi><mi>e</mi><mi>f</mi><mi>s</mi><mi mathvariant=\"normal\">.</mi><mi>m</mi><mi>d</mi><mi mathvariant=\"normal\">.</mi></mrow><annotation encoding=\"application/x-tex\">refs.md.</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.69444em;\"></span><span class=\"strut bottom\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathit\">e</span><span class=\"mord mathit\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathit\">s</span><span class=\"mord mathrm\">.</span><span class=\"mord mathit\">m</span><span class=\"mord mathit\">d</span><span class=\"mord mathrm\">.</span></span></span></span>img2Url</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>当前有插入了几张图片</td>\n<td>文件对象</td>\n<td>修改markdown源连接为新设置的值</td>\n</tr>\n</tbody>\n</table>\n<p>更多api文档请自行查看官方文档：<a href=\"https://github.com/hinesboy/mavonEditor\" target=\"_blank\">https://github.com/hinesboy/mavonEditor</a></p>\n<h4><a id=\"marked_54\"></a>marked</h4>\n<p>在引入了mavonEditor之后，确实是可以使用markdown编辑器写博客了，但是发现上传上去的是markdown的源代码，那得到的也只是markdown的源内容，那……谁又喜欢看这种东西呢，然后又去百度找解决的办法，发现了marked，该插件能够将markdown的内容转换为HTML格式渲染出来。<br />\n照例先安装</p>\n<pre><code class=\"lang-\">npm install --save marked\n</code></pre>\n<p>安装完后在需要使用到的页面引用该插件</p>\n<pre><div class=\"hljs\"><code class=\"lang-javascript\"><span class=\"hljs-keyword\">import</span> marked <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\'marked\'</span>\n</code></div></pre>\n<p>然后就可以使用啦，直接调用一个方法即可转换</p>\n<pre><div class=\"hljs\"><code class=\"lang-javascript\"><span class=\"hljs-comment\">//  将Markdown源内容转换为HTML</span>\n<span class=\"hljs-keyword\">this</span>.content = marked(source)\n</code></div></pre>\n<p>具体使用方法可以参考<br />\n官网：<a href=\"https://marked.js.org/\" target=\"_blank\">https://marked.js.org/</a><br />\nGitHub：<a href=\"https://github.com/markedjs/marked\" target=\"_blank\">https://github.com/markedjs/marked</a></p>\n<h4><a id=\"highlight_72\"></a>highlight</h4>\n<p>这是已经可以从Markdown转换为HTML来渲染了，但是郁闷的又来了，发现代码没有高亮显示，而且Markdown没有一点样式，非常的难看，这时又只能打开百度去找解决办法咯，就找到了highlight这个插件，这是专门用来给Markdown添加代码高亮的插件，与之相似的还有highlightjs-line-numbers.js这是用来显示行数的，但是我尝试了，好像需要JQuery才能够使用我就放弃了。<br />\n首先照例先安装</p>\n<pre><code class=\"lang-\">npm install --save highlight\n</code></pre>\n<p>然后在需要使用到的页面引用</p>\n<pre><div class=\"hljs\"><code class=\"lang-javascript\"><span class=\"hljs-comment\">// 引入代码高亮插件</span>\n<span class=\"hljs-keyword\">import</span> hljs <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\'highlight.js\'</span>\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">\'highlight.js/styles/atom-one-dark.css\'</span>\n<span class=\"hljs-comment\">// 导入本地markdown样式</span>\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">\'../../styles/markdown.css\'</span>\n</code></div></pre>\n<p>然后在marked转换格式之前执行一个方法</p>\n<pre><div class=\"hljs\"><code class=\"lang-javascript\"> <span class=\"hljs-comment\">// 展现经过markdown渲染后的html</span>\n        marked.setOptions({\n          <span class=\"hljs-attr\">renderer</span>: <span class=\"hljs-keyword\">new</span> marked.Renderer(),\n          <span class=\"hljs-attr\">highlight</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">code</span>) </span>{\n            <span class=\"hljs-keyword\">return</span> hljs.highlightAuto(code).value\n          },\n          <span class=\"hljs-attr\">pedantic</span>: <span class=\"hljs-literal\">false</span>,\n          <span class=\"hljs-attr\">gfm</span>: <span class=\"hljs-literal\">true</span>,\n          <span class=\"hljs-attr\">tables</span>: <span class=\"hljs-literal\">true</span>,\n          <span class=\"hljs-attr\">breaks</span>: <span class=\"hljs-literal\">false</span>,\n          <span class=\"hljs-attr\">sanitize</span>: <span class=\"hljs-literal\">false</span>,\n          <span class=\"hljs-attr\">smartLists</span>: <span class=\"hljs-literal\">true</span>,\n          <span class=\"hljs-attr\">smartypants</span>: <span class=\"hljs-literal\">false</span>,\n          <span class=\"hljs-attr\">xhtml</span>: <span class=\"hljs-literal\">false</span>\n        })\n        <span class=\"hljs-keyword\">this</span>.blogContent = marked(res.data.blogContent)\n</code></div></pre>\n<p>当然我也只用到了这一个地方如果有想了解更多的可以到GitHub上查看源代码<br />\n<a href=\"https://github.com/highlightjs/highlight.js/\" target=\"_blank\">https://github.com/highlightjs/highlight.js/</a></p>\n<h2><a id=\"_107\"></a>总结</h2>\n<p>更换这个Markdown编辑器真的花了我不少时间，确实感觉前端对我来说好难好难，每次出一点小问题就需要好久才能够解决，当然自己做出来了也还是很有成就感的，毕竟是自己做出来的东西。<br />\n我的个人博客:<a href=\"http://oopsw.top:1001\" target=\"_blank\">http://oopsw.top:1001</a></p>\n', 0, 24, 0, 15, '更换这个Markdown编辑器真的花了我不少时间，确实感觉前端对我来说好难好难，每次出一点小问题就需要好久才能够解决，当然自己做出来了也还是很有成就感的，毕竟是自己做出来的东西。', 0, NULL, '2020-11-29 01:46:09', '2020-12-22 13:45:58', 23, 0);
INSERT INTO `bl_blog` VALUES ('1333411378995605504', 'nacos集群环境搭建', 'http://808km.top/blog/img/img/default/1333411206555185152', '<h2><a id=\"_0\"></a>预备环境准备</h2>\n<p>Nacos 依赖 <a href=\"https://docs.oracle.com/cd/E19182-01/820-7851/inst_cli_jdk_javahome_t/\" target=\"_blank\">Java</a> 环境来运行。如果您是从代码开始构建并运行Nacos，还需要为此配置 <a href=\"https://maven.apache.org/index.html\" target=\"_blank\">Maven</a>环境，请确保是在以下版本环境中安装使用:</p>\n<ol>\n<li>64 bit OS，支持 Linux/Unix/Mac/Windows，推荐选用 Linux/Unix/Mac。</li>\n<li>64 bit JDK 1.8+；<a href=\"http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html\" target=\"_blank\">下载</a> &amp; <a href=\"https://docs.oracle.com/cd/E19182-01/820-7851/inst_cli_jdk_javahome_t/\" target=\"_blank\">配置</a>。</li>\n<li>Maven 3.2.x+；<a href=\"https://maven.apache.org/download.cgi\" target=\"_blank\">下载</a> &amp; <a href=\"https://maven.apache.org/settings.html\" target=\"_blank\">配置</a>。</li>\n</ol>\n<h2><a id=\"nacos_8\"></a>下载nacos安装包</h2>\n<p>https://github.com/alibaba/nacos/releases/tag/1.4.0</p>\n<blockquote>\n<p><img src=\"https://img-blog.csdnimg.cn/20201130205557917.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ0ODU5OA==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /></p>\n</blockquote>\n<p>linux选择第一个</p>\n<p>windows选择第二个</p>\n<h2><a id=\"_21\"></a>搭建环境</h2>\n<h3><a id=\"_23\"></a>集群模式部署</h3>\n<p>这个快速开始手册是帮忙您快速在你的电脑上，下载安装并使用Nacos，部署生产使用的集群模式。</p>\n<h3><a id=\"_27\"></a>集群部署架构图</h3>\n<p><img src=\"https://img-blog.csdnimg.cn/20201130205609797.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ0ODU5OA==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /></p>\n<p>VIP:虚拟ip</p>\n<p>因此开源的时候推荐用户把所有服务列表放到一个vip下面，然后挂到一个域名下面</p>\n<p><a href=\"http://ip1/\" target=\"_blank\">http://ip1</a>:port/openAPI 直连ip模式，机器挂则需要修改ip才可以使用。</p>\n<p><a href=\"http://vip/\" target=\"_blank\">http://VIP</a>:port/openAPI 挂载VIP模式，直连vip即可，下面挂server真实ip，可读性不好。</p>\n<p><a href=\"http://nacos.com/\" target=\"_blank\">http://nacos.com</a>:port/openAPI 域名 + VIP模式，可读性好，而且换ip方便，推荐模式</p>\n<h3><a id=\"_42\"></a>创建目录</h3>\n<p>该目录存放nacos集群</p>\n<pre><div class=\"hljs\"><code class=\"lang-sh\">mkdir /usr/<span class=\"hljs-built_in\">local</span>/nacos\n</code></div></pre>\n<h3><a id=\"nacos_50\"></a>上传nacos</h3>\n<blockquote>\n<p><img src=\"https://img-blog.csdnimg.cn/20201130205630233.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ0ODU5OA==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /></p>\n</blockquote>\n<h3><a id=\"nacos_54\"></a>解压nacos</h3>\n<pre><div class=\"hljs\"><code class=\"lang-sh\">tar -zxvf nacos-server-1.4.0.tar.gz\n</code></div></pre>\n<h3><a id=\"nacos_60\"></a>创建nacos持久化数据库</h3>\n<p>首先使用navicat连接mysql数据库，然后创建数据库</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20201130205643439.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ0ODU5OA==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /></p>\n<p>新建查询后导入SQL脚本即可</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20201130205705669.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ0ODU5OA==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /></p>\n<p>红色框选那栏填写你的SQL脚本位置，SQL脚本在nacos文件夹下的conf下</p>\n<h3><a id=\"nacos_73\"></a>nacos文件夹改名</h3>\n<p>将文件夹名改为nacos3333代表这个nacos的端口号是3333</p>\n<pre><div class=\"hljs\"><code class=\"lang-sh\">mv nacos nacos3333\n</code></div></pre>\n<h3><a id=\"_81\"></a>配置修改</h3>\n<p>首先进入到配置目录</p>\n<pre><div class=\"hljs\"><code class=\"lang-sh\"><span class=\"hljs-built_in\">cd</span> /usr/<span class=\"hljs-built_in\">local</span>/nacos/nacos3333/conf\n</code></div></pre>\n<blockquote>\n<p><img src=\"https://img-blog.csdnimg.cn/2020113020572431.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ0ODU5OA==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /></p>\n</blockquote>\n<p>在更改配置之前先备份配置</p>\n<pre><div class=\"hljs\"><code class=\"lang-sh\">cp application.properties application.properties.example\n</code></div></pre>\n<pre><div class=\"hljs\"><code class=\"lang-sh\">cp cluster.conf.example cluster.conf\n</code></div></pre>\n<h3><a id=\"_104\"></a>集群配置</h3>\n<pre><div class=\"hljs\"><code class=\"lang-sh\">vim cluster.conf\n</code></div></pre>\n<blockquote>\n<p><img src=\"https://img-blog.csdnimg.cn/20201130205739435.png\" alt=\"在这里插入图片描述\" /></p>\n</blockquote>\n<blockquote>\n<p>注意这里不能填写localhost 或者127.0.0.1，这里如果是在本机搭建可以查看本机ip后填写</p>\n<pre><div class=\"hljs\"><code class=\"lang-sh\">hostname -i\n</code></div></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/20201130205749116.png\" alt=\"在这里插入图片描述\" /></p>\n</blockquote>\n<h3><a id=\"nacos_122\"></a>nacos配置</h3>\n<pre><div class=\"hljs\"><code class=\"lang-sh\">vim application.properties\n</code></div></pre>\n<pre><code class=\"lang-properties\">\n#*************** Spring Boot Related Configurations ***************#\n### Default web context path:\nserver.servlet.contextPath=/nacos\n### Default web server port:\nserver.port=3333\n\n#*************** Network Related Configurations ***************#\n### If prefer hostname over ip for Nacos server addresses in cluster.conf:\n# nacos.inetutils.prefer-hostname-over-ip=false\n\n### Specify local server\'s IP:\n# nacos.inetutils.ip-address=\n\n\n#*************** Config Module Related Configurations ***************#\n### If use MySQL as datasource:\n spring.datasource.platform=mysql\n\n### Count of DB:\n db.num=1\n\n### Connect URL of DB:\ndb.url.0=jdbc:mysql://127.0.0.1:3306/nacos_config?characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true&amp;useUnicode=true&amp;useSSL=false&amp;serverTimezone=UTC\ndb.user=root\ndb.password=123456\n\n\n#*************** Naming Module Related Configurations ***************#\n### Data dispatch task execution period in milliseconds:\n# nacos.naming.distro.taskDispatchPeriod=200\n\n### Data count of batch sync task:\n# nacos.naming.distro.batchSyncKeyCount=1000\n\n### Retry delay in milliseconds if sync task failed:\n# nacos.naming.distro.syncRetryDelay=5000\n\n### If enable data warmup. If set to false, the server would accept request without local data preparation:\n# nacos.naming.data.warmup=true\n\n### If enable the instance auto expiration, kind like of health check of instance:\n# nacos.naming.expireInstance=true\n\nnacos.naming.empty-service.auto-clean=true\nnacos.naming.empty-service.clean.initial-delay-ms=50000\nnacos.naming.empty-service.clean.period-time-ms=30000\n\n\n#*************** CMDB Module Related Configurations ***************#\n### The interval to dump external CMDB in seconds:\n# nacos.cmdb.dumpTaskInterval=3600\n\n### The interval of polling data change event in seconds:\n# nacos.cmdb.eventTaskInterval=10\n\n### The interval of loading labels in seconds:\n# nacos.cmdb.labelTaskInterval=300\n\n### If turn on data loading task:\n# nacos.cmdb.loadDataAtStart=false\n\n\n#*************** Metrics Related Configurations ***************#\n### Metrics for prometheus\n#management.endpoints.web.exposure.include=*\n\n### Metrics for elastic search\nmanagement.metrics.export.elastic.enabled=false\n#management.metrics.export.elastic.host=http://localhost:9200\n\n### Metrics for influx\nmanagement.metrics.export.influx.enabled=false\n#management.metrics.export.influx.db=springboot\n#management.metrics.export.influx.uri=http://localhost:8086\n#management.metrics.export.influx.auto-create-db=true\n#management.metrics.export.influx.consistency=one\n#management.metrics.export.influx.compressed=true\n\n\n#*************** Access Log Related Configurations ***************#\n### If turn on the access log:\nserver.tomcat.accesslog.enabled=true\n\n### The access log pattern:\nserver.tomcat.accesslog.pattern=%h %l %u %t &quot;%r&quot; %s %b %D %{User-Agent}i %{Request-Source}i\n\n### The directory of access log:\nserver.tomcat.basedir=\n\n\n#*************** Access Control Related Configurations ***************#\n### If enable spring security, this option is deprecated in 1.2.0:\n#spring.security.enabled=false\n\n### The ignore urls of auth, is deprecated in 1.2.0:\nnacos.security.ignore.urls=/,/error,/**/*.css,/**/*.js,/**/*.html,/**/*.map,/**/*.svg,/**/*.png,/**/*.ico,/console-fe/public/**,/v1/auth/**,/v1/console/health/**,/actuator/**,/v1/console/server/**\n\n### The auth system to use, currently only \'nacos\' is supported:\nnacos.core.auth.system.type=nacos\n\n### If turn on auth system:\nnacos.core.auth.enabled=false\n\n### The token expiration in seconds:\nnacos.core.auth.default.token.expire.seconds=18000\n\n### The default token:\nnacos.core.auth.default.token.secret.key=SecretKey012345678901234567890123456789012345678901234567890123456789\n\n### Turn on/off caching of auth information. By turning on this switch, the update of auth information would have a 15 seconds delay.\nnacos.core.auth.caching.enabled=true\n\n\n#*************** Istio Related Configurations ***************#\n### If turn on the MCP server:\nnacos.istio.mcp.server.enabled=false\n\n\n\n###*************** Add from 1.3.0 ***************###\n\n\n#*************** Core Related Configurations ***************#\n\n### set the WorkerID manually\n# nacos.core.snowflake.worker-id=\n\n### Member-MetaData\n# nacos.core.member.meta.site=\n# nacos.core.member.meta.adweight=\n# nacos.core.member.meta.weight=\n\n### MemberLookup\n### Addressing pattern category, If set, the priority is highest\n# nacos.core.member.lookup.type=[file,address-server]\n## Set the cluster list with a configuration file or command-line argument\n# nacos.member.list=192.168.16.101:8847?raft_port=8807,192.168.16.101?raft_port=8808,192.168.16.101:8849?raft_port=8809\n## for AddressServerMemberLookup\n# Maximum number of retries to query the address server upon initialization\n# nacos.core.address-server.retry=5\n## Server domain name address of [address-server] mode\n# address.server.domain=jmenv.tbsite.net\n## Server port of [address-server] mode\n# address.server.port=8080\n## Request address of [address-server] mode\n# address.server.url=/nacos/serverlist\n\n#*************** JRaft Related Configurations ***************#\n\n### Sets the Raft cluster election timeout, default value is 5 second\n# nacos.core.protocol.raft.data.election_timeout_ms=5000\n### Sets the amount of time the Raft snapshot will execute periodically, default is 30 minute\n# nacos.core.protocol.raft.data.snapshot_interval_secs=30\n### raft internal worker threads\n# nacos.core.protocol.raft.data.core_thread_num=8\n### Number of threads required for raft business request processing\n# nacos.core.protocol.raft.data.cli_service_thread_num=4\n### raft linear read strategy. Safe linear reads are used by default, that is, the Leader tenure is confirmed by heartbeat\n# nacos.core.protocol.raft.data.read_index_type=ReadOnlySafe\n### rpc request timeout, default 5 seconds\n# nacos.core.protocol.raft.data.rpc_request_timeout_ms=5000\n\n</code></pre>\n<p>这是我的整个application.properties文件,其中主要修改的地方有两处</p>\n<p>修改端口号</p>\n<pre><code class=\"lang-properties\">### Default web server port:\nserver.port=3333\n</code></pre>\n<p>修改数据库为mysql并配置mysql的url</p>\n<pre><code class=\"lang-properties\">#*************** Config Module Related Configurations ***************#\n### If use MySQL as datasource:\n spring.datasource.platform=mysql\n\n### Count of DB:\n db.num=1\n\n### Connect URL of DB:\ndb.url.0=jdbc:mysql://127.0.0.1:3306/nacos_config?characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true&amp;useUnicode=true&amp;useSSL=false&amp;serverTimezone=UTC\ndb.user=root\ndb.password=123456\n</code></pre>\n<p>这时候配置就差不多啦可以开始启动服务了</p>\n<pre><div class=\"hljs\"><code class=\"lang-sh\"><span class=\"hljs-comment\"># 进入到nacos3333的bin目录</span>\n<span class=\"hljs-built_in\">cd</span> /usr/<span class=\"hljs-built_in\">local</span>/nacos/nacos3333/bin\n<span class=\"hljs-comment\"># 执行启动脚本 因为nacos启动脚本默认就是使用集群模式所以不用更改</span>\n./startup.sh\n</code></div></pre>\n<p>这时候我们可以查看nacos的启动状态</p>\n<pre><div class=\"hljs\"><code class=\"lang-sh\">ps -ef | grep nacos\n</code></div></pre>\n<blockquote>\n<p><img src=\"https://img-blog.csdnimg.cn/20201130205818481.png\" alt=\"在这里插入图片描述\" /></p>\n</blockquote>\n<p>这时候我们应该就可以通过 服务器ip:3333/nacos访问到nacos</p>\n<blockquote>\n<p><img src=\"https://img-blog.csdnimg.cn/20201130205828641.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ0ODU5OA==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /></p>\n</blockquote>\n<p>成功的访问到了nacos代表成功了。</p>\n<h3><a id=\"nacos_344\"></a>nacos集群启动</h3>\n<p>这时候我们就可以回到nacos目录下拷贝之前的nacos3333文件夹来启动nacos4444和nacos5555</p>\n<pre><div class=\"hljs\"><code class=\"lang-sh\"><span class=\"hljs-built_in\">cd</span> /usr/<span class=\"hljs-built_in\">local</span>/nacos\n<span class=\"hljs-comment\"># cp -r 代表递归拷贝</span>\ncp -r nacos3333 nacos4444\ncp -r nacos3333 nacos5555\n</code></div></pre>\n<p>这时候再分别将nacos4444和nacos5555文件夹下的conf目录中的application.properties中的server.port更改为3333、4444然后再启动，这里我就不再演示了，和之前配置一样。</p>\n<p>随后我们再依次启动nacos4444，nacos5555</p>\n<p>###########################################################################</p>\n<p>启动后发现问题，nacos5555启动不起来，查看日志得到发现内存不足，nacos脚本默认给的最大内存是2G，我们可以去改小一点。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20201130205845619.png\" alt=\"在这里插入图片描述\" /></p>\n<p>原红框中限制的内存是2g 最小1g 适当该小一点[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传<br />\n<img src=\"https://img-blog.csdnimg.cn/20201130205903628.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ0ODU5OA==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /></p>\n<p>然后再依次启动三个服务</p>\n<p>登录任意一个nacos可以看到如下页面即集群启动成功</p>\n<h3><a id=\"nginx_373\"></a>nginx配置</h3>\n<p>这配置nginx负载均衡访问nacos</p>\n<pre><div class=\"hljs\"><code class=\"lang-sh\"><span class=\"hljs-built_in\">cd</span> /usr/<span class=\"hljs-built_in\">local</span>/nginx/conf\nvim nginx.conf\n</code></div></pre>\n<pre><code class=\"lang-conf\">#user  nobody;\nworker_processes  1;\n\n#error_log  logs/error.log;\n#error_log  logs/error.log  notice;\n#error_log  logs/error.log  info;\n\n#pid        logs/nginx.pid;\n\n\nevents {\n    worker_connections  1024;\n}\n\n\nhttp {\n    include       mime.types;\n    default_type  application/octet-stream;\n\n    #log_format  main  \'$remote_addr - $remote_user [$time_local] &quot;$request&quot; \'\n    #                  \'$status $body_bytes_sent &quot;$http_referer&quot; \'\n    #                  \'&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;\';\n\n    #access_log  logs/access.log  main;\n\n    sendfile        on;\n    #tcp_nopush     on;\n\n    #keepalive_timeout  0;\n    keepalive_timeout  65;\n\n    #gzip  on;\n\n    #配置刚刚搭建好的nacos集群\n    upstream cluster{                                                        \n	    server 127.0.0.1:3333;\n	    server 127.0.0.1:4444;\n	    server 127.0.0.1:5555;\n	}\n\n    server {\n        listen       1111;\n        server_name  nacos_cluster;\n\n        #charset koi8-r;\n\n        #access_log  logs/host.access.log  main;\n\n        location / {\n            #root   html;\n            #index  index.html index.htm;\n            #将所有访问/的都映射到配置好的集群\n            proxy_pass http://cluster;\n        }\n\n        #error_page  404              /404.html;\n\n        # redirect server error pages to the static page /50x.html\n        #\n        error_page   500 502 503 504  /50x.html;\n        location = /50x.html {\n            root   html;\n        }\n\n        # proxy the PHP scripts to Apache listening on 127.0.0.1:80\n        #\n        #location ~ \\.php$ {\n        #    proxy_pass   http://127.0.0.1;\n        #}\n\n        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000\n        #\n        #location ~ \\.php$ {\n        #    root           html;\n        #    fastcgi_pass   127.0.0.1:9000;\n        #    fastcgi_index  index.php;\n        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;\n        #    include        fastcgi_params;\n        #}\n\n        # deny access to .htaccess files, if Apache\'s document root\n        # concurs with nginx\'s one\n        #\n        #location ~ /\\.ht {\n        #    deny  all;\n        #}\n    }\n\n\n    # another virtual host using mix of IP-, name-, and port-based configuration\n    #\n    #server {\n    #    listen       8000;\n    #    listen       somename:8080;\n    #    server_name  somename  alias  another.alias;\n\n    #    location / {\n    #        root   html;\n    #        index  index.html index.htm;\n    #    }\n    #}\n\n\n    # HTTPS server\n    #\n    #server {\n    #    listen       443 ssl;\n    #    server_name  localhost;\n\n    #    ssl_certificate      cert.pem;\n    #    ssl_certificate_key  cert.key;\n\n    #    ssl_session_cache    shared:SSL:1m;\n    #    ssl_session_timeout  5m;\n\n    #    ssl_ciphers  HIGH:!aNULL:!MD5;\n    #    ssl_prefer_server_ciphers  on;\n\n    #    location / {\n    #        root   html;\n    #        index  index.html index.htm;\n    #    }\n    #}\n}\n</code></pre>\n<h3><a id=\"nginx_509\"></a>nginx启动</h3>\n<pre><div class=\"hljs\"><code class=\"lang-sh\"><span class=\"hljs-built_in\">cd</span> /usr/<span class=\"hljs-built_in\">local</span>/nginx/sbin\n./nginx\n</code></div></pre>\n<p>这时候我们就可以通过服务器ip地址:1111/nacos 来访问nacos集群了</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20201130205927229.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ0ODU5OA==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /></p>\n<p>关于使用NACOS集群遇到问题 – CODE:503 MSG: SERVER IS STARTING NOW, PLEASE TRY AGAIN LATER!</p>\n<p>这时又出现了问题……在服务提供者注册服务时会报错</p>\n<pre><code class=\"lang-text\">2020-11-30 00:36:59.492 ERROR 13140 --- [  restartedMain] c.a.c.n.registry.NacosServiceRegistry    : nacos registry, nacos-payment-provider register failed...NacosRegistration{nacosDiscoveryProperties=NacosDiscoveryProperties{serverAddr=\'wsy.oopsw.top:1111\', endpoint=\'\', namespace=\'\', watchDelay=30000, logName=\'\', service=\'nacos-payment-provider\', weight=1.0, clusterName=\'DEFAULT\', namingLoadCacheAtStart=\'false\', metadata={preserved.register.source=SPRING_CLOUD}, registerEnabled=true, ip=\'10.175.6.100\', networkInterface=\'\', port=9002, secure=false, accessKey=\'\', secretKey=\'\'}},\n\njava.lang.IllegalStateException: failed to req API:/nacos/v1/ns/instance after all servers([wsy.oopsw.top:1111]) tried: failed to req API:wsy.oopsw.top:1111/nacos/v1/ns/instance. code:503 msg: server is DOWN now, please try again later!\n	at com.alibaba.nacos.client.naming.net.NamingProxy.reqAPI(NamingProxy.java:464) ~[nacos-client-1.1.1.jar:na]\n	at com.alibaba.nacos.client.naming.net.NamingProxy.reqAPI(NamingProxy.java:386) ~[nacos-client-1.1.1.jar:na]\n	at com.alibaba.nacos.client.naming.net.NamingProxy.registerService(NamingProxy.java:188) ~[nacos-client-1.1.1.jar:na]\n	at com.alibaba.nacos.client.naming.NacosNamingService.registerInstance(NacosNamingService.java:205) ~[nacos-client-1.1.1.jar:na]\n	at com.alibaba.nacos.client.naming.NacosNamingService.registerInstance(NacosNamingService.java:184) ~[nacos-client-1.1.1.jar:na]\n	at com.alibaba.cloud.nacos.registry.NacosServiceRegistry.register(NacosServiceRegistry.java:61) ~[spring-cloud-alibaba-nacos-discovery-2.1.0.RELEASE.jar:2.1.0.RELEASE]\n	at org.springframework.cloud.client.serviceregistry.AbstractAutoServiceRegistration.register(AbstractAutoServiceRegistration.java:239) [spring-cloud-commons-2.2.1.RELEASE.jar:2.2.1.RELEASE]\n	at com.alibaba.cloud.nacos.registry.NacosAutoServiceRegistration.register(NacosAutoServiceRegistration.java:74) [spring-cloud-alibaba-nacos-discovery-2.1.0.RELEASE.jar:2.1.0.RELEASE]\n	at org.springframework.cloud.client.serviceregistry.AbstractAutoServiceRegistration.start(AbstractAutoServiceRegistration.java:138) [spring-cloud-commons-2.2.1.RELEASE.jar:2.2.1.RELEASE]\n	at org.springframework.cloud.client.serviceregistry.AbstractAutoServiceRegistration.bind(AbstractAutoServiceRegistration.java:101) [spring-cloud-commons-2.2.1.RELEASE.jar:2.2.1.RELEASE]\n	at org.springframework.cloud.client.serviceregistry.AbstractAutoServiceRegistration.onApplicationEvent(AbstractAutoServiceRegistration.java:88) [spring-cloud-commons-2.2.1.RELEASE.jar:2.2.1.RELEASE]\n	at org.springframework.cloud.client.serviceregistry.AbstractAutoServiceRegistration.onApplicationEvent(AbstractAutoServiceRegistration.java:47) [spring-cloud-commons-2.2.1.RELEASE.jar:2.2.1.RELEASE]\n	at org.springframework.context.event.SimpleApplicationEventMulticaster.doInvokeListener(SimpleApplicationEventMulticaster.java:172) [spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]\n	at org.springframework.context.event.SimpleApplicationEventMulticaster.invokeListener(SimpleApplicationEventMulticaster.java:165) [spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]\n	at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:139) [spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]\n	at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:403) [spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]\n	at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:360) [spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]\n	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.finishRefresh(ServletWebServerApplicationContext.java:165) [spring-boot-2.2.2.RELEASE.jar:2.2.2.RELEASE]\n	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:553) [spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]\n	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:141) [spring-boot-2.2.2.RELEASE.jar:2.2.2.RELEASE]\n	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:747) [spring-boot-2.2.2.RELEASE.jar:2.2.2.RELEASE]\n	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:397) [spring-boot-2.2.2.RELEASE.jar:2.2.2.RELEASE]\n	at org.springframework.boot.SpringApplication.run(SpringApplication.java:315) [spring-boot-2.2.2.RELEASE.jar:2.2.2.RELEASE]\n	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1226) [spring-boot-2.2.2.RELEASE.jar:2.2.2.RELEASE]\n	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1215) [spring-boot-2.2.2.RELEASE.jar:2.2.2.RELEASE]\n	at com.wsy.springcloud.AlibabaProviderApplication.main(AlibabaProviderApplication.java:15) [classes/:na]\n	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_73]\n	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_73]\n	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_73]\n	at java.lang.reflect.Method.invoke(Method.java:497) ~[na:1.8.0_73]\n	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49) [spring-boot-devtools-2.2.2.RELEASE.jar:2.2.2.RELEASE]\n</code></pre>\n<p>像阿里云、腾讯云这种云服务器, 会提供一个外网ip和内网ip, 访问外网ip时会指向对应的内网ip来访问到该服务器, 由于nacos集群内部是指定的使用网卡ip地址来进行通信,但是由于三台服务器各自的内网ip不在同一网段, 所以造成无法通信, 也会造成以下问题</p>\n<p>注册服务:</p>\n<pre><code class=\"lang-\">code:503 msg: server is STARTING now, please try again later!\n</code></pre>\n<p>naming-raft.log 日志:</p>\n<pre><code class=\"lang-\">2019-05-15 00:02:00,000 WARN [IS LEADER] no leader is available now!\n</code></pre>\n<p>这时只要修改启动参数, 设置本机ip地址就可以了<br />\n修改 nacos/bin/startup.sh 文件<br />\n找到 JVM Configuration 这部分, 在集群参数里增加 -Dnacos.server.ip=xx</p>\n<pre><div class=\"hljs\"><code class=\"lang-sh\"><span class=\"hljs-comment\">#===========================================================================================</span>\n<span class=\"hljs-comment\"># JVM Configuration</span>\n<span class=\"hljs-comment\">#===========================================================================================</span>\n\n<span class=\"hljs-comment\"># 单机模式对应的启动参数</span>\n<span class=\"hljs-keyword\">if</span> [[ <span class=\"hljs-string\">\"<span class=\"hljs-variable\">${MODE}</span>\"</span> == <span class=\"hljs-string\">\"standalone\"</span> ]]; <span class=\"hljs-keyword\">then</span>\n    JAVA_OPT=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">${JAVA_OPT}</span> -Xms512m -Xmx512m -Xmn256m\"</span>\n    JAVA_OPT=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">${JAVA_OPT}</span> -Dnacos.standalone=true\"</span>\n<span class=\"hljs-keyword\">else</span>\n<span class=\"hljs-comment\"># 集群模式对应的启动参数</span>\n    JAVA_OPT=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">${JAVA_OPT}</span> -server -Xms2g -Xmx2g -Xmn1g -XX:MetaspaceSize=128m -XX:MaxMetaspaceSize=320m\"</span>\n    JAVA_OPT=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">${JAVA_OPT}</span> -XX:-OmitStackTraceInFastThrow -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=<span class=\"hljs-variable\">${BASE_DIR}</span>/logs/java_heapdump.hprof\"</span>\n    JAVA_OPT=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">${JAVA_OPT}</span> -XX:-UseLargePages\"</span>\n    \n    <span class=\"hljs-comment\"># *新增以下参数设置本机ip地址*</span>\n    JAVA_OPT=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">${JAVA_OPT}</span> -Dnacos.server.ip=本机ip\"</span>\n\n<span class=\"hljs-keyword\">fi</span>\n\n<span class=\"hljs-keyword\">if</span> [[ <span class=\"hljs-string\">\"<span class=\"hljs-variable\">${FUNCTION_MODE}</span>\"</span> == <span class=\"hljs-string\">\"config\"</span> ]]; <span class=\"hljs-keyword\">then</span>\n    JAVA_OPT=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">${JAVA_OPT}</span> -Dnacos.functionMode=config\"</span>\n<span class=\"hljs-keyword\">elif</span> [[ <span class=\"hljs-string\">\"<span class=\"hljs-variable\">${FUNCTION_MODE}</span>\"</span> == <span class=\"hljs-string\">\"naming\"</span> ]]; <span class=\"hljs-keyword\">then</span>\n    JAVA_OPT=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">${JAVA_OPT}</span> -Dnacos.functionMode=naming\"</span>\n<span class=\"hljs-keyword\">fi</span>\n\n</code></div></pre>\n<p>参考博客：https://www.freesion.com/article/33101142210/</p>\n<p>服务注册时报BadRequest400 问题暂时还未解决</p>\n<pre><code class=\"lang-text\">com.alibaba.nacos.api.exception.NacosException: failed to req API:/nacos/v1/ns/instance after all servers([wsy.oopsw.top:1111]) tried: ErrCode:400, ErrMsg:&lt;html&gt;&lt;body&gt;&lt;h1&gt;Whitelabel Error Page&lt;/h1&gt;&lt;p&gt;This application has no explicit mapping for /error, so you are seeing this as a fallback.&lt;/p&gt;&lt;div id=\'created\'&gt;Mon Nov 30 01:33:45 CST 2020&lt;/div&gt;&lt;div&gt;There was an unexpected error (type=Bad Request, status=400).&lt;/div&gt;&lt;div&gt;receive invalid redirect request from peer 172.20.9.153&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;\n</code></pre>\n<p>#############################################################</p>\n<p>问题已解决，是nacos版本的问题，据群里老哥解释说是nacos需要使用与之对应的SpringCloudAlibaba的版本，不然就会报错，我更换版本到1.3.2问题解决服务注册正常</p>\n', 0, 55, 0, 20, 'nacos集群环境搭建', 0, NULL, '2020-11-30 22:03:41', '2020-12-28 01:40:03', 39, 0);
INSERT INTO `bl_blog` VALUES ('1333708609683533824', 'shiro+redis整合实现session持久化登陆失败时也会生成session问题', 'http://808km.top/blog/img/default.jpg', '<h1><a id=\"_0\"></a>前言</h1>\n<p>今天在给博客更新，将session存到redis中持久化存储，正常操作是没问题的，但是后来尝试发现，在我输入的密码是错误的时候，他也创建了session，经过我的一番从尾到头的debug。。。。<br />\n复杂的debug过程就不贴出来了，放出问题的根源<br />\n在登陆时，会访问到我用来记录日志的切面,而我的记录日志方法中有一个需要获取到当前登录的用户的信息，来完善日志的字段</p>\n<blockquote>\n<p><img src=\"http://808km.top/blog/img/img/blogImg/1333703986787631104\" alt=\"image.png\" /><br />\n以下是工具类中的原方法：<br />\n<img src=\"http://808km.top/blog/img/img/blogImg/1333704236625543168\" alt=\"image.png\" /><br />\n以下是修改后的方法<br />\n<img src=\"http://808km.top/blog/img/img/blogImg/1333704399599419392\" alt=\"image.png\" /><br />\n这就是问题的根源，因为在我登录的时候，要记录日志，然后去调用工具类，工具类去获取session，如果没有getSession(false)的话，就会判断session是否存在，如果不存在的话就会自动创建session，这就是为什么明明密码错了还会创建session的原因</p>\n</blockquote>\n', 1, 46, 1, 6, 'shiro+redis整合实现session持久化登陆失败时也会生成session问题', 0, NULL, '2020-12-01 17:44:46', '2021-04-11 17:39:21', 3, 0);
COMMIT;

-- ----------------------------
-- Table structure for bl_link
-- ----------------------------
DROP TABLE IF EXISTS `bl_link`;
CREATE TABLE `bl_link` (
  `link_id` int(11) NOT NULL AUTO_INCREMENT COMMENT '链接id',
  `link_name` varchar(63) NOT NULL COMMENT '名称',
  `link_url` varchar(511) NOT NULL COMMENT '链接地址',
  `created_time` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `update_time` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '更新时间',
  `version` int(11) NOT NULL DEFAULT '1' COMMENT '乐观锁',
  `deleted` int(1) NOT NULL DEFAULT '0' COMMENT '是否删除，0否1是',
  PRIMARY KEY (`link_id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC COMMENT='友情链接表';

-- ----------------------------
-- Records of bl_link
-- ----------------------------
BEGIN;
INSERT INTO `bl_link` VALUES (1, '博客园', 'https://www.cnblogs.com/sucker/', '2020-08-14 14:59:32', '2020-08-14 15:18:11', 4, 0);
INSERT INTO `bl_link` VALUES (2, 'Gitee', 'https://gitee.com/Pink_oops/VBlog', '2020-08-14 15:08:02', '2020-08-15 03:28:11', 1, 1);
INSERT INTO `bl_link` VALUES (3, 'Gitee', 'https://gitee.com/Pink_oops/VBlog', '2020-08-14 15:08:34', '2020-08-14 15:08:59', 1, 1);
INSERT INTO `bl_link` VALUES (4, 'bilibili', 'https://space.bilibili.com/412866452', '2020-08-14 15:09:23', '2020-08-14 15:09:23', 1, 0);
INSERT INTO `bl_link` VALUES (5, 'QQ空间', 'https://user.qzone.qq.com/1437631334/infocenter', '2020-08-14 15:14:22', '2020-08-14 15:14:22', 1, 0);
COMMIT;

-- ----------------------------
-- Table structure for bl_log
-- ----------------------------
DROP TABLE IF EXISTS `bl_log`;
CREATE TABLE `bl_log` (
  `log_id` int(11) NOT NULL AUTO_INCREMENT COMMENT '日志id',
  `log_title` varchar(111) NOT NULL COMMENT '标题',
  `log_url` varchar(127) NOT NULL COMMENT '请求路径',
  `log_params` mediumtext COMMENT '参数',
  `log_status` int(1) NOT NULL DEFAULT '1' COMMENT '访问状态，1正常0异常',
  `log_message` mediumtext COMMENT '异常信息',
  `log_method` varchar(7) NOT NULL COMMENT '请求方式，get、post等',
  `log_time` bigint(20) DEFAULT '0' COMMENT '响应时间',
  `log_result` mediumtext COMMENT '返回值',
  `log_ip` varchar(16) NOT NULL COMMENT '请求ip',
  `created_time` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `created_by` varchar(31) DEFAULT NULL COMMENT '创建人',
  PRIMARY KEY (`log_id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=2805 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC COMMENT='接口访问日志表';

-- ----------------------------
-- Records of bl_log
-- ----------------------------
BEGIN;
INSERT INTO `bl_log` VALUES (2670, '阅读博客', '//blog/read/1333708609683533824', '[1333708609683533824]', 1, NULL, 'PUT', 20, '{\"code\":20000,\"data\":{\"blogCollection\":1,\"blogComment\":0,\"blogContent\":\"# 前言\\n今天在给博客更新，将session存到redis中持久化存储，正常操作是没问题的，但是后来尝试发现，在我输入的密码是错误的时候，他也创建了session，经过我的一番从尾到头的debug。。。。\\n复杂的debug过程就不贴出来了，放出问题的根源\\n在登陆时，会访问到我用来记录日志的切面,而我的记录日志方法中有一个需要获取到当前登录的用户的信息，来完善日志的字段\\n>![image.png](http://808km.top/blog/img/img/blogImg/1333703986787631104)\\n>以下是工具类中的原方法：\\n>![image.png](http://808km.top/blog/img/img/blogImg/1333704236625543168)\\n>以下是修改后的方法\\n>![image.png](http://808km.top/blog/img/img/blogImg/1333704399599419392)\\n>这就是问题的根源，因为在我登录的时候，要记录日志，然后去调用工具类，工具类去获取session，如果没有getSession(false)的话，就会判断session是否存在，如果不存在的话就会自动创建session，这就是为什么明明密码错了还会创建session的原因\",\"blogGoods\":1,\"blogId\":\"1333708609683533824\",\"blogImage\":\"http://808km.top/blog/img/default.jpg\",\"blogRead\":8,\"blogRemark\":\"shiro+redis整合实现session持久化登陆失败时也会生成session问题\",\"blogTitle\":\"shiro+redis整合实现session持久化登陆失败时也会生成session问题\",\"blogType\":6,\"createdTime\":1606815886000,\"typeName\":\"Java\",\"updateTime\":1606846138000,\"version\":1},\"msg\":\"阅读成功\"}', '218.77.40.68', '2020-12-02 02:45:27', NULL);
INSERT INTO `bl_log` VALUES (2671, '阅读博客', '//blog/read/1333708609683533824', '[1333708609683533824]', 1, NULL, 'PUT', 30, '{\"code\":20000,\"data\":{\"blogCollection\":1,\"blogComment\":0,\"blogContent\":\"# 前言\\n今天在给博客更新，将session存到redis中持久化存储，正常操作是没问题的，但是后来尝试发现，在我输入的密码是错误的时候，他也创建了session，经过我的一番从尾到头的debug。。。。\\n复杂的debug过程就不贴出来了，放出问题的根源\\n在登陆时，会访问到我用来记录日志的切面,而我的记录日志方法中有一个需要获取到当前登录的用户的信息，来完善日志的字段\\n>![image.png](http://808km.top/blog/img/img/blogImg/1333703986787631104)\\n>以下是工具类中的原方法：\\n>![image.png](http://808km.top/blog/img/img/blogImg/1333704236625543168)\\n>以下是修改后的方法\\n>![image.png](http://808km.top/blog/img/img/blogImg/1333704399599419392)\\n>这就是问题的根源，因为在我登录的时候，要记录日志，然后去调用工具类，工具类去获取session，如果没有getSession(false)的话，就会判断session是否存在，如果不存在的话就会自动创建session，这就是为什么明明密码错了还会创建session的原因\",\"blogGoods\":1,\"blogId\":\"1333708609683533824\",\"blogImage\":\"http://808km.top/blog/img/default.jpg\",\"blogRead\":9,\"blogRemark\":\"shiro+redis整合实现session持久化登陆失败时也会生成session问题\",\"blogTitle\":\"shiro+redis整合实现session持久化登陆失败时也会生成session问题\",\"blogType\":6,\"createdTime\":1606815886000,\"typeName\":\"Java\",\"updateTime\":1606848326000,\"version\":1},\"msg\":\"阅读成功\"}', '218.77.40.70', '2020-12-02 08:23:07', NULL);
INSERT INTO `bl_log` VALUES (2672, '查询时间轴', '/blog/getTimeLine', '[]', 1, NULL, 'GET', 330, '{\"code\":20000,\"data\":[{\"list\":[{\"blogId\":\"1333708609683533824\",\"blogMonth\":\"2020-12\",\"blogTitle\":\"shiro+redis整合实现session持久化登陆失败时也会生成session问题\",\"createdTime\":1606815886000}],\"month\":\"2020-12\"},{\"list\":[{\"blogId\":\"1333411378995605504\",\"blogMonth\":\"2020-11\",\"blogTitle\":\"nacos集群环境搭建\",\"createdTime\":1606745021000},{\"blogId\":\"1332742588649615360\",\"blogMonth\":\"2020-11\",\"blogTitle\":\"vue项目引入markdown\",\"createdTime\":1606585569000},{\"blogId\":\"1331436834413211648\",\"blogMonth\":\"2020-11\",\"blogTitle\":\"springboot 后端传给前端相差8小时\",\"createdTime\":1606274253000}],\"month\":\"2020-11\"},{\"list\":[{\"blogId\":\"1322169187161767936\",\"blogMonth\":\"2020-10\",\"blogTitle\":\"Dubbo超时问题\",\"createdTime\":1604064673000}],\"month\":\"2020-10\"},{\"list\":[{\"blogId\":\"1311375132718956544\",\"blogMonth\":\"2020-09\",\"blogTitle\":\"docker中使用fastdfs问题\",\"createdTime\":1601462370000},{\"blogId\":\"1305852969815642112\",\"blogMonth\":\"2020-09\",\"blogTitle\":\"dubbo-admin登录问题\",\"createdTime\":1600174584000}],\"month\":\"2020-09\"},{\"list\":[{\"blogId\":\"1294647161643978752\",\"blogMonth\":\"2020-08\",\"blogTitle\":\"shiroFilter踩坑\",\"createdTime\":1597474112000},{\"blogId\":\"1293808631053139968\",\"blogMonth\":\"2020-08\",\"blogTitle\":\"docker 安装 mysql5.7\",\"createdTime\":1597274190000}],\"month\":\"2020-08\"},{\"list\":[{\"blogId\":\"1293850784802377728\",\"blogMonth\":\"2020-07\",\"blogTitle\":\"mybatis <if>标签踩坑\",\"createdTime\":1594605840000}],\"month\":\"2020-07\"}],\"msg\":\"操作成功！\"}', '127.0.0.1', '2020-12-02 09:48:42', NULL);
INSERT INTO `bl_log` VALUES (2673, '查询时间轴', '/blog/getTimeLine', '[]', 1, NULL, 'GET', 90, '{\"code\":20000,\"data\":[{\"list\":[{\"blogId\":\"1333708609683533824\",\"blogMonth\":\"2020-12\",\"blogTitle\":\"shiro+redis整合实现session持久化登陆失败时也会生成session问题\",\"createdTime\":1606815886000}],\"month\":\"2020-12\"},{\"list\":[{\"blogId\":\"1333411378995605504\",\"blogMonth\":\"2020-11\",\"blogTitle\":\"nacos集群环境搭建\",\"createdTime\":1606745021000},{\"blogId\":\"1332742588649615360\",\"blogMonth\":\"2020-11\",\"blogTitle\":\"vue项目引入markdown\",\"createdTime\":1606585569000},{\"blogId\":\"1331436834413211648\",\"blogMonth\":\"2020-11\",\"blogTitle\":\"springboot 后端传给前端相差8小时\",\"createdTime\":1606274253000}],\"month\":\"2020-11\"},{\"list\":[{\"blogId\":\"1322169187161767936\",\"blogMonth\":\"2020-10\",\"blogTitle\":\"Dubbo超时问题\",\"createdTime\":1604064673000}],\"month\":\"2020-10\"},{\"list\":[{\"blogId\":\"1311375132718956544\",\"blogMonth\":\"2020-09\",\"blogTitle\":\"docker中使用fastdfs问题\",\"createdTime\":1601462370000},{\"blogId\":\"1305852969815642112\",\"blogMonth\":\"2020-09\",\"blogTitle\":\"dubbo-admin登录问题\",\"createdTime\":1600174584000}],\"month\":\"2020-09\"},{\"list\":[{\"blogId\":\"1294647161643978752\",\"blogMonth\":\"2020-08\",\"blogTitle\":\"shiroFilter踩坑\",\"createdTime\":1597474112000},{\"blogId\":\"1293808631053139968\",\"blogMonth\":\"2020-08\",\"blogTitle\":\"docker 安装 mysql5.7\",\"createdTime\":1597274190000}],\"month\":\"2020-08\"},{\"list\":[{\"blogId\":\"1293850784802377728\",\"blogMonth\":\"2020-07\",\"blogTitle\":\"mybatis <if>标签踩坑\",\"createdTime\":1594605840000}],\"month\":\"2020-07\"}],\"msg\":\"操作成功！\"}', '127.0.0.1', '2020-12-02 09:48:43', NULL);
INSERT INTO `bl_log` VALUES (2674, '阅读关于我的', '/about/read', '[]', 1, NULL, 'PUT', 328, '{\"code\":20000,\"data\":{\"aboutContent\":\"# 前言\\n我是一名即将大三的在校大学生，自主学习的过程中跟随讲师开发了该个人博客&ldquo;闲言博客&rdquo;，这个博客功能简单，但是为我巩固了不少的技术知识，该网站为前后端分离项目，后端:_**springboot+mybatis**_ 前端-前台：_**vue+ and design**_前端-后台: _**vue+ element-ui**_ 开发该项目花了我大概10来天时间，前台页面代码是我copy的讲师提供的静态页面（原谅我写的css自己都看不下去），后续想追加个_**redis**_写个缓存，以及加一个_**ElasticSearch**_搜索引擎，加油吧！\\n\\n## 该博客使用到的技术栈：\\nSpringBoot，Mybatis，Shiro，Maven，Vue，ElementUI，AntDesignVue，Flex布局，Linux，Nginx，Docker，FastDFS，MongoDB，SpringDataMongoDB\\n该博客由我在腾讯课堂购买课程学习开发，网址：\\n\\n[课程地址](https://ke.qq.com/course/1129309)\\n\\n-------------------------------------------------------------------------\\n\\n目前我正在修改该博客的小bug并且在集成更多的新功能，我希望能够使用这个博客项目去巩固我学习的新知识，也希望能有更多的人看到我写的这个项目。\\n\\n## 目前需要改进的地方：\\n\\n1.  使用elasticSearch 进行博客的检索\\n2.  将首页的主图片修改为轮播图\\n3.  ~~注册时上传头像~~\\n4.  ~~将富文本编辑器改为Markdown编辑器~~\\n5.  ~~更新记录日志的方式~~\\n6.  ~~首页url的问题~~\\n7.  ~~数据库时间问题~~\\n8.  ~~前台md5加密改为后台加密后再匹配~~\\n9.  ~~推荐博客下的时间~~\\n10.  ~~登录注册页面的背景图片~~\\n11.  ~~登录注册页面的卡片问题~~\\n12. 后台中写博客路由问题\\n13. 后端登录中管理员和用户混淆不清关系\\n14. ~~阅读博客时会更新version(乐观锁)这可能会导致在别人观看博客的时候导致博主无法更新博客影响博主体验~~\\n15. 在进入下一个路由之后回到顶部\\n16. 将分页功能改为加载更多\\n\\n暂时还需要学习一点其他的之后，等有时间的时候再来继续完善该博客。\\n## 更新记录\\n- 2020-11-17 09:25 add:如果添加博客不上传封面将会设置一个默认封面图片\\n\\n- 2020-11-18 21:48 update:将原本前端md5加密后再跟后端匹配改为后端进行加密后再匹配\\n\\n- 2020-11-19 22:15 fix:将页面url后面会添加publicPath问题解决\\n\\n- 2020-11-24 11:25 update:将前端静态资源使用cdn加速、日志原记录为controller层的所有方法切入改为Log注解处切入\\n\\n- 2020-11-24 21:51 fix:修复推荐博客下的时间bug\\n- 2020-11-24 21:51 add:注册时添加上传头像功能\\n\\n- 2020-11-25 11:46 fix:修复数据库时间问题，具体问题已发博客，[点我查看](http://oopsw.top:1001/info/1331436834413211648)\\n\\n- 2020-11-27 23:47 fix:登录注册页面卡片超出页面没有显示滚动条、背景图片在页面放大时会出现多个背景图片\\n\\n- 2020-11-29 00:51  update:将前后台的所有富文本编辑器更换为markdown编辑器，并用markdown的样式\\n- 2020-12-01 08:30        update:修改markdown代码块样式\\n- 2020-12-01 08:57        fix:手机访问登录注册页面时样式体验差\",\"aboutId\":\"5\",\"aboutRead\":162,\"aboutTitle\":\"关于我的 关于“闲言”\",\"createdTime\":1597816791000,\"enable\":1,\"updateTime\":1606869612000,\"version\":206},\"msg\":\"阅读成功\"}', '127.0.0.1', '2020-12-02 09:48:44', NULL);
INSERT INTO `bl_log` VALUES (2675, '阅读博客', '//blog/read/1331436834413211648', '[1331436834413211648]', 1, NULL, 'PUT', 28, '{\"code\":20000,\"data\":{\"blogCollection\":0,\"blogComment\":0,\"blogContent\":\" 在开发中日期最常打交道的东西之一，但是日期又会存在各式各样的格式，常见的情形就是，从数据库取出的日期往往都是时间戳（毫秒数）的形式，这个一般情况下是前端不想要的结果，需要进行处理，那在springboot中比较简单：\\n因为后端传给前端时默认使用jackson转换格式所以我们可以\\n 1. 在application.yml中设置\\n```yml\\nspring:\\n  jackson:\\n    date-format: yyyy-MM-dd HH:mm:ss\\n    time-zone: GMT+8\\n```\\n 2. 在pojo对象上添加@JsonFormat注解\\n```java\\n    @JsonFormat(pattern = \\\"yyyy-MM-dd HH:mm:ss\\\", timezone = \\\"GMT+8\\\")\\n    private Date createdTime;\\n```\\n但是我在尝试了这两个方法以及相类似的方法，但是都无效，要么就是格式化无效，直接返回的时间戳，要么就是时间还是相差8个小时，但是格式化有效。\\n\\n这时我看到了另外一篇不一样的博客，随后明白了为什么我的配置没有用，原来是因为我添加拦截器时写的配置类的问题。\\n以下代码是我更改之前的配置类\\n```java\\npackage com.wsy.blog.config;\\n\\nimport com.fasterxml.jackson.databind.DeserializationFeature;\\nimport com.fasterxml.jackson.databind.ObjectMapper;\\nimport com.wsy.blog.interceptor.LoginInterceptor;\\nimport org.springframework.context.annotation.Bean;\\nimport org.springframework.context.annotation.Configuration;\\nimport org.springframework.http.converter.HttpMessageConverter;\\nimport org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;\\nimport org.springframework.web.servlet.config.annotation.InterceptorRegistry;\\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport;\\n\\nimport java.text.SimpleDateFormat;\\nimport java.util.List;\\n\\n/**\\n * @Author: wsy\\n * @Date: 2020/8/10 11:34\\n */\\n@Configuration\\npublic class InterceptorConfig extends WebMvcConfigurationSupport {\\n\\n    @Bean\\n    public LoginInterceptor getLoginInterceptor() {\\n        return new LoginInterceptor();\\n    }\\n\\n    /**\\n     * 添加拦截器\\n     * @param registry  拦截器注册\\n     */\\n    @Override\\n    protected void addInterceptors(InterceptorRegistry registry) {\\n        // TODO Auto-generated method stub\\n        registry.addInterceptor(getLoginInterceptor()).addPathPatterns(\\\"/**\\\")\\n                .excludePathPatterns(\\\"/*/login\\\");;\\n        super.addInterceptors(registry);\\n    }\\n}\\n```\\n\\n这里大家注意，看看自己的代码有没有因为添加拦截器而创建了一个配置类，该类继承了`WebMvcConfigurationSupport`，就是他！以前是用 `WebMvcConfigurerAdapter` ，springboot 2.0 建议使用 `WebMvcConfigurationSupport` 。但是在添加拦截器并继承 `WebMvcConfigurationSupport` 后会覆盖`@EnableAutoConfiguration`关于`WebMvcAutoConfiguration`的配置！从而导致所有的Date返回都变成时间戳！\\n可以采用另外一种方式，在你继承`WebMvcConfigurationSupport`的子类中添加日期转换的bean\\n以下是我更改后的代码\\n```java\\npackage com.wsy.blog.config;\\n\\nimport com.fasterxml.jackson.databind.DeserializationFeature;\\nimport com.fasterxml.jackson.databind.ObjectMapper;\\nimport com.wsy.blog.interceptor.LoginInterceptor;\\nimport org.springframework.context.annotation.Bean;\\nimport org.springframework.context.annotation.Configuration;\\nimport org.springframework.http.converter.HttpMessageConverter;\\nimport org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;\\nimport org.springframework.web.servlet.config.annotation.InterceptorRegistry;\\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport;\\n\\nimport java.text.SimpleDateFormat;\\nimport java.util.List;\\n\\n/**\\n * @Author: wsy\\n * @Date: 2020/8/10 11:34\\n */\\n@Configuration\\npublic class InterceptorConfig extends WebMvcConfigurationSupport {\\n\\n    @Bean\\n    public LoginInterceptor getLoginInterceptor() {\\n        return new LoginInterceptor();\\n    }\\n\\n    /**\\n     * 定义时间格式转换器\\n     * @return  MappingJackson2HttpMessageConverter\\n     */\\n    @Bean\\n    public MappingJackson2HttpMessageConverter jackson2HttpMessageConverter() {\\n        MappingJackson2HttpMessageConverter converter = new MappingJackson2HttpMessageConverter();\\n        ObjectMapper mapper = new ObjectMapper();\\n        mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\\n        mapper.setDateFormat(new SimpleDateFormat(\\\"yyyy-MM-dd HH:mm:ss\\\"));\\n        converter.setObjectMapper(mapper);\\n        return converter;\\n    }\\n\\n    /**\\n     * 添加转换器\\n     * @param converters    converters\\n     */\\n    @Override\\n    public void configureMessageConverters(List<HttpMessageConverter<?>> converters) {\\n        //将我们定义的时间格式转换器添加到转换器列表中,\\n        //这样jackson格式化时候但凡遇到Date类型就会转换成我们定义的格式\\n        converters.add(jackson2HttpMessageConverter());\\n    }\\n\\n    /**\\n     * 添加拦截器\\n     * @param registry  拦截器注册\\n     */\\n    @Override\\n    protected void addInterceptors(InterceptorRegistry registry) {\\n        // TODO Auto-generated method stub\\n        registry.addInterceptor(getLoginInterceptor()).addPathPatterns(\\\"/**\\\")\\n                .excludePathPatterns(\\\"/*/login\\\");;\\n        super.addInterceptors(registry);\\n    }\\n}\\n```\\n 感谢博主的分享经验   \\n参考博客：[https://blog.csdn.net/qq_34975710/article/details/84872489](https://blog.csdn.net/qq_34975710/article/details/84872489)\",\"blogGoods\":1,\"blogId\":\"1331436834413211648\",\"blogImage\":\"http://808km.top/blog/img/default.jpg\",\"blogRead\":38,\"blogTitle\":\"springboot 后端传给前端相差8小时\",\"blogType\":9,\"createdTime\":1606274253000,\"typeName\":\"Springboot\",\"updateTime\":1606869604000,\"version\":35},\"msg\":\"阅读成功\"}', '218.77.40.70', '2020-12-02 10:47:57', NULL);
INSERT INTO `bl_log` VALUES (2676, '阅读博客', '//blog/read/1331436834413211648', '[1331436834413211648]', 1, NULL, 'PUT', 93, '{\"code\":20000,\"data\":{\"blogCollection\":0,\"blogComment\":0,\"blogContent\":\" 在开发中日期最常打交道的东西之一，但是日期又会存在各式各样的格式，常见的情形就是，从数据库取出的日期往往都是时间戳（毫秒数）的形式，这个一般情况下是前端不想要的结果，需要进行处理，那在springboot中比较简单：\\n因为后端传给前端时默认使用jackson转换格式所以我们可以\\n 1. 在application.yml中设置\\n```yml\\nspring:\\n  jackson:\\n    date-format: yyyy-MM-dd HH:mm:ss\\n    time-zone: GMT+8\\n```\\n 2. 在pojo对象上添加@JsonFormat注解\\n```java\\n    @JsonFormat(pattern = \\\"yyyy-MM-dd HH:mm:ss\\\", timezone = \\\"GMT+8\\\")\\n    private Date createdTime;\\n```\\n但是我在尝试了这两个方法以及相类似的方法，但是都无效，要么就是格式化无效，直接返回的时间戳，要么就是时间还是相差8个小时，但是格式化有效。\\n\\n这时我看到了另外一篇不一样的博客，随后明白了为什么我的配置没有用，原来是因为我添加拦截器时写的配置类的问题。\\n以下代码是我更改之前的配置类\\n```java\\npackage com.wsy.blog.config;\\n\\nimport com.fasterxml.jackson.databind.DeserializationFeature;\\nimport com.fasterxml.jackson.databind.ObjectMapper;\\nimport com.wsy.blog.interceptor.LoginInterceptor;\\nimport org.springframework.context.annotation.Bean;\\nimport org.springframework.context.annotation.Configuration;\\nimport org.springframework.http.converter.HttpMessageConverter;\\nimport org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;\\nimport org.springframework.web.servlet.config.annotation.InterceptorRegistry;\\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport;\\n\\nimport java.text.SimpleDateFormat;\\nimport java.util.List;\\n\\n/**\\n * @Author: wsy\\n * @Date: 2020/8/10 11:34\\n */\\n@Configuration\\npublic class InterceptorConfig extends WebMvcConfigurationSupport {\\n\\n    @Bean\\n    public LoginInterceptor getLoginInterceptor() {\\n        return new LoginInterceptor();\\n    }\\n\\n    /**\\n     * 添加拦截器\\n     * @param registry  拦截器注册\\n     */\\n    @Override\\n    protected void addInterceptors(InterceptorRegistry registry) {\\n        // TODO Auto-generated method stub\\n        registry.addInterceptor(getLoginInterceptor()).addPathPatterns(\\\"/**\\\")\\n                .excludePathPatterns(\\\"/*/login\\\");;\\n        super.addInterceptors(registry);\\n    }\\n}\\n```\\n\\n这里大家注意，看看自己的代码有没有因为添加拦截器而创建了一个配置类，该类继承了`WebMvcConfigurationSupport`，就是他！以前是用 `WebMvcConfigurerAdapter` ，springboot 2.0 建议使用 `WebMvcConfigurationSupport` 。但是在添加拦截器并继承 `WebMvcConfigurationSupport` 后会覆盖`@EnableAutoConfiguration`关于`WebMvcAutoConfiguration`的配置！从而导致所有的Date返回都变成时间戳！\\n可以采用另外一种方式，在你继承`WebMvcConfigurationSupport`的子类中添加日期转换的bean\\n以下是我更改后的代码\\n```java\\npackage com.wsy.blog.config;\\n\\nimport com.fasterxml.jackson.databind.DeserializationFeature;\\nimport com.fasterxml.jackson.databind.ObjectMapper;\\nimport com.wsy.blog.interceptor.LoginInterceptor;\\nimport org.springframework.context.annotation.Bean;\\nimport org.springframework.context.annotation.Configuration;\\nimport org.springframework.http.converter.HttpMessageConverter;\\nimport org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;\\nimport org.springframework.web.servlet.config.annotation.InterceptorRegistry;\\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport;\\n\\nimport java.text.SimpleDateFormat;\\nimport java.util.List;\\n\\n/**\\n * @Author: wsy\\n * @Date: 2020/8/10 11:34\\n */\\n@Configuration\\npublic class InterceptorConfig extends WebMvcConfigurationSupport {\\n\\n    @Bean\\n    public LoginInterceptor getLoginInterceptor() {\\n        return new LoginInterceptor();\\n    }\\n\\n    /**\\n     * 定义时间格式转换器\\n     * @return  MappingJackson2HttpMessageConverter\\n     */\\n    @Bean\\n    public MappingJackson2HttpMessageConverter jackson2HttpMessageConverter() {\\n        MappingJackson2HttpMessageConverter converter = new MappingJackson2HttpMessageConverter();\\n        ObjectMapper mapper = new ObjectMapper();\\n        mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\\n        mapper.setDateFormat(new SimpleDateFormat(\\\"yyyy-MM-dd HH:mm:ss\\\"));\\n        converter.setObjectMapper(mapper);\\n        return converter;\\n    }\\n\\n    /**\\n     * 添加转换器\\n     * @param converters    converters\\n     */\\n    @Override\\n    public void configureMessageConverters(List<HttpMessageConverter<?>> converters) {\\n        //将我们定义的时间格式转换器添加到转换器列表中,\\n        //这样jackson格式化时候但凡遇到Date类型就会转换成我们定义的格式\\n        converters.add(jackson2HttpMessageConverter());\\n    }\\n\\n    /**\\n     * 添加拦截器\\n     * @param registry  拦截器注册\\n     */\\n    @Override\\n    protected void addInterceptors(InterceptorRegistry registry) {\\n        // TODO Auto-generated method stub\\n        registry.addInterceptor(getLoginInterceptor()).addPathPatterns(\\\"/**\\\")\\n                .excludePathPatterns(\\\"/*/login\\\");;\\n        super.addInterceptors(registry);\\n    }\\n}\\n```\\n 感谢博主的分享经验   \\n参考博客：[https://blog.csdn.net/qq_34975710/article/details/84872489](https://blog.csdn.net/qq_34975710/article/details/84872489)\",\"blogGoods\":1,\"blogId\":\"1331436834413211648\",\"blogImage\":\"http://808km.top/blog/img/default.jpg\",\"blogRead\":39,\"blogTitle\":\"springboot 后端传给前端相差8小时\",\"blogType\":9,\"createdTime\":1606274253000,\"typeName\":\"Springboot\",\"updateTime\":1606877276000,\"version\":35},\"msg\":\"阅读成功\"}', '112.66.206.93', '2020-12-02 15:58:11', NULL);
INSERT INTO `bl_log` VALUES (2677, '阅读博客', '//blog/read/1333411378995605504', '[1333411378995605504]', 1, NULL, 'PUT', 22, '{\"code\":20000,\"data\":{\"blogCollection\":0,\"blogComment\":0,\"blogContent\":\"## 预备环境准备\\n\\nNacos 依赖 [Java](https://docs.oracle.com/cd/E19182-01/820-7851/inst_cli_jdk_javahome_t/) 环境来运行。如果您是从代码开始构建并运行Nacos，还需要为此配置 [Maven](https://maven.apache.org/index.html)环境，请确保是在以下版本环境中安装使用:\\n\\n1. 64 bit OS，支持 Linux/Unix/Mac/Windows，推荐选用 Linux/Unix/Mac。\\n2. 64 bit JDK 1.8+；[下载](http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html) & [配置](https://docs.oracle.com/cd/E19182-01/820-7851/inst_cli_jdk_javahome_t/)。\\n3. Maven 3.2.x+；[下载](https://maven.apache.org/download.cgi) & [配置](https://maven.apache.org/settings.html)。\\n\\n## 下载nacos安装包\\n\\nhttps://github.com/alibaba/nacos/releases/tag/1.4.0\\n\\n>  ![在这里插入图片描述](https://img-blog.csdnimg.cn/20201130205557917.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ0ODU5OA==,size_16,color_FFFFFF,t_70)\\n\\n\\nlinux选择第一个\\n\\nwindows选择第二个\\n\\n\\n\\n## 搭建环境\\n\\n### 集群模式部署\\n\\n这个快速开始手册是帮忙您快速在你的电脑上，下载安装并使用Nacos，部署生产使用的集群模式。\\n\\n### 集群部署架构图\\n\\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201130205609797.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ0ODU5OA==,size_16,color_FFFFFF,t_70)\\n\\n\\nVIP:虚拟ip\\n\\n因此开源的时候推荐用户把所有服务列表放到一个vip下面，然后挂到一个域名下面\\n\\nhttp://ip1:port/openAPI 直连ip模式，机器挂则需要修改ip才可以使用。\\n\\nhttp://VIP:port/openAPI 挂载VIP模式，直连vip即可，下面挂server真实ip，可读性不好。\\n\\nhttp://nacos.com:port/openAPI 域名 + VIP模式，可读性好，而且换ip方便，推荐模式\\n\\n### 创建目录\\n\\n该目录存放nacos集群\\n\\n```sh\\nmkdir /usr/local/nacos\\n```\\n\\n### 上传nacos\\n\\n> ![在这里插入图片描述](https://img-blog.csdnimg.cn/20201130205630233.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ0ODU5OA==,size_16,color_FFFFFF,t_70)\\n\\n### 解压nacos\\n\\n```sh\\ntar -zxvf nacos-server-1.4.0.tar.gz\\n```\\n\\n### 创建nacos持久化数据库\\n\\n首先使用navicat连接mysql数据库，然后创建数据库\\n\\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201130205643439.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ0ODU5OA==,size_16,color_FFFFFF,t_70)\\n\\n\\n新建查询后导入SQL脚本即可\\n\\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201130205705669.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ0ODU5OA==,size_16,color_FFFFFF,t_70)\\n\\n红色框选那栏填写你的SQL脚本位置，SQL脚本在nacos文件夹下的conf下\\n\\n### nacos文件夹改名\\n\\n将文件夹名改为nacos3333代表这个nacos的端口号是3333\\n\\n```sh\\nmv nacos nacos3333\\n```\\n\\n### 配置修改\\n\\n首先进入到配置目录\\n\\n```sh\\ncd /usr/local/nacos/nacos3333/conf\\n```\\n\\n>![在这里插入图片描述](https://img-blog.csdnimg.cn/2020113020572431.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ0ODU5OA==,size_16,color_FFFFFF,t_70)\\n\\n\\n在更改配置之前先备份配置\\n\\n\\n\\n```sh\\ncp application.properties application.properties.example\\n```\\n\\n```sh\\ncp cluster.conf.example cluster.conf\\n```\\n\\n### 集群配置\\n\\n```sh\\nvim cluster.conf\\n```\\n\\n>![在这里插入图片描述](https://img-blog.csdnimg.cn/20201130205739435.png)\\n\\n>\\n> 注意这里不能填写localhost 或者127.0.0.1，这里如果是在本机搭建可以查看本机ip后填写\\n>\\n> ```sh\\n> hostname -i\\n> ```\\n>\\n>![在这里插入图片描述](https://img-blog.csdnimg.cn/20201130205749116.png)\\n\\n\\n### nacos配置\\n\\n```sh\\nvim application.properties\\n```\\n\\n```properties\\n\\n#*************** Spring Boot Related Configurations ***************#\\n### Default web context path:\\nserver.servlet.contextPath=/nacos\\n### Default web server port:\\nserver.port=3333\\n\\n#*************** Network Related Configurations ***************#\\n### If prefer hostname over ip for Nacos server addresses in cluster.conf:\\n# nacos.inetutils.prefer-hostname-over-ip=false\\n\\n### Specify local server\'s IP:\\n# nacos.inetutils.ip-address=\\n\\n\\n#*************** Config Module Related Configurations ***************#\\n### If use MySQL as datasource:\\nspring.datasource.platform=mysql\\n\\n### Count of DB:\\ndb.num=1\\n\\n### Connect URL of DB:\\ndb.url.0=jdbc:mysql://127.0.0.1:3306/nacos_config?characterEncoding=utf8&connectTimeout=1000&socketTimeout=3000&autoReconnect=true&useUnicode=true&useSSL=false&serverTimezone=UTC\\ndb.user=root\\ndb.password=wsy112233\\n\\n\\n#*************** Naming Module Related Configurations ***************#\\n### Data dispatch task execution period in milliseconds:\\n# nacos.naming.distro.taskDispatchPeriod=200\\n\\n### Data count of batch sync task:\\n# nacos.naming.distro.batchSyncKeyCount=1000\\n\\n### Retry delay in milliseconds if sync task failed:\\n# nacos.naming.distro.syncRetryDelay=5000\\n\\n### If enable data warmup. If set to false, the server would accept request without local data preparation:\\n# nacos.naming.data.warmup=true\\n\\n### If enable the instance auto expiration, kind like of health check of instance:\\n# nacos.naming.expireInstance=true\\n\\nnacos.naming.empty-service.auto-clean=true\\nnacos.naming.empty-service.clean.initial-delay-ms=50000\\nnacos.naming.empty-service.clean.period-time-ms=30000\\n\\n\\n#*************** CMDB Module Related Configurations ***************#\\n### The interval to dump external CMDB in seconds:\\n# nacos.cmdb.dumpTaskInterval=3600\\n\\n### The interval of polling data change event in seconds:\\n# nacos.cmdb.eventTaskInterval=10\\n\\n### The interval of loading labels in seconds:\\n# nacos.cmdb.labelTaskInterval=300\\n\\n### If turn on data loading task:\\n# nacos.cmdb.loadDataAtStart=false\\n\\n\\n#*************** Metrics Related Configurations ***************#\\n### Metrics for prometheus\\n#management.endpoints.web.exposure.include=*\\n\\n### Metrics for elastic search\\nmanagement.metrics.export.elastic.enabled=false\\n#management.metrics.export.elastic.host=http://localhost:9200\\n\\n### Metrics for influx\\nmanagement.metrics.export.influx.enabled=false\\n#management.metrics.export.influx.db=springboot\\n#management.metrics.export.influx.uri=http://localhost:8086\\n#management.metrics.export.influx.auto-create-db=true\\n#management.metrics.export.influx.consistency=one\\n#management.metrics.export.influx.compressed=true\\n\\n\\n#*************** Access Log Related Configurations ***************#\\n### If turn on the access log:\\nserver.tomcat.accesslog.enabled=true\\n\\n### The access log pattern:\\nserver.tomcat.accesslog.pattern=%h %l %u %t \\\"%r\\\" %s %b %D %{User-Agent}i %{Request-Source}i\\n\\n### The directory of access log:\\nserver.tomcat.basedir=\\n\\n\\n#*************** Access Control Related Configurations ***************#\\n### If enable spring security, this option is deprecated in 1.2.0:\\n#spring.security.enabled=false\\n\\n### The ignore urls of auth, is deprecated in 1.2.0:\\nnacos.security.ignore.urls=/,/error,/**/*.css,/**/*.js,/**/*.html,/**/*.map,/**/*.svg,/**/*.png,/**/*.ico,/console-fe/public/**,/v1/auth/**,/v1/console/health/**,/actuator/**,/v1/console/server/**\\n\\n### The auth system to use, currently only \'nacos\' is supported:\\nnacos.core.auth.system.type=nacos\\n\\n### If turn on auth system:\\nnacos.core.auth.enabled=false\\n\\n### The token expiration in seconds:\\nnacos.core.auth.default.token.expire.seconds=18000\\n\\n### The default token:\\nnacos.core.auth.default.token.secret.key=SecretKey012345678901234567890123456789012345678901234567890123456789\\n\\n### Turn on/off caching of auth information. By turning on this switch, the update of auth information would have a 15 seconds delay.\\nnacos.core.auth.caching.enabled=true\\n\\n\\n#*************** Istio Related Configurations ***************#\\n### If turn on the MCP server:\\nnacos.istio.mcp.server.enabled=false\\n\\n\\n\\n###*************** Add from 1.3.0 ***************###\\n\\n\\n#*************** Core Related Configurations ***************#\\n\\n### set the WorkerID manually\\n# nacos.core.snowflake.worker-id=\\n\\n### Member-MetaData\\n# nacos.core.member.meta.site=\\n# nacos.core.member.meta.adweight=\\n# nacos.core.member.meta.weight=\\n\\n### MemberLookup\\n### Addressing pattern category, If set, the priority is highest\\n# nacos.core.member.lookup.type=[file,address-server]\\n## Set the cluster list with a configuration file or command-line argument\\n# nacos.member.list=192.168.16.101:8847?raft_port=8807,192.168.16.101?raft_port=8808,192.168.16.101:8849?raft_port=8809\\n## for AddressServerMemberLookup\\n# Maximum number of retries to query the address server upon initialization\\n# nacos.core.address-server.retry=5\\n## Server domain name address of [address-server] mode\\n# address.server.domain=jmenv.tbsite.net\\n## Server port of [address-server] mode\\n# address.server.port=8080\\n## Request address of [address-server] mode\\n# address.server.url=/nacos/serverlist\\n\\n#*************** JRaft Related Configurations ***************#\\n\\n### Sets the Raft cluster election timeout, default value is 5 second\\n# nacos.core.protocol.raft.data.election_timeout_ms=5000\\n### Sets the amount of time the Raft snapshot will execute periodically, default is 30 minute\\n# nacos.core.protocol.raft.data.snapshot_interval_secs=30\\n### raft internal worker threads\\n# nacos.core.protocol.raft.data.core_thread_num=8\\n### Number of threads required for raft business request processing\\n# nacos.core.protocol.raft.data.cli_service_thread_num=4\\n### raft linear read strategy. Safe linear reads are used by default, that is, the Leader tenure is confirmed by heartbeat\\n# nacos.core.protocol.raft.data.read_index_type=ReadOnlySafe\\n### rpc request timeout, default 5 seconds\\n# nacos.core.protocol.raft.data.rpc_request_timeout_ms=5000\\n\\n```\\n\\n这是我的整个application.properties文件,其中主要修改的地方有两处\\n\\n修改端口号\\n\\n```properties\\n### Default web server port:\\nserver.port=3333\\n```\\n\\n修改数据库为mysql并配置mysql的url\\n\\n```properties\\n#*************** Config Module Related Configurations ***************#\\n### If use MySQL as datasource:\\n spring.datasource.platform=mysql\\n\\n### Count of DB:\\n db.num=1\\n\\n### Connect URL of DB:\\ndb.url.0=jdbc:mysql://127.0.0.1:3306/nacos_config?characterEncoding=utf8&connectTimeout=1000&socketTimeout=3000&autoReconnect=true&useUnicode=true&useSSL=false&serverTimezone=UTC\\ndb.user=root\\ndb.password=wsy112233\\n```\\n\\n这时候配置就差不多啦可以开始启动服务了\\n\\n```sh\\n# 进入到nacos3333的bin目录\\ncd /usr/local/nacos/nacos3333/bin\\n# 执行启动脚本 因为nacos启动脚本默认就是使用集群模式所以不用更改\\n./startup.sh\\n```\\n\\n这时候我们可以查看nacos的启动状态\\n\\n```sh\\nps -ef | grep nacos\\n```\\n\\n> ![在这里插入图片描述](https://img-blog.csdnimg.cn/20201130205818481.png)\\n\\n\\n这时候我们应该就可以通过 服务器ip:3333/nacos访问到nacos\\n\\n> ![在这里插入图片描述](https://img-blog.csdnimg.cn/20201130205828641.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ0ODU5OA==,size_16,color_FFFFFF,t_70)\\n\\n\\n成功的访问到了nacos代表成功了。\\n\\n### nacos集群启动\\n\\n这时候我们就可以回到nacos目录下拷贝之前的nacos3333文件夹来启动nacos4444和nacos5555\\n\\n```sh\\ncd /usr/local/nacos\\n# cp -r 代表递归拷贝\\ncp -r nacos3333 nacos4444\\ncp -r nacos3333 nacos5555\\n```\\n\\n这时候再分别将nacos4444和nacos5555文件夹下的conf目录中的application.properties中的server.port更改为3333、4444然后再启动，这里我就不再演示了，和之前配置一样。\\n\\n随后我们再依次启动nacos4444，nacos5555\\n\\n###########################################################################\\n\\n启动后发现问题，nacos5555启动不起来，查看日志得到发现内存不足，nacos脚本默认给的最大内存是2G，我们可以去改小一点。\\n\\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201130205845619.png)\\n\\n原红框中限制的内存是2g 最小1g 适当该小一点[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传\\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201130205903628.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ0ODU5OA==,size_16,color_FFFFFF,t_70)\\n\\n\\n然后再依次启动三个服务\\n\\n登录任意一个nacos可以看到如下页面即集群启动成功\\n\\n### nginx配置\\n\\n这配置nginx负载均衡访问nacos\\n\\n```sh\\ncd /usr/local/nginx/conf\\nvim nginx.conf\\n```\\n\\n```conf\\n#user  nobody;\\nworker_processes  1;\\n\\n#error_log  logs/error.log;\\n#error_log  logs/error.log  notice;\\n#error_log  logs/error.log  info;\\n\\n#pid        logs/nginx.pid;\\n\\n\\nevents {\\n    worker_connections  1024;\\n}\\n\\n\\nhttp {\\n    include       mime.types;\\n    default_type  application/octet-stream;\\n\\n    #log_format  main  \'$remote_addr - $remote_user [$time_local] \\\"$request\\\" \'\\n    #                  \'$status $body_bytes_sent \\\"$http_referer\\\" \'\\n    #                  \'\\\"$http_user_agent\\\" \\\"$http_x_forwarded_for\\\"\';\\n\\n    #access_log  logs/access.log  main;\\n\\n    sendfile        on;\\n    #tcp_nopush     on;\\n\\n    #keepalive_timeout  0;\\n    keepalive_timeout  65;\\n\\n    #gzip  on;\\n\\n    #配置刚刚搭建好的nacos集群\\n    upstream cluster{                                                        \\n\\t    server 127.0.0.1:3333;\\n\\t    server 127.0.0.1:4444;\\n\\t    server 127.0.0.1:5555;\\n\\t}\\n\\n    server {\\n        listen       1111;\\n        server_name  nacos_cluster;\\n\\n        #charset koi8-r;\\n\\n        #access_log  logs/host.access.log  main;\\n\\n        location / {\\n            #root   html;\\n            #index  index.html index.htm;\\n            #将所有访问/的都映射到配置好的集群\\n            proxy_pass http://cluster;\\n        }\\n\\n        #error_page  404              /404.html;\\n\\n        # redirect server error pages to the static page /50x.html\\n        #\\n        error_page   500 502 503 504  /50x.html;\\n        location = /50x.html {\\n            root   html;\\n        }\\n\\n        # proxy the PHP scripts to Apache listening on 127.0.0.1:80\\n        #\\n        #location ~ \\\\.php$ {\\n        #    proxy_pass   http://127.0.0.1;\\n        #}\\n\\n        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000\\n        #\\n        #location ~ \\\\.php$ {\\n        #    root           html;\\n        #    fastcgi_pass   127.0.0.1:9000;\\n        #    fastcgi_index  index.php;\\n        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;\\n        #    include        fastcgi_params;\\n        #}\\n\\n        # deny access to .htaccess files, if Apache\'s document root\\n        # concurs with nginx\'s one\\n        #\\n        #location ~ /\\\\.ht {\\n        #    deny  all;\\n        #}\\n    }\\n\\n\\n    # another virtual host using mix of IP-, name-, and port-based configuration\\n    #\\n    #server {\\n    #    listen       8000;\\n    #    listen       somename:8080;\\n    #    server_name  somename  alias  another.alias;\\n\\n    #    location / {\\n    #        root   html;\\n    #        index  index.html index.htm;\\n    #    }\\n    #}\\n\\n\\n    # HTTPS server\\n    #\\n    #server {\\n    #    listen       443 ssl;\\n    #    server_name  localhost;\\n\\n    #    ssl_certificate      cert.pem;\\n    #    ssl_certificate_key  cert.key;\\n\\n    #    ssl_session_cache    shared:SSL:1m;\\n    #    ssl_session_timeout  5m;\\n\\n    #    ssl_ciphers  HIGH:!aNULL:!MD5;\\n    #    ssl_prefer_server_ciphers  on;\\n\\n    #    location / {\\n    #        root   html;\\n    #        index  index.html index.htm;\\n    #    }\\n    #}\\n}\\n```\\n\\n### nginx启动\\n\\n```sh\\ncd /usr/local/nginx/sbin\\n./nginx\\n```\\n\\n这时候我们就可以通过服务器ip地址:1111/nacos 来访问nacos集群了\\n\\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201130205927229.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ0ODU5OA==,size_16,color_FFFFFF,t_70)\\n\\n\\n关于使用NACOS集群遇到问题 -- CODE:503 MSG: SERVER IS STARTING NOW, PLEASE TRY AGAIN LATER!\\n\\n这时又出现了问题……在服务提供者注册服务时会报错\\n\\n```text\\n2020-11-30 00:36:59.492 ERROR 13140 --- [  restartedMain] c.a.c.n.registry.NacosServiceRegistry    : nacos registry, nacos-payment-provider register failed...NacosRegistration{nacosDiscoveryProperties=NacosDiscoveryProperties{serverAddr=\'wsy.oopsw.top:1111\', endpoint=\'\', namespace=\'\', watchDelay=30000, logName=\'\', service=\'nacos-payment-provider\', weight=1.0, clusterName=\'DEFAULT\', namingLoadCacheAtStart=\'false\', metadata={preserved.register.source=SPRING_CLOUD}, registerEnabled=true, ip=\'10.175.6.100\', networkInterface=\'\', port=9002, secure=false, accessKey=\'\', secretKey=\'\'}},\\n\\njava.lang.IllegalStateException: failed to req API:/nacos/v1/ns/instance after all servers([wsy.oopsw.top:1111]) tried: failed to req API:wsy.oopsw.top:1111/nacos/v1/ns/instance. code:503 msg: server is DOWN now, please try again later!\\n\\tat com.alibaba.nacos.client.naming.net.NamingProxy.reqAPI(NamingProxy.java:464) ~[nacos-client-1.1.1.jar:na]\\n\\tat com.alibaba.nacos.client.naming.net.NamingProxy.reqAPI(NamingProxy.java:386) ~[nacos-client-1.1.1.jar:na]\\n\\tat com.alibaba.nacos.client.naming.net.NamingProxy.registerService(NamingProxy.java:188) ~[nacos-client-1.1.1.jar:na]\\n\\tat com.alibaba.nacos.client.naming.NacosNamingService.registerInstance(NacosNamingService.java:205) ~[nacos-client-1.1.1.jar:na]\\n\\tat com.alibaba.nacos.client.naming.NacosNamingService.registerInstance(NacosNamingService.java:184) ~[nacos-client-1.1.1.jar:na]\\n\\tat com.alibaba.cloud.nacos.registry.NacosServiceRegistry.register(NacosServiceRegistry.java:61) ~[spring-cloud-alibaba-nacos-discovery-2.1.0.RELEASE.jar:2.1.0.RELEASE]\\n\\tat org.springframework.cloud.client.serviceregistry.AbstractAutoServiceRegistration.register(AbstractAutoServiceRegistration.java:239) [spring-cloud-commons-2.2.1.RELEASE.jar:2.2.1.RELEASE]\\n\\tat com.alibaba.cloud.nacos.registry.NacosAutoServiceRegistration.register(NacosAutoServiceRegistration.java:74) [spring-cloud-alibaba-nacos-discovery-2.1.0.RELEASE.jar:2.1.0.RELEASE]\\n\\tat org.springframework.cloud.client.serviceregistry.AbstractAutoServiceRegistration.start(AbstractAutoServiceRegistration.java:138) [spring-cloud-commons-2.2.1.RELEASE.jar:2.2.1.RELEASE]\\n\\tat org.springframework.cloud.client.serviceregistry.AbstractAutoServiceRegistration.bind(AbstractAutoServiceRegistration.java:101) [spring-cloud-commons-2.2.1.RELEASE.jar:2.2.1.RELEASE]\\n\\tat org.springframework.cloud.client.serviceregistry.AbstractAutoServiceRegistration.onApplicationEvent(AbstractAutoServiceRegistration.java:88) [spring-cloud-commons-2.2.1.RELEASE.jar:2.2.1.RELEASE]\\n\\tat org.springframework.cloud.client.serviceregistry.AbstractAutoServiceRegistration.onApplicationEvent(AbstractAutoServiceRegistration.java:47) [spring-cloud-commons-2.2.1.RELEASE.jar:2.2.1.RELEASE]\\n\\tat org.springframework.context.event.SimpleApplicationEventMulticaster.doInvokeListener(SimpleApplicationEventMulticaster.java:172) [spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]\\n\\tat org.springframework.context.event.SimpleApplicationEventMulticaster.invokeListener(SimpleApplicationEventMulticaster.java:165) [spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]\\n\\tat org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:139) [spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]\\n\\tat org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:403) [spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]\\n\\tat org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:360) [spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]\\n\\tat org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.finishRefresh(ServletWebServerApplicationContext.java:165) [spring-boot-2.2.2.RELEASE.jar:2.2.2.RELEASE]\\n\\tat org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:553) [spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]\\n\\tat org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:141) [spring-boot-2.2.2.RELEASE.jar:2.2.2.RELEASE]\\n\\tat org.springframework.boot.SpringApplication.refresh(SpringApplication.java:747) [spring-boot-2.2.2.RELEASE.jar:2.2.2.RELEASE]\\n\\tat org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:397) [spring-boot-2.2.2.RELEASE.jar:2.2.2.RELEASE]\\n\\tat org.springframework.boot.SpringApplication.run(SpringApplication.java:315) [spring-boot-2.2.2.RELEASE.jar:2.2.2.RELEASE]\\n\\tat org.springframework.boot.SpringApplication.run(SpringApplication.java:1226) [spring-boot-2.2.2.RELEASE.jar:2.2.2.RELEASE]\\n\\tat org.springframework.boot.SpringApplication.run(SpringApplication.java:1215) [spring-boot-2.2.2.RELEASE.jar:2.2.2.RELEASE]\\n\\tat com.wsy.springcloud.AlibabaProviderApplication.main(AlibabaProviderApplication.java:15) [classes/:na]\\n\\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_73]\\n\\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_73]\\n\\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_73]\\n\\tat java.lang.reflect.Method.invoke(Method.java:497) ~[na:1.8.0_73]\\n\\tat org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49) [spring-boot-devtools-2.2.2.RELEASE.jar:2.2.2.RELEASE]\\n```\\n\\n像阿里云、腾讯云这种云服务器, 会提供一个外网ip和内网ip, 访问外网ip时会指向对应的内网ip来访问到该服务器, 由于nacos集群内部是指定的使用网卡ip地址来进行通信,但是由于三台服务器各自的内网ip不在同一网段, 所以造成无法通信, 也会造成以下问题\\n\\n注册服务:\\n\\n```\\ncode:503 msg: server is STARTING now, please try again later!\\n```\\n\\nnaming-raft.log 日志:\\n\\n```\\n2019-05-15 00:02:00,000 WARN [IS LEADER] no leader is available now!\\n```\\n\\n这时只要修改启动参数, 设置本机ip地址就可以了\\n修改 nacos/bin/startup.sh 文件\\n找到 JVM Configuration 这部分, 在集群参数里增加 -Dnacos.server.ip=xx\\n\\n```sh\\n#===========================================================================================\\n# JVM Configuration\\n#===========================================================================================\\n\\n# 单机模式对应的启动参数\\nif [[ \\\"${MODE}\\\" == \\\"standalone\\\" ]]; then\\n    JAVA_OPT=\\\"${JAVA_OPT} -Xms512m -Xmx512m -Xmn256m\\\"\\n    JAVA_OPT=\\\"${JAVA_OPT} -Dnacos.standalone=true\\\"\\nelse\\n# 集群模式对应的启动参数\\n    JAVA_OPT=\\\"${JAVA_OPT} -server -Xms2g -Xmx2g -Xmn1g -XX:MetaspaceSize=128m -XX:MaxMetaspaceSize=320m\\\"\\n    JAVA_OPT=\\\"${JAVA_OPT} -XX:-OmitStackTraceInFastThrow -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=${BASE_DIR}/logs/java_heapdump.hprof\\\"\\n    JAVA_OPT=\\\"${JAVA_OPT} -XX:-UseLargePages\\\"\\n    \\n    # *新增以下参数设置本机ip地址*\\n    JAVA_OPT=\\\"${JAVA_OPT} -Dnacos.server.ip=本机ip\\\"\\n\\nfi\\n\\nif [[ \\\"${FUNCTION_MODE}\\\" == \\\"config\\\" ]]; then\\n    JAVA_OPT=\\\"${JAVA_OPT} -Dnacos.functionMode=config\\\"\\nelif [[ \\\"${FUNCTION_MODE}\\\" == \\\"naming\\\" ]]; then\\n    JAVA_OPT=\\\"${JAVA_OPT} -Dnacos.functionMode=naming\\\"\\nfi\\n\\n```\\n\\n参考博客：https://www.freesion.com/article/33101142210/\\n\\n服务注册时报BadRequest400 问题暂时还未解决\\n\\n```text\\ncom.alibaba.nacos.api.exception.NacosException: failed to req API:/nacos/v1/ns/instance after all servers([wsy.oopsw.top:1111]) tried: ErrCode:400, ErrMsg:<html><body><h1>Whitelabel Error Page</h1><p>This application has no explicit mapping for /error, so you are seeing this as a fallback.</p><div id=\'created\'>Mon Nov 30 01:33:45 CST 2020</div><div>There was an unexpected error (type=Bad Request, status=400).</div><div>receive invalid redirect request from peer 172.20.9.153</div></body></html>\\n```\\n\\n#############################################################\\n\\n问题已解决，是nacos版本的问题，据群里老哥解释说是nacos需要使用与之对应的SpringCloudAlibaba的版本，不然就会报错，我更换版本到1.3.2问题解决服务注册正常\",\"blogGoods\":0,\"blogId\":\"1333411378995605504\",\"blogImage\":\"http://808km.top/blog/img/img/default/1333411206555185152\",\"blogRead\":35,\"blogRemark\":\"nacos集群环境搭建\",\"blogTitle\":\"nacos集群环境搭建\",\"blogType\":20,\"createdTime\":1606745021000,\"typeName\":\"nacos\",\"updateTime\":1606868873000,\"version\":35},\"msg\":\"阅读成功\"}', '116.162.3.230', '2020-12-02 15:59:36', NULL);
INSERT INTO `bl_log` VALUES (2678, '登录', '//admin/login', '[LoginDto(username=qq1437631334, password=zz147258)]', 1, NULL, 'POST', 8, '{\"code\":400006,\"msg\":\"用户名或密码错误！\"}', '116.162.3.230', '2020-12-02 16:05:37', NULL);
INSERT INTO `bl_log` VALUES (2679, '阅读博客', '//blog/read/1333411378995605504', '[1333411378995605504]', 1, 'java.lang.IllegalArgumentException: Source must not be null\n	at com.wsy.blog.service.impl.BlogServiceImpl.getById(BlogServiceImpl.java:74)\n	at com.wsy.blog.service.impl.BlogServiceImpl.read(BlogServiceImpl.java:130)\n	at com.wsy.blog.service.impl.BlogServiceImpl$$FastClassBySpringCGLIB$$8bee96ac.invoke(<generated>)\n	at com.wsy.blog.service.impl.BlogServiceImpl$$EnhancerBySpringCGLIB$$8d922391.read(<generated>)\n	at com.wsy.blog.service.impl.BlogServiceImpl$$FastClassBySpringCGLIB$$8bee96ac.invoke(<generated>)\n	at com.wsy.blog.service.impl.BlogServiceImpl$$EnhancerBySpringCGLIB$$52da6b77.read(<generated>)\n	at com.wsy.blog.controller.BlogController.read(BlogController.java:101)\n	at com.wsy.blog.controller.BlogController$$FastClassBySpringCGLIB$$caaea0c2.invoke(<generated>)\n	at com.wsy.blog.aspect.RequestAspect.doAround(RequestAspect.java:80)\n	at com.wsy.blog.controller.BlogController$$EnhancerBySpringCGLIB$$9df05697.read(<generated>)\n', 'PUT', 28, '{\"code\":20000,\"data\":{\"blogCollection\":0,\"blogComment\":0,\"blogContent\":\"## 预备环境准备\\n\\nNacos 依赖 [Java](https://docs.oracle.com/cd/E19182-01/820-7851/inst_cli_jdk_javahome_t/) 环境来运行。如果您是从代码开始构建并运行Nacos，还需要为此配置 [Maven](https://maven.apache.org/index.html)环境，请确保是在以下版本环境中安装使用:\\n\\n1. 64 bit OS，支持 Linux/Unix/Mac/Windows，推荐选用 Linux/Unix/Mac。\\n2. 64 bit JDK 1.8+；[下载](http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html) & [配置](https://docs.oracle.com/cd/E19182-01/820-7851/inst_cli_jdk_javahome_t/)。\\n3. Maven 3.2.x+；[下载](https://maven.apache.org/download.cgi) & [配置](https://maven.apache.org/settings.html)。\\n\\n## 下载nacos安装包\\n\\nhttps://github.com/alibaba/nacos/releases/tag/1.4.0\\n\\n>  ![在这里插入图片描述](https://img-blog.csdnimg.cn/20201130205557917.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ0ODU5OA==,size_16,color_FFFFFF,t_70)\\n\\n\\nlinux选择第一个\\n\\nwindows选择第二个\\n\\n\\n\\n## 搭建环境\\n\\n### 集群模式部署\\n\\n这个快速开始手册是帮忙您快速在你的电脑上，下载安装并使用Nacos，部署生产使用的集群模式。\\n\\n### 集群部署架构图\\n\\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201130205609797.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ0ODU5OA==,size_16,color_FFFFFF,t_70)\\n\\n\\nVIP:虚拟ip\\n\\n因此开源的时候推荐用户把所有服务列表放到一个vip下面，然后挂到一个域名下面\\n\\nhttp://ip1:port/openAPI 直连ip模式，机器挂则需要修改ip才可以使用。\\n\\nhttp://VIP:port/openAPI 挂载VIP模式，直连vip即可，下面挂server真实ip，可读性不好。\\n\\nhttp://nacos.com:port/openAPI 域名 + VIP模式，可读性好，而且换ip方便，推荐模式\\n\\n### 创建目录\\n\\n该目录存放nacos集群\\n\\n```sh\\nmkdir /usr/local/nacos\\n```\\n\\n### 上传nacos\\n\\n> ![在这里插入图片描述](https://img-blog.csdnimg.cn/20201130205630233.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ0ODU5OA==,size_16,color_FFFFFF,t_70)\\n\\n### 解压nacos\\n\\n```sh\\ntar -zxvf nacos-server-1.4.0.tar.gz\\n```\\n\\n### 创建nacos持久化数据库\\n\\n首先使用navicat连接mysql数据库，然后创建数据库\\n\\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201130205643439.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ0ODU5OA==,size_16,color_FFFFFF,t_70)\\n\\n\\n新建数据库后导入SQL脚本即可\\n\\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201130205705669.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ0ODU5OA==,size_16,color_FFFFFF,t_70)\\n\\n红色框选那栏填写你的SQL脚本位置，SQL脚本在nacos文件夹下的conf下\\n\\n### nacos文件夹改名\\n\\n将文件夹名改为nacos3333代表这个nacos的端口号是3333\\n\\n```sh\\nmv nacos nacos3333\\n```\\n\\n### 配置修改\\n\\n首先进入到配置目录\\n\\n```sh\\ncd /usr/local/nacos/nacos3333/conf\\n```\\n\\n>![在这里插入图片描述](https://img-blog.csdnimg.cn/2020113020572431.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ0ODU5OA==,size_16,color_FFFFFF,t_70)\\n\\n\\n在更改配置之前先备份配置\\n\\n\\n\\n```sh\\ncp application.properties application.properties.example\\n```\\n\\n```sh\\ncp cluster.conf.example cluster.conf\\n```\\n\\n### 集群配置\\n\\n```sh\\nvim cluster.conf\\n```\\n\\n>![在这里插入图片描述](https://img-blog.csdnimg.cn/20201130205739435.png)\\n\\n>\\n> 注意这里不能填写localhost 或者127.0.0.1，这里如果是在本机搭建可以查看本机ip后填写\\n>\\n> ```sh\\n> hostname -i\\n> ```\\n>\\n>![在这里插入图片描述](https://img-blog.csdnimg.cn/20201130205749116.png)\\n\\n\\n### nacos配置\\n\\n```sh\\nvim application.properties\\n```\\n\\n```properties\\n\\n#*************** Spring Boot Related Configurations ***************#\\n### Default web context path:\\nserver.servlet.contextPath=/nacos\\n### Default web server port:\\nserver.port=3333\\n\\n#*************** Network Related Configurations ***************#\\n### If prefer hostname over ip for Nacos server addresses in cluster.conf:\\n# nacos.inetutils.prefer-hostname-over-ip=false\\n\\n### Specify local server\'s IP:\\n# nacos.inetutils.ip-address=\\n\\n\\n#*************** Config Module Related Configurations ***************#\\n### If use MySQL as datasource:\\nspring.datasource.platform=mysql\\n\\n### Count of DB:\\ndb.num=1\\n\\n### Connect URL of DB:\\ndb.url.0=jdbc:mysql://127.0.0.1:3306/nacos_config?characterEncoding=utf8&connectTimeout=1000&socketTimeout=3000&autoReconnect=true&useUnicode=true&useSSL=false&serverTimezone=UTC\\ndb.user=root\\ndb.password=123456\\n\\n\\n#*************** Naming Module Related Configurations ***************#\\n### Data dispatch task execution period in milliseconds:\\n# nacos.naming.distro.taskDispatchPeriod=200\\n\\n### Data count of batch sync task:\\n# nacos.naming.distro.batchSyncKeyCount=1000\\n\\n### Retry delay in milliseconds if sync task failed:\\n# nacos.naming.distro.syncRetryDelay=5000\\n\\n### If enable data warmup. If set to false, the server would accept request without local data preparation:\\n# nacos.naming.data.warmup=true\\n\\n### If enable the instance auto expiration, kind like of health check of instance:\\n# nacos.naming.expireInstance=true\\n\\nnacos.naming.empty-service.auto-clean=true\\nnacos.naming.empty-service.clean.initial-delay-ms=50000\\nnacos.naming.empty-service.clean.period-time-ms=30000\\n\\n\\n#*************** CMDB Module Related Configurations ***************#\\n### The interval to dump external CMDB in seconds:\\n# nacos.cmdb.dumpTaskInterval=3600\\n\\n### The interval of polling data change event in seconds:\\n# nacos.cmdb.eventTaskInterval=10\\n\\n### The interval of loading labels in seconds:\\n# nacos.cmdb.labelTaskInterval=300\\n\\n### If turn on data loading task:\\n# nacos.cmdb.loadDataAtStart=false\\n\\n\\n#*************** Metrics Related Configurations ***************#\\n### Metrics for prometheus\\n#management.endpoints.web.exposure.include=*\\n\\n### Metrics for elastic search\\nmanagement.metrics.export.elastic.enabled=false\\n#management.metrics.export.elastic.host=http://localhost:9200\\n\\n### Metrics for influx\\nmanagement.metrics.export.influx.enabled=false\\n#management.metrics.export.influx.db=springboot\\n#management.metrics.export.influx.uri=http://localhost:8086\\n#management.metrics.export.influx.auto-create-db=true\\n#management.metrics.export.influx.consistency=one\\n#management.metrics.export.influx.compressed=true\\n\\n\\n#*************** Access Log Related Configurations ***************#\\n### If turn on the access log:\\nserver.tomcat.accesslog.enabled=true\\n\\n### The access log pattern:\\nserver.tomcat.accesslog.pattern=%h %l %u %t \\\"%r\\\" %s %b %D %{User-Agent}i %{Request-Source}i\\n\\n### The directory of access log:\\nserver.tomcat.basedir=\\n\\n\\n#*************** Access Control Related Configurations ***************#\\n### If enable spring security, this option is deprecated in 1.2.0:\\n#spring.security.enabled=false\\n\\n### The ignore urls of auth, is deprecated in 1.2.0:\\nnacos.security.ignore.urls=/,/error,/**/*.css,/**/*.js,/**/*.html,/**/*.map,/**/*.svg,/**/*.png,/**/*.ico,/console-fe/public/**,/v1/auth/**,/v1/console/health/**,/actuator/**,/v1/console/server/**\\n\\n### The auth system to use, currently only \'nacos\' is supported:\\nnacos.core.auth.system.type=nacos\\n\\n### If turn on auth system:\\nnacos.core.auth.enabled=false\\n\\n### The token expiration in seconds:\\nnacos.core.auth.default.token.expire.seconds=18000\\n\\n### The default token:\\nnacos.core.auth.default.token.secret.key=SecretKey012345678901234567890123456789012345678901234567890123456789\\n\\n### Turn on/off caching of auth information. By turning on this switch, the update of auth information would have a 15 seconds delay.\\nnacos.core.auth.caching.enabled=true\\n\\n\\n#*************** Istio Related Configurations ***************#\\n### If turn on the MCP server:\\nnacos.istio.mcp.server.enabled=false\\n\\n\\n\\n###*************** Add from 1.3.0 ***************###\\n\\n\\n#*************** Core Related Configurations ***************#\\n\\n### set the WorkerID manually\\n# nacos.core.snowflake.worker-id=\\n\\n### Member-MetaData\\n# nacos.core.member.meta.site=\\n# nacos.core.member.meta.adweight=\\n# nacos.core.member.meta.weight=\\n\\n### MemberLookup\\n### Addressing pattern category, If set, the priority is highest\\n# nacos.core.member.lookup.type=[file,address-server]\\n## Set the cluster list with a configuration file or command-line argument\\n# nacos.member.list=192.168.16.101:8847?raft_port=8807,192.168.16.101?raft_port=8808,192.168.16.101:8849?raft_port=8809\\n## for AddressServerMemberLookup\\n# Maximum number of retries to query the address server upon initialization\\n# nacos.core.address-server.retry=5\\n## Server domain name address of [address-server] mode\\n# address.server.domain=jmenv.tbsite.net\\n## Server port of [address-server] mode\\n# address.server.port=8080\\n## Request address of [address-server] mode\\n# address.server.url=/nacos/serverlist\\n\\n#*************** JRaft Related Configurations ***************#\\n\\n### Sets the Raft cluster election timeout, default value is 5 second\\n# nacos.core.protocol.raft.data.election_timeout_ms=5000\\n### Sets the amount of time the Raft snapshot will execute periodically, default is 30 minute\\n# nacos.core.protocol.raft.data.snapshot_interval_secs=30\\n### raft internal worker threads\\n# nacos.core.protocol.raft.data.core_thread_num=8\\n### Number of threads required for raft business request processing\\n# nacos.core.protocol.raft.data.cli_service_thread_num=4\\n### raft linear read strategy. Safe linear reads are used by default, that is, the Leader tenure is confirmed by heartbeat\\n# nacos.core.protocol.raft.data.read_index_type=ReadOnlySafe\\n### rpc request timeout, default 5 seconds\\n# nacos.core.protocol.raft.data.rpc_request_timeout_ms=5000\\n\\n```\\n\\n这是我的整个application.properties文件,其中主要修改的地方有两处\\n\\n修改端口号\\n\\n```properties\\n### Default web server port:\\nserver.port=3333\\n```\\n\\n修改数据库为mysql并配置mysql的url\\n\\n```properties\\n#*************** Config Module Related Configurations ***************#\\n### If use MySQL as datasource:\\n spring.datasource.platform=mysql\\n\\n### Count of DB:\\n db.num=1\\n\\n### Connect URL of DB:\\ndb.url.0=jdbc:mysql://127.0.0.1:3306/nacos_config?characterEncoding=utf8&connectTimeout=1000&socketTimeout=3000&autoReconnect=true&useUnicode=true&useSSL=false&serverTimezone=UTC\\ndb.user=root\\ndb.password=123456\\n```\\n\\n这时候配置就差不多啦可以开始启动服务了\\n\\n```sh\\n# 进入到nacos3333的bin目录\\ncd /usr/local/nacos/nacos3333/bin\\n# 执行启动脚本 因为nacos启动脚本默认就是使用集群模式所以不用更改\\n./startup.sh\\n```\\n\\n这时候我们可以查看nacos的启动状态\\n\\n```sh\\nps -ef | grep nacos\\n```\\n\\n> ![在这里插入图片描述](https://img-blog.csdnimg.cn/20201130205818481.png)\\n\\n\\n这时候我们应该就可以通过 服务器ip:3333/nacos访问到nacos\\n\\n> ![在这里插入图片描述](https://img-blog.csdnimg.cn/20201130205828641.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ0ODU5OA==,size_16,color_FFFFFF,t_70)\\n\\n\\n成功的访问到了nacos代表成功了。\\n\\n### nacos集群启动\\n\\n这时候我们就可以回到nacos目录下拷贝之前的nacos3333文件夹来启动nacos4444和nacos5555\\n\\n```sh\\ncd /usr/local/nacos\\n# cp -r 代表递归拷贝\\ncp -r nacos3333 nacos4444\\ncp -r nacos3333 nacos5555\\n```\\n\\n这时候再分别将nacos4444和nacos5555文件夹下的conf目录中的application.properties中的server.port更改为3333、4444然后再启动，这里我就不再演示了，和之前配置一样。\\n\\n随后我们再依次启动nacos4444，nacos5555\\n\\n###########################################################################\\n\\n启动后发现问题，nacos5555启动不起来，查看日志得到发现内存不足，nacos脚本默认给的最大内存是2G，我们可以去改小一点。\\n\\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201130205845619.png)\\n\\n原红框中限制的内存是2g 最小1g 适当该小一点[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传\\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201130205903628.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ0ODU5OA==,size_16,color_FFFFFF,t_70)\\n\\n\\n然后再依次启动三个服务\\n\\n登录任意一个nacos可以看到如下页面即集群启动成功\\n\\n### nginx配置\\n\\n这配置nginx负载均衡访问nacos\\n\\n```sh\\ncd /usr/local/nginx/conf\\nvim nginx.conf\\n```\\n\\n```conf\\n#user  nobody;\\nworker_processes  1;\\n\\n#error_log  logs/error.log;\\n#error_log  logs/error.log  notice;\\n#error_log  logs/error.log  info;\\n\\n#pid        logs/nginx.pid;\\n\\n\\nevents {\\n    worker_connections  1024;\\n}\\n\\n\\nhttp {\\n    include       mime.types;\\n    default_type  application/octet-stream;\\n\\n    #log_format  main  \'$remote_addr - $remote_user [$time_local] \\\"$request\\\" \'\\n    #                  \'$status $body_bytes_sent \\\"$http_referer\\\" \'\\n    #                  \'\\\"$http_user_agent\\\" \\\"$http_x_forwarded_for\\\"\';\\n\\n    #access_log  logs/access.log  main;\\n\\n    sendfile        on;\\n    #tcp_nopush     on;\\n\\n    #keepalive_timeout  0;\\n    keepalive_timeout  65;\\n\\n    #gzip  on;\\n\\n    #配置刚刚搭建好的nacos集群\\n    upstream cluster{                                                        \\n\\t    server 127.0.0.1:3333;\\n\\t    server 127.0.0.1:4444;\\n\\t    server 127.0.0.1:5555;\\n\\t}\\n\\n    server {\\n        listen       1111;\\n        server_name  nacos_cluster;\\n\\n        #charset koi8-r;\\n\\n        #access_log  logs/host.access.log  main;\\n\\n        location / {\\n            #root   html;\\n            #index  index.html index.htm;\\n            #将所有访问/的都映射到配置好的集群\\n            proxy_pass http://cluster;\\n        }\\n\\n        #error_page  404              /404.html;\\n\\n        # redirect server error pages to the static page /50x.html\\n        #\\n        error_page   500 502 503 504  /50x.html;\\n        location = /50x.html {\\n            root   html;\\n        }\\n\\n        # proxy the PHP scripts to Apache listening on 127.0.0.1:80\\n        #\\n        #location ~ \\\\.php$ {\\n        #    proxy_pass   http://127.0.0.1;\\n        #}\\n\\n        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000\\n        #\\n        #location ~ \\\\.php$ {\\n        #    root           html;\\n        #    fastcgi_pass   127.0.0.1:9000;\\n        #    fastcgi_index  index.php;\\n        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;\\n        #    include        fastcgi_params;\\n        #}\\n\\n        # deny access to .htaccess files, if Apache\'s document root\\n        # concurs with nginx\'s one\\n        #\\n        #location ~ /\\\\.ht {\\n        #    deny  all;\\n        #}\\n    }\\n\\n\\n    # another virtual host using mix of IP-, name-, and port-based configuration\\n    #\\n    #server {\\n    #    listen       8000;\\n    #    listen       somename:8080;\\n    #    server_name  somename  alias  another.alias;\\n\\n    #    location / {\\n    #        root   html;\\n    #        index  index.html index.htm;\\n    #    }\\n    #}\\n\\n\\n    # HTTPS server\\n    #\\n    #server {\\n    #    listen       443 ssl;\\n    #    server_name  localhost;\\n\\n    #    ssl_certificate      cert.pem;\\n    #    ssl_certificate_key  cert.key;\\n\\n    #    ssl_session_cache    shared:SSL:1m;\\n    #    ssl_session_timeout  5m;\\n\\n    #    ssl_ciphers  HIGH:!aNULL:!MD5;\\n    #    ssl_prefer_server_ciphers  on;\\n\\n    #    location / {\\n    #        root   html;\\n    #        index  index.html index.htm;\\n    #    }\\n    #}\\n}\\n```\\n\\n### nginx启动\\n\\n```sh\\ncd /usr/local/nginx/sbin\\n./nginx\\n```\\n\\n这时候我们就可以通过服务器ip地址:1111/nacos 来访问nacos集群了\\n\\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201130205927229.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ0ODU5OA==,size_16,color_FFFFFF,t_70)\\n\\n\\n关于使用NACOS集群遇到问题 -- CODE:503 MSG: SERVER IS STARTING NOW, PLEASE TRY AGAIN LATER!\\n\\n这时又出现了问题……在服务提供者注册服务时会报错\\n\\n```text\\n2020-11-30 00:36:59.492 ERROR 13140 --- [  restartedMain] c.a.c.n.registry.NacosServiceRegistry    : nacos registry, nacos-payment-provider register failed...NacosRegistration{nacosDiscoveryProperties=NacosDiscoveryProperties{serverAddr=\'wsy.oopsw.top:1111\', endpoint=\'\', namespace=\'\', watchDelay=30000, logName=\'\', service=\'nacos-payment-provider\', weight=1.0, clusterName=\'DEFAULT\', namingLoadCacheAtStart=\'false\', metadata={preserved.register.source=SPRING_CLOUD}, registerEnabled=true, ip=\'10.175.6.100\', networkInterface=\'\', port=9002, secure=false, accessKey=\'\', secretKey=\'\'}},\\n\\njava.lang.IllegalStateException: failed to req API:/nacos/v1/ns/instance after all servers([wsy.oopsw.top:1111]) tried: failed to req API:wsy.oopsw.top:1111/nacos/v1/ns/instance. code:503 msg: server is DOWN now, please try again later!\\n\\tat com.alibaba.nacos.client.naming.net.NamingProxy.reqAPI(NamingProxy.java:464) ~[nacos-client-1.1.1.jar:na]\\n\\tat com.alibaba.nacos.client.naming.net.NamingProxy.reqAPI(NamingProxy.java:386) ~[nacos-client-1.1.1.jar:na]\\n\\tat com.alibaba.nacos.client.naming.net.NamingProxy.registerService(NamingProxy.java:188) ~[nacos-client-1.1.1.jar:na]\\n\\tat com.alibaba.nacos.client.naming.NacosNamingService.registerInstance(NacosNamingService.java:205) ~[nacos-client-1.1.1.jar:na]\\n\\tat com.alibaba.nacos.client.naming.NacosNamingService.registerInstance(NacosNamingService.java:184) ~[nacos-client-1.1.1.jar:na]\\n\\tat com.alibaba.cloud.nacos.registry.NacosServiceRegistry.register(NacosServiceRegistry.java:61) ~[spring-cloud-alibaba-nacos-discovery-2.1.0.RELEASE.jar:2.1.0.RELEASE]\\n\\tat org.springframework.cloud.client.serviceregistry.AbstractAutoServiceRegistration.register(AbstractAutoServiceRegistration.java:239) [spring-cloud-commons-2.2.1.RELEASE.jar:2.2.1.RELEASE]\\n\\tat com.alibaba.cloud.nacos.registry.NacosAutoServiceRegistration.register(NacosAutoServiceRegistration.java:74) [spring-cloud-alibaba-nacos-discovery-2.1.0.RELEASE.jar:2.1.0.RELEASE]\\n\\tat org.springframework.cloud.client.serviceregistry.AbstractAutoServiceRegistration.start(AbstractAutoServiceRegistration.java:138) [spring-cloud-commons-2.2.1.RELEASE.jar:2.2.1.RELEASE]\\n\\tat org.springframework.cloud.client.serviceregistry.AbstractAutoServiceRegistration.bind(AbstractAutoServiceRegistration.java:101) [spring-cloud-commons-2.2.1.RELEASE.jar:2.2.1.RELEASE]\\n\\tat org.springframework.cloud.client.serviceregistry.AbstractAutoServiceRegistration.onApplicationEvent(AbstractAutoServiceRegistration.java:88) [spring-cloud-commons-2.2.1.RELEASE.jar:2.2.1.RELEASE]\\n\\tat org.springframework.cloud.client.serviceregistry.AbstractAutoServiceRegistration.onApplicationEvent(AbstractAutoServiceRegistration.java:47) [spring-cloud-commons-2.2.1.RELEASE.jar:2.2.1.RELEASE]\\n\\tat org.springframework.context.event.SimpleApplicationEventMulticaster.doInvokeListener(SimpleApplicationEventMulticaster.java:172) [spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]\\n\\tat org.springframework.context.event.SimpleApplicationEventMulticaster.invokeListener(SimpleApplicationEventMulticaster.java:165) [spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]\\n\\tat org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:139) [spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]\\n\\tat org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:403) [spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]\\n\\tat org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:360) [spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]\\n\\tat org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.finishRefresh(ServletWebServerApplicationContext.java:165) [spring-boot-2.2.2.RELEASE.jar:2.2.2.RELEASE]\\n\\tat org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:553) [spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]\\n\\tat org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:141) [spring-boot-2.2.2.RELEASE.jar:2.2.2.RELEASE]\\n\\tat org.springframework.boot.SpringApplication.refresh(SpringApplication.java:747) [spring-boot-2.2.2.RELEASE.jar:2.2.2.RELEASE]\\n\\tat org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:397) [spring-boot-2.2.2.RELEASE.jar:2.2.2.RELEASE]\\n\\tat org.springframework.boot.SpringApplication.run(SpringApplication.java:315) [spring-boot-2.2.2.RELEASE.jar:2.2.2.RELEASE]\\n\\tat org.springframework.boot.SpringApplication.run(SpringApplication.java:1226) [spring-boot-2.2.2.RELEASE.jar:2.2.2.RELEASE]\\n\\tat org.springframework.boot.SpringApplication.run(SpringApplication.java:1215) [spring-boot-2.2.2.RELEASE.jar:2.2.2.RELEASE]\\n\\tat com.wsy.springcloud.AlibabaProviderApplication.main(AlibabaProviderApplication.java:15) [classes/:na]\\n\\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_73]\\n\\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_73]\\n\\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_73]\\n\\tat java.lang.reflect.Method.invoke(Method.java:497) ~[na:1.8.0_73]\\n\\tat org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49) [spring-boot-devtools-2.2.2.RELEASE.jar:2.2.2.RELEASE]\\n```\\n\\n像阿里云、腾讯云这种云服务器, 会提供一个外网ip和内网ip, 访问外网ip时会指向对应的内网ip来访问到该服务器, 由于nacos集群内部是指定的使用网卡ip地址来进行通信,但是由于三台服务器各自的内网ip不在同一网段, 所以造成无法通信, 也会造成以下问题\\n\\n注册服务:\\n\\n```\\ncode:503 msg: server is STARTING now, please try again later!\\n```\\n\\nnaming-raft.log 日志:\\n\\n```\\n2019-05-15 00:02:00,000 WARN [IS LEADER] no leader is available now!\\n```\\n\\n这时只要修改启动参数, 设置本机ip地址就可以了\\n修改 nacos/bin/startup.sh 文件\\n找到 JVM Configuration 这部分, 在集群参数里增加 -Dnacos.server.ip=xx\\n\\n```sh\\n#===========================================================================================\\n# JVM Configuration\\n#===========================================================================================\\n\\n# 单机模式对应的启动参数\\nif [[ \\\"${MODE}\\\" == \\\"standalone\\\" ]]; then\\n    JAVA_OPT=\\\"${JAVA_OPT} -Xms512m -Xmx512m -Xmn256m\\\"\\n    JAVA_OPT=\\\"${JAVA_OPT} -Dnacos.standalone=true\\\"\\nelse\\n# 集群模式对应的启动参数\\n    JAVA_OPT=\\\"${JAVA_OPT} -server -Xms2g -Xmx2g -Xmn1g -XX:MetaspaceSize=128m -XX:MaxMetaspaceSize=320m\\\"\\n    JAVA_OPT=\\\"${JAVA_OPT} -XX:-OmitStackTraceInFastThrow -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=${BASE_DIR}/logs/java_heapdump.hprof\\\"\\n    JAVA_OPT=\\\"${JAVA_OPT} -XX:-UseLargePages\\\"\\n    \\n    # *新增以下参数设置本机ip地址*\\n    JAVA_OPT=\\\"${JAVA_OPT} -Dnacos.server.ip=本机ip\\\"\\n\\nfi\\n\\nif [[ \\\"${FUNCTION_MODE}\\\" == \\\"config\\\" ]]; then\\n    JAVA_OPT=\\\"${JAVA_OPT} -Dnacos.functionMode=config\\\"\\nelif [[ \\\"${FUNCTION_MODE}\\\" == \\\"naming\\\" ]]; then\\n    JAVA_OPT=\\\"${JAVA_OPT} -Dnacos.functionMode=naming\\\"\\nfi\\n\\n```\\n\\n参考博客：https://www.freesion.com/article/33101142210/\\n\\n服务注册时报BadRequest400 问题暂时还未解决\\n\\n```text\\ncom.alibaba.nacos.api.exception.NacosException: failed to req API:/nacos/v1/ns/instance after all servers([wsy.oopsw.top:1111]) tried: ErrCode:400, ErrMsg:<html><body><h1>Whitelabel Error Page</h1><p>This application has no explicit mapping for /error, so you are seeing this as a fallback.</p><div id=\'created\'>Mon Nov 30 01:33:45 CST 2020</div><div>There was an unexpected error (type=Bad Request, status=400).</div><div>receive invalid redirect request from peer 172.20.9.153</div></body></html>\\n```\\n\\n#############################################################\\n\\n问题已解决，是nacos版本的问题，据群里老哥解释说是nacos需要使用与之对应的SpringCloudAlibaba的版本，不然就会报错，我更换版本到1.3.2问题解决服务注册正常\",\"blogGoods\":0,\"blogId\":\"1333411378995605504\",\"blogImage\":\"http://808km.top/blog/img/img/default/1333411206555185152\",\"blogRead\":36,\"blogRemark\":\"nacos集群环境搭建\",\"blogTitle\":\"nacos集群环境搭建\",\"blogType\":20,\"createdTime\":1606745021000,\"typeName\":\"nacos\",\"updateTime\":1606896455000,\"version\":36},\"msg\":\"阅读成功\"}', '218.77.40.70', '2020-12-02 18:58:00', NULL);
INSERT INTO `bl_log` VALUES (2680, '查询时间轴', '//blog/getTimeLine', '[]', 1, NULL, 'GET', 8, '{\"code\":20000,\"data\":[{\"list\":[{\"blogId\":\"1333708609683533824\",\"blogMonth\":\"2020-12\",\"blogTitle\":\"shiro+redis整合实现session持久化登陆失败时也会生成session问题\",\"createdTime\":1606815886000}],\"month\":\"2020-12\"},{\"list\":[{\"blogId\":\"1333411378995605504\",\"blogMonth\":\"2020-11\",\"blogTitle\":\"nacos集群环境搭建\",\"createdTime\":1606745021000},{\"blogId\":\"1332742588649615360\",\"blogMonth\":\"2020-11\",\"blogTitle\":\"vue项目引入markdown\",\"createdTime\":1606585569000},{\"blogId\":\"1331436834413211648\",\"blogMonth\":\"2020-11\",\"blogTitle\":\"springboot 后端传给前端相差8小时\",\"createdTime\":1606274253000}],\"month\":\"2020-11\"},{\"list\":[{\"blogId\":\"1322169187161767936\",\"blogMonth\":\"2020-10\",\"blogTitle\":\"Dubbo超时问题\",\"createdTime\":1604064673000}],\"month\":\"2020-10\"},{\"list\":[{\"blogId\":\"1311375132718956544\",\"blogMonth\":\"2020-09\",\"blogTitle\":\"docker中使用fastdfs问题\",\"createdTime\":1601462370000},{\"blogId\":\"1305852969815642112\",\"blogMonth\":\"2020-09\",\"blogTitle\":\"dubbo-admin登录问题\",\"createdTime\":1600174584000}],\"month\":\"2020-09\"},{\"list\":[{\"blogId\":\"1294647161643978752\",\"blogMonth\":\"2020-08\",\"blogTitle\":\"shiroFilter踩坑\",\"createdTime\":1597474112000},{\"blogId\":\"1293808631053139968\",\"blogMonth\":\"2020-08\",\"blogTitle\":\"docker 安装 mysql5.7\",\"createdTime\":1597274190000}],\"month\":\"2020-08\"},{\"list\":[{\"blogId\":\"1293850784802377728\",\"blogMonth\":\"2020-07\",\"blogTitle\":\"mybatis <if>标签踩坑\",\"createdTime\":1594605840000}],\"month\":\"2020-07\"}],\"msg\":\"操作成功！\"}', '218.77.40.70', '2020-12-02 19:04:21', NULL);
INSERT INTO `bl_log` VALUES (2681, '阅读博客', '/blog/read/1322169187161767936', '[1322169187161767936]', 1, NULL, 'PUT', 2333, '{\"code\":20000,\"data\":{\"blogCollection\":0,\"blogComment\":0,\"blogContent\":\"# Dubbo的超时问题\\nDubbo如果不设置timeout属性的话，默认会有一个1000ms的超时时间，当你超过这个值的时候dubbo就会抛出TimeOutException\\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201030210230916.png#pic_center)\\n而我在Controller里使用了hystrix做了熔断保护\\n\\n```java\\n    /**\\n     * 入库操作\\n     * @param purchaseId 采购单id\\n     * @return 统一返回类型\\n     */\\n    @HystrixCommand\\n    @PostMapping(\\\"doInventory/{purchaseId}\\\")\\n    public AjaxResult doInventory(@PathVariable String purchaseId) {\\n        return AjaxResult.toAjax(this.purchaseService.doInventory(purchaseId, ShiroSecurityUtils.getCurrentSimpleUser()));\\n    }\\n```\\n\\n其中熔断保护后执行的方法来自于Controller里集成的BaseController\\n\\n```java\\n/**\\n * @author wsy\\n * @date 2020-10-29 9:33\\n * @DefaultProperties 配置熔断保护的方法\\n */\\n@DefaultProperties(defaultFallback = \\\"fullBack\\\")\\npublic class BaseController {\\n    public AjaxResult fullBack() {\\n        return AjaxResult.toAjax(-1);\\n    }\\n}\\n```\\nfullBack方法的返回值就是给我的统一返回类返回一个-1值\\n我的统一返回类中会认为-1值是错误信息， 所以会返回操作失败\\n```java\\n    /**\\n     * 返回错误消息\\n     *\\n     * @param rows 返回行数\\n     * @return 添加修改删除转化信息\\n     */\\n    public static AjaxResult toAjax(int rows) {\\n        return rows > 0 ? AjaxResult.success() : AjaxResult.fail();\\n    }\\n ```\\n 在我今天3个小时的一步步排查异常下终于找到了错误，就是Dubbo的超时机制，在我没有设置超时时间的情况下给我一直在抛异常，导致服务返回的code一直是操作失败\\n# 优先级选择\\n在dubbo中如果provider和consumer都配置了相同的一个属性，比如本文分析的timeout，其实是有一个优先级的，优先级：\\n**consumer方法配置 > provider方法配置 > consumer接口配置 > provider接口配置 > consumer全局配置 > provider全局配置。**\\n\\n参考博客：[https://segmentfault.com/a/1190000018924018](https://segmentfault.com/a/1190000018924018)\",\"blogGoods\":0,\"blogId\":\"1322169187161767936\",\"blogImage\":\"http://808km.top/blog/img/default.jpg\",\"blogRead\":37,\"blogTitle\":\"Dubbo超时问题\",\"blogType\":18,\"createdTime\":1604064673000,\"typeName\":\"dubbo\",\"updateTime\":1606845447000,\"version\":38},\"msg\":\"阅读成功\"}', '127.0.0.1', '2020-12-03 12:49:36', NULL);
INSERT INTO `bl_log` VALUES (2682, '阅读博客', '/blog/read/1333411378995605504', '[1333411378995605504]', 1, NULL, 'PUT', 2335, '{\"code\":20000,\"data\":{\"blogCollection\":0,\"blogComment\":0,\"blogContent\":\"## 预备环境准备\\n\\nNacos 依赖 [Java](https://docs.oracle.com/cd/E19182-01/820-7851/inst_cli_jdk_javahome_t/) 环境来运行。如果您是从代码开始构建并运行Nacos，还需要为此配置 [Maven](https://maven.apache.org/index.html)环境，请确保是在以下版本环境中安装使用:\\n\\n1. 64 bit OS，支持 Linux/Unix/Mac/Windows，推荐选用 Linux/Unix/Mac。\\n2. 64 bit JDK 1.8+；[下载](http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html) & [配置](https://docs.oracle.com/cd/E19182-01/820-7851/inst_cli_jdk_javahome_t/)。\\n3. Maven 3.2.x+；[下载](https://maven.apache.org/download.cgi) & [配置](https://maven.apache.org/settings.html)。\\n\\n## 下载nacos安装包\\n\\nhttps://github.com/alibaba/nacos/releases/tag/1.4.0\\n\\n>  ![在这里插入图片描述](https://img-blog.csdnimg.cn/20201130205557917.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ0ODU5OA==,size_16,color_FFFFFF,t_70)\\n\\n\\nlinux选择第一个\\n\\nwindows选择第二个\\n\\n\\n\\n## 搭建环境\\n\\n### 集群模式部署\\n\\n这个快速开始手册是帮忙您快速在你的电脑上，下载安装并使用Nacos，部署生产使用的集群模式。\\n\\n### 集群部署架构图\\n\\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201130205609797.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ0ODU5OA==,size_16,color_FFFFFF,t_70)\\n\\n\\nVIP:虚拟ip\\n\\n因此开源的时候推荐用户把所有服务列表放到一个vip下面，然后挂到一个域名下面\\n\\nhttp://ip1:port/openAPI 直连ip模式，机器挂则需要修改ip才可以使用。\\n\\nhttp://VIP:port/openAPI 挂载VIP模式，直连vip即可，下面挂server真实ip，可读性不好。\\n\\nhttp://nacos.com:port/openAPI 域名 + VIP模式，可读性好，而且换ip方便，推荐模式\\n\\n### 创建目录\\n\\n该目录存放nacos集群\\n\\n```sh\\nmkdir /usr/local/nacos\\n```\\n\\n### 上传nacos\\n\\n> ![在这里插入图片描述](https://img-blog.csdnimg.cn/20201130205630233.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ0ODU5OA==,size_16,color_FFFFFF,t_70)\\n\\n### 解压nacos\\n\\n```sh\\ntar -zxvf nacos-server-1.4.0.tar.gz\\n```\\n\\n### 创建nacos持久化数据库\\n\\n首先使用navicat连接mysql数据库，然后创建数据库\\n\\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201130205643439.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ0ODU5OA==,size_16,color_FFFFFF,t_70)\\n\\n\\n新建数据库后导入SQL脚本即可\\n\\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201130205705669.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ0ODU5OA==,size_16,color_FFFFFF,t_70)\\n\\n红色框选那栏填写你的SQL脚本位置，SQL脚本在nacos文件夹下的conf下\\n\\n### nacos文件夹改名\\n\\n将文件夹名改为nacos3333代表这个nacos的端口号是3333\\n\\n```sh\\nmv nacos nacos3333\\n```\\n\\n### 配置修改\\n\\n首先进入到配置目录\\n\\n```sh\\ncd /usr/local/nacos/nacos3333/conf\\n```\\n\\n>![在这里插入图片描述](https://img-blog.csdnimg.cn/2020113020572431.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ0ODU5OA==,size_16,color_FFFFFF,t_70)\\n\\n\\n在更改配置之前先备份配置\\n\\n\\n\\n```sh\\ncp application.properties application.properties.example\\n```\\n\\n```sh\\ncp cluster.conf.example cluster.conf\\n```\\n\\n### 集群配置\\n\\n```sh\\nvim cluster.conf\\n```\\n\\n>![在这里插入图片描述](https://img-blog.csdnimg.cn/20201130205739435.png)\\n\\n>\\n> 注意这里不能填写localhost 或者127.0.0.1，这里如果是在本机搭建可以查看本机ip后填写\\n>\\n> ```sh\\n> hostname -i\\n> ```\\n>\\n>![在这里插入图片描述](https://img-blog.csdnimg.cn/20201130205749116.png)\\n\\n\\n### nacos配置\\n\\n```sh\\nvim application.properties\\n```\\n\\n```properties\\n\\n#*************** Spring Boot Related Configurations ***************#\\n### Default web context path:\\nserver.servlet.contextPath=/nacos\\n### Default web server port:\\nserver.port=3333\\n\\n#*************** Network Related Configurations ***************#\\n### If prefer hostname over ip for Nacos server addresses in cluster.conf:\\n# nacos.inetutils.prefer-hostname-over-ip=false\\n\\n### Specify local server\'s IP:\\n# nacos.inetutils.ip-address=\\n\\n\\n#*************** Config Module Related Configurations ***************#\\n### If use MySQL as datasource:\\nspring.datasource.platform=mysql\\n\\n### Count of DB:\\ndb.num=1\\n\\n### Connect URL of DB:\\ndb.url.0=jdbc:mysql://127.0.0.1:3306/nacos_config?characterEncoding=utf8&connectTimeout=1000&socketTimeout=3000&autoReconnect=true&useUnicode=true&useSSL=false&serverTimezone=UTC\\ndb.user=root\\ndb.password=123456\\n\\n\\n#*************** Naming Module Related Configurations ***************#\\n### Data dispatch task execution period in milliseconds:\\n# nacos.naming.distro.taskDispatchPeriod=200\\n\\n### Data count of batch sync task:\\n# nacos.naming.distro.batchSyncKeyCount=1000\\n\\n### Retry delay in milliseconds if sync task failed:\\n# nacos.naming.distro.syncRetryDelay=5000\\n\\n### If enable data warmup. If set to false, the server would accept request without local data preparation:\\n# nacos.naming.data.warmup=true\\n\\n### If enable the instance auto expiration, kind like of health check of instance:\\n# nacos.naming.expireInstance=true\\n\\nnacos.naming.empty-service.auto-clean=true\\nnacos.naming.empty-service.clean.initial-delay-ms=50000\\nnacos.naming.empty-service.clean.period-time-ms=30000\\n\\n\\n#*************** CMDB Module Related Configurations ***************#\\n### The interval to dump external CMDB in seconds:\\n# nacos.cmdb.dumpTaskInterval=3600\\n\\n### The interval of polling data change event in seconds:\\n# nacos.cmdb.eventTaskInterval=10\\n\\n### The interval of loading labels in seconds:\\n# nacos.cmdb.labelTaskInterval=300\\n\\n### If turn on data loading task:\\n# nacos.cmdb.loadDataAtStart=false\\n\\n\\n#*************** Metrics Related Configurations ***************#\\n### Metrics for prometheus\\n#management.endpoints.web.exposure.include=*\\n\\n### Metrics for elastic search\\nmanagement.metrics.export.elastic.enabled=false\\n#management.metrics.export.elastic.host=http://localhost:9200\\n\\n### Metrics for influx\\nmanagement.metrics.export.influx.enabled=false\\n#management.metrics.export.influx.db=springboot\\n#management.metrics.export.influx.uri=http://localhost:8086\\n#management.metrics.export.influx.auto-create-db=true\\n#management.metrics.export.influx.consistency=one\\n#management.metrics.export.influx.compressed=true\\n\\n\\n#*************** Access Log Related Configurations ***************#\\n### If turn on the access log:\\nserver.tomcat.accesslog.enabled=true\\n\\n### The access log pattern:\\nserver.tomcat.accesslog.pattern=%h %l %u %t \\\"%r\\\" %s %b %D %{User-Agent}i %{Request-Source}i\\n\\n### The directory of access log:\\nserver.tomcat.basedir=\\n\\n\\n#*************** Access Control Related Configurations ***************#\\n### If enable spring security, this option is deprecated in 1.2.0:\\n#spring.security.enabled=false\\n\\n### The ignore urls of auth, is deprecated in 1.2.0:\\nnacos.security.ignore.urls=/,/error,/**/*.css,/**/*.js,/**/*.html,/**/*.map,/**/*.svg,/**/*.png,/**/*.ico,/console-fe/public/**,/v1/auth/**,/v1/console/health/**,/actuator/**,/v1/console/server/**\\n\\n### The auth system to use, currently only \'nacos\' is supported:\\nnacos.core.auth.system.type=nacos\\n\\n### If turn on auth system:\\nnacos.core.auth.enabled=false\\n\\n### The token expiration in seconds:\\nnacos.core.auth.default.token.expire.seconds=18000\\n\\n### The default token:\\nnacos.core.auth.default.token.secret.key=SecretKey012345678901234567890123456789012345678901234567890123456789\\n\\n### Turn on/off caching of auth information. By turning on this switch, the update of auth information would have a 15 seconds delay.\\nnacos.core.auth.caching.enabled=true\\n\\n\\n#*************** Istio Related Configurations ***************#\\n### If turn on the MCP server:\\nnacos.istio.mcp.server.enabled=false\\n\\n\\n\\n###*************** Add from 1.3.0 ***************###\\n\\n\\n#*************** Core Related Configurations ***************#\\n\\n### set the WorkerID manually\\n# nacos.core.snowflake.worker-id=\\n\\n### Member-MetaData\\n# nacos.core.member.meta.site=\\n# nacos.core.member.meta.adweight=\\n# nacos.core.member.meta.weight=\\n\\n### MemberLookup\\n### Addressing pattern category, If set, the priority is highest\\n# nacos.core.member.lookup.type=[file,address-server]\\n## Set the cluster list with a configuration file or command-line argument\\n# nacos.member.list=192.168.16.101:8847?raft_port=8807,192.168.16.101?raft_port=8808,192.168.16.101:8849?raft_port=8809\\n## for AddressServerMemberLookup\\n# Maximum number of retries to query the address server upon initialization\\n# nacos.core.address-server.retry=5\\n## Server domain name address of [address-server] mode\\n# address.server.domain=jmenv.tbsite.net\\n## Server port of [address-server] mode\\n# address.server.port=8080\\n## Request address of [address-server] mode\\n# address.server.url=/nacos/serverlist\\n\\n#*************** JRaft Related Configurations ***************#\\n\\n### Sets the Raft cluster election timeout, default value is 5 second\\n# nacos.core.protocol.raft.data.election_timeout_ms=5000\\n### Sets the amount of time the Raft snapshot will execute periodically, default is 30 minute\\n# nacos.core.protocol.raft.data.snapshot_interval_secs=30\\n### raft internal worker threads\\n# nacos.core.protocol.raft.data.core_thread_num=8\\n### Number of threads required for raft business request processing\\n# nacos.core.protocol.raft.data.cli_service_thread_num=4\\n### raft linear read strategy. Safe linear reads are used by default, that is, the Leader tenure is confirmed by heartbeat\\n# nacos.core.protocol.raft.data.read_index_type=ReadOnlySafe\\n### rpc request timeout, default 5 seconds\\n# nacos.core.protocol.raft.data.rpc_request_timeout_ms=5000\\n\\n```\\n\\n这是我的整个application.properties文件,其中主要修改的地方有两处\\n\\n修改端口号\\n\\n```properties\\n### Default web server port:\\nserver.port=3333\\n```\\n\\n修改数据库为mysql并配置mysql的url\\n\\n```properties\\n#*************** Config Module Related Configurations ***************#\\n### If use MySQL as datasource:\\n spring.datasource.platform=mysql\\n\\n### Count of DB:\\n db.num=1\\n\\n### Connect URL of DB:\\ndb.url.0=jdbc:mysql://127.0.0.1:3306/nacos_config?characterEncoding=utf8&connectTimeout=1000&socketTimeout=3000&autoReconnect=true&useUnicode=true&useSSL=false&serverTimezone=UTC\\ndb.user=root\\ndb.password=123456\\n```\\n\\n这时候配置就差不多啦可以开始启动服务了\\n\\n```sh\\n# 进入到nacos3333的bin目录\\ncd /usr/local/nacos/nacos3333/bin\\n# 执行启动脚本 因为nacos启动脚本默认就是使用集群模式所以不用更改\\n./startup.sh\\n```\\n\\n这时候我们可以查看nacos的启动状态\\n\\n```sh\\nps -ef | grep nacos\\n```\\n\\n> ![在这里插入图片描述](https://img-blog.csdnimg.cn/20201130205818481.png)\\n\\n\\n这时候我们应该就可以通过 服务器ip:3333/nacos访问到nacos\\n\\n> ![在这里插入图片描述](https://img-blog.csdnimg.cn/20201130205828641.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ0ODU5OA==,size_16,color_FFFFFF,t_70)\\n\\n\\n成功的访问到了nacos代表成功了。\\n\\n### nacos集群启动\\n\\n这时候我们就可以回到nacos目录下拷贝之前的nacos3333文件夹来启动nacos4444和nacos5555\\n\\n```sh\\ncd /usr/local/nacos\\n# cp -r 代表递归拷贝\\ncp -r nacos3333 nacos4444\\ncp -r nacos3333 nacos5555\\n```\\n\\n这时候再分别将nacos4444和nacos5555文件夹下的conf目录中的application.properties中的server.port更改为3333、4444然后再启动，这里我就不再演示了，和之前配置一样。\\n\\n随后我们再依次启动nacos4444，nacos5555\\n\\n###########################################################################\\n\\n启动后发现问题，nacos5555启动不起来，查看日志得到发现内存不足，nacos脚本默认给的最大内存是2G，我们可以去改小一点。\\n\\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201130205845619.png)\\n\\n原红框中限制的内存是2g 最小1g 适当该小一点[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传\\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201130205903628.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ0ODU5OA==,size_16,color_FFFFFF,t_70)\\n\\n\\n然后再依次启动三个服务\\n\\n登录任意一个nacos可以看到如下页面即集群启动成功\\n\\n### nginx配置\\n\\n这配置nginx负载均衡访问nacos\\n\\n```sh\\ncd /usr/local/nginx/conf\\nvim nginx.conf\\n```\\n\\n```conf\\n#user  nobody;\\nworker_processes  1;\\n\\n#error_log  logs/error.log;\\n#error_log  logs/error.log  notice;\\n#error_log  logs/error.log  info;\\n\\n#pid        logs/nginx.pid;\\n\\n\\nevents {\\n    worker_connections  1024;\\n}\\n\\n\\nhttp {\\n    include       mime.types;\\n    default_type  application/octet-stream;\\n\\n    #log_format  main  \'$remote_addr - $remote_user [$time_local] \\\"$request\\\" \'\\n    #                  \'$status $body_bytes_sent \\\"$http_referer\\\" \'\\n    #                  \'\\\"$http_user_agent\\\" \\\"$http_x_forwarded_for\\\"\';\\n\\n    #access_log  logs/access.log  main;\\n\\n    sendfile        on;\\n    #tcp_nopush     on;\\n\\n    #keepalive_timeout  0;\\n    keepalive_timeout  65;\\n\\n    #gzip  on;\\n\\n    #配置刚刚搭建好的nacos集群\\n    upstream cluster{                                                        \\n\\t    server 127.0.0.1:3333;\\n\\t    server 127.0.0.1:4444;\\n\\t    server 127.0.0.1:5555;\\n\\t}\\n\\n    server {\\n        listen       1111;\\n        server_name  nacos_cluster;\\n\\n        #charset koi8-r;\\n\\n        #access_log  logs/host.access.log  main;\\n\\n        location / {\\n            #root   html;\\n            #index  index.html index.htm;\\n            #将所有访问/的都映射到配置好的集群\\n            proxy_pass http://cluster;\\n        }\\n\\n        #error_page  404              /404.html;\\n\\n        # redirect server error pages to the static page /50x.html\\n        #\\n        error_page   500 502 503 504  /50x.html;\\n        location = /50x.html {\\n            root   html;\\n        }\\n\\n        # proxy the PHP scripts to Apache listening on 127.0.0.1:80\\n        #\\n        #location ~ \\\\.php$ {\\n        #    proxy_pass   http://127.0.0.1;\\n        #}\\n\\n        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000\\n        #\\n        #location ~ \\\\.php$ {\\n        #    root           html;\\n        #    fastcgi_pass   127.0.0.1:9000;\\n        #    fastcgi_index  index.php;\\n        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;\\n        #    include        fastcgi_params;\\n        #}\\n\\n        # deny access to .htaccess files, if Apache\'s document root\\n        # concurs with nginx\'s one\\n        #\\n        #location ~ /\\\\.ht {\\n        #    deny  all;\\n        #}\\n    }\\n\\n\\n    # another virtual host using mix of IP-, name-, and port-based configuration\\n    #\\n    #server {\\n    #    listen       8000;\\n    #    listen       somename:8080;\\n    #    server_name  somename  alias  another.alias;\\n\\n    #    location / {\\n    #        root   html;\\n    #        index  index.html index.htm;\\n    #    }\\n    #}\\n\\n\\n    # HTTPS server\\n    #\\n    #server {\\n    #    listen       443 ssl;\\n    #    server_name  localhost;\\n\\n    #    ssl_certificate      cert.pem;\\n    #    ssl_certificate_key  cert.key;\\n\\n    #    ssl_session_cache    shared:SSL:1m;\\n    #    ssl_session_timeout  5m;\\n\\n    #    ssl_ciphers  HIGH:!aNULL:!MD5;\\n    #    ssl_prefer_server_ciphers  on;\\n\\n    #    location / {\\n    #        root   html;\\n    #        index  index.html index.htm;\\n    #    }\\n    #}\\n}\\n```\\n\\n### nginx启动\\n\\n```sh\\ncd /usr/local/nginx/sbin\\n./nginx\\n```\\n\\n这时候我们就可以通过服务器ip地址:1111/nacos 来访问nacos集群了\\n\\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201130205927229.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ0ODU5OA==,size_16,color_FFFFFF,t_70)\\n\\n\\n关于使用NACOS集群遇到问题 -- CODE:503 MSG: SERVER IS STARTING NOW, PLEASE TRY AGAIN LATER!\\n\\n这时又出现了问题……在服务提供者注册服务时会报错\\n\\n```text\\n2020-11-30 00:36:59.492 ERROR 13140 --- [  restartedMain] c.a.c.n.registry.NacosServiceRegistry    : nacos registry, nacos-payment-provider register failed...NacosRegistration{nacosDiscoveryProperties=NacosDiscoveryProperties{serverAddr=\'wsy.oopsw.top:1111\', endpoint=\'\', namespace=\'\', watchDelay=30000, logName=\'\', service=\'nacos-payment-provider\', weight=1.0, clusterName=\'DEFAULT\', namingLoadCacheAtStart=\'false\', metadata={preserved.register.source=SPRING_CLOUD}, registerEnabled=true, ip=\'10.175.6.100\', networkInterface=\'\', port=9002, secure=false, accessKey=\'\', secretKey=\'\'}},\\n\\njava.lang.IllegalStateException: failed to req API:/nacos/v1/ns/instance after all servers([wsy.oopsw.top:1111]) tried: failed to req API:wsy.oopsw.top:1111/nacos/v1/ns/instance. code:503 msg: server is DOWN now, please try again later!\\n\\tat com.alibaba.nacos.client.naming.net.NamingProxy.reqAPI(NamingProxy.java:464) ~[nacos-client-1.1.1.jar:na]\\n\\tat com.alibaba.nacos.client.naming.net.NamingProxy.reqAPI(NamingProxy.java:386) ~[nacos-client-1.1.1.jar:na]\\n\\tat com.alibaba.nacos.client.naming.net.NamingProxy.registerService(NamingProxy.java:188) ~[nacos-client-1.1.1.jar:na]\\n\\tat com.alibaba.nacos.client.naming.NacosNamingService.registerInstance(NacosNamingService.java:205) ~[nacos-client-1.1.1.jar:na]\\n\\tat com.alibaba.nacos.client.naming.NacosNamingService.registerInstance(NacosNamingService.java:184) ~[nacos-client-1.1.1.jar:na]\\n\\tat com.alibaba.cloud.nacos.registry.NacosServiceRegistry.register(NacosServiceRegistry.java:61) ~[spring-cloud-alibaba-nacos-discovery-2.1.0.RELEASE.jar:2.1.0.RELEASE]\\n\\tat org.springframework.cloud.client.serviceregistry.AbstractAutoServiceRegistration.register(AbstractAutoServiceRegistration.java:239) [spring-cloud-commons-2.2.1.RELEASE.jar:2.2.1.RELEASE]\\n\\tat com.alibaba.cloud.nacos.registry.NacosAutoServiceRegistration.register(NacosAutoServiceRegistration.java:74) [spring-cloud-alibaba-nacos-discovery-2.1.0.RELEASE.jar:2.1.0.RELEASE]\\n\\tat org.springframework.cloud.client.serviceregistry.AbstractAutoServiceRegistration.start(AbstractAutoServiceRegistration.java:138) [spring-cloud-commons-2.2.1.RELEASE.jar:2.2.1.RELEASE]\\n\\tat org.springframework.cloud.client.serviceregistry.AbstractAutoServiceRegistration.bind(AbstractAutoServiceRegistration.java:101) [spring-cloud-commons-2.2.1.RELEASE.jar:2.2.1.RELEASE]\\n\\tat org.springframework.cloud.client.serviceregistry.AbstractAutoServiceRegistration.onApplicationEvent(AbstractAutoServiceRegistration.java:88) [spring-cloud-commons-2.2.1.RELEASE.jar:2.2.1.RELEASE]\\n\\tat org.springframework.cloud.client.serviceregistry.AbstractAutoServiceRegistration.onApplicationEvent(AbstractAutoServiceRegistration.java:47) [spring-cloud-commons-2.2.1.RELEASE.jar:2.2.1.RELEASE]\\n\\tat org.springframework.context.event.SimpleApplicationEventMulticaster.doInvokeListener(SimpleApplicationEventMulticaster.java:172) [spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]\\n\\tat org.springframework.context.event.SimpleApplicationEventMulticaster.invokeListener(SimpleApplicationEventMulticaster.java:165) [spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]\\n\\tat org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:139) [spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]\\n\\tat org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:403) [spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]\\n\\tat org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:360) [spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]\\n\\tat org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.finishRefresh(ServletWebServerApplicationContext.java:165) [spring-boot-2.2.2.RELEASE.jar:2.2.2.RELEASE]\\n\\tat org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:553) [spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]\\n\\tat org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:141) [spring-boot-2.2.2.RELEASE.jar:2.2.2.RELEASE]\\n\\tat org.springframework.boot.SpringApplication.refresh(SpringApplication.java:747) [spring-boot-2.2.2.RELEASE.jar:2.2.2.RELEASE]\\n\\tat org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:397) [spring-boot-2.2.2.RELEASE.jar:2.2.2.RELEASE]\\n\\tat org.springframework.boot.SpringApplication.run(SpringApplication.java:315) [spring-boot-2.2.2.RELEASE.jar:2.2.2.RELEASE]\\n\\tat org.springframework.boot.SpringApplication.run(SpringApplication.java:1226) [spring-boot-2.2.2.RELEASE.jar:2.2.2.RELEASE]\\n\\tat org.springframework.boot.SpringApplication.run(SpringApplication.java:1215) [spring-boot-2.2.2.RELEASE.jar:2.2.2.RELEASE]\\n\\tat com.wsy.springcloud.AlibabaProviderApplication.main(AlibabaProviderApplication.java:15) [classes/:na]\\n\\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_73]\\n\\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_73]\\n\\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_73]\\n\\tat java.lang.reflect.Method.invoke(Method.java:497) ~[na:1.8.0_73]\\n\\tat org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49) [spring-boot-devtools-2.2.2.RELEASE.jar:2.2.2.RELEASE]\\n```\\n\\n像阿里云、腾讯云这种云服务器, 会提供一个外网ip和内网ip, 访问外网ip时会指向对应的内网ip来访问到该服务器, 由于nacos集群内部是指定的使用网卡ip地址来进行通信,但是由于三台服务器各自的内网ip不在同一网段, 所以造成无法通信, 也会造成以下问题\\n\\n注册服务:\\n\\n```\\ncode:503 msg: server is STARTING now, please try again later!\\n```\\n\\nnaming-raft.log 日志:\\n\\n```\\n2019-05-15 00:02:00,000 WARN [IS LEADER] no leader is available now!\\n```\\n\\n这时只要修改启动参数, 设置本机ip地址就可以了\\n修改 nacos/bin/startup.sh 文件\\n找到 JVM Configuration 这部分, 在集群参数里增加 -Dnacos.server.ip=xx\\n\\n```sh\\n#===========================================================================================\\n# JVM Configuration\\n#===========================================================================================\\n\\n# 单机模式对应的启动参数\\nif [[ \\\"${MODE}\\\" == \\\"standalone\\\" ]]; then\\n    JAVA_OPT=\\\"${JAVA_OPT} -Xms512m -Xmx512m -Xmn256m\\\"\\n    JAVA_OPT=\\\"${JAVA_OPT} -Dnacos.standalone=true\\\"\\nelse\\n# 集群模式对应的启动参数\\n    JAVA_OPT=\\\"${JAVA_OPT} -server -Xms2g -Xmx2g -Xmn1g -XX:MetaspaceSize=128m -XX:MaxMetaspaceSize=320m\\\"\\n    JAVA_OPT=\\\"${JAVA_OPT} -XX:-OmitStackTraceInFastThrow -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=${BASE_DIR}/logs/java_heapdump.hprof\\\"\\n    JAVA_OPT=\\\"${JAVA_OPT} -XX:-UseLargePages\\\"\\n    \\n    # *新增以下参数设置本机ip地址*\\n    JAVA_OPT=\\\"${JAVA_OPT} -Dnacos.server.ip=本机ip\\\"\\n\\nfi\\n\\nif [[ \\\"${FUNCTION_MODE}\\\" == \\\"config\\\" ]]; then\\n    JAVA_OPT=\\\"${JAVA_OPT} -Dnacos.functionMode=config\\\"\\nelif [[ \\\"${FUNCTION_MODE}\\\" == \\\"naming\\\" ]]; then\\n    JAVA_OPT=\\\"${JAVA_OPT} -Dnacos.functionMode=naming\\\"\\nfi\\n\\n```\\n\\n参考博客：https://www.freesion.com/article/33101142210/\\n\\n服务注册时报BadRequest400 问题暂时还未解决\\n\\n```text\\ncom.alibaba.nacos.api.exception.NacosException: failed to req API:/nacos/v1/ns/instance after all servers([wsy.oopsw.top:1111]) tried: ErrCode:400, ErrMsg:<html><body><h1>Whitelabel Error Page</h1><p>This application has no explicit mapping for /error, so you are seeing this as a fallback.</p><div id=\'created\'>Mon Nov 30 01:33:45 CST 2020</div><div>There was an unexpected error (type=Bad Request, status=400).</div><div>receive invalid redirect request from peer 172.20.9.153</div></body></html>\\n```\\n\\n#############################################################\\n\\n问题已解决，是nacos版本的问题，据群里老哥解释说是nacos需要使用与之对应的SpringCloudAlibaba的版本，不然就会报错，我更换版本到1.3.2问题解决服务注册正常\",\"blogGoods\":0,\"blogId\":\"1333411378995605504\",\"blogImage\":\"http://808km.top/blog/img/img/default/1333411206555185152\",\"blogRead\":37,\"blogRemark\":\"nacos集群环境搭建\",\"blogTitle\":\"nacos集群环境搭建\",\"blogType\":20,\"createdTime\":1606745021000,\"typeName\":\"nacos\",\"updateTime\":1606906680000,\"version\":36},\"msg\":\"阅读成功\"}', '127.0.0.1', '2020-12-03 12:49:36', NULL);
INSERT INTO `bl_log` VALUES (2683, '阅读博客', '/blog/read/1322169187161767936', '[1322169187161767936]', 1, NULL, 'PUT', 267, '{\"code\":20000,\"data\":{\"blogCollection\":0,\"blogComment\":0,\"blogContent\":\"# Dubbo的超时问题\\nDubbo如果不设置timeout属性的话，默认会有一个1000ms的超时时间，当你超过这个值的时候dubbo就会抛出TimeOutException\\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201030210230916.png#pic_center)\\n而我在Controller里使用了hystrix做了熔断保护\\n\\n```java\\n    /**\\n     * 入库操作\\n     * @param purchaseId 采购单id\\n     * @return 统一返回类型\\n     */\\n    @HystrixCommand\\n    @PostMapping(\\\"doInventory/{purchaseId}\\\")\\n    public AjaxResult doInventory(@PathVariable String purchaseId) {\\n        return AjaxResult.toAjax(this.purchaseService.doInventory(purchaseId, ShiroSecurityUtils.getCurrentSimpleUser()));\\n    }\\n```\\n\\n其中熔断保护后执行的方法来自于Controller里集成的BaseController\\n\\n```java\\n/**\\n * @author wsy\\n * @date 2020-10-29 9:33\\n * @DefaultProperties 配置熔断保护的方法\\n */\\n@DefaultProperties(defaultFallback = \\\"fullBack\\\")\\npublic class BaseController {\\n    public AjaxResult fullBack() {\\n        return AjaxResult.toAjax(-1);\\n    }\\n}\\n```\\nfullBack方法的返回值就是给我的统一返回类返回一个-1值\\n我的统一返回类中会认为-1值是错误信息， 所以会返回操作失败\\n```java\\n    /**\\n     * 返回错误消息\\n     *\\n     * @param rows 返回行数\\n     * @return 添加修改删除转化信息\\n     */\\n    public static AjaxResult toAjax(int rows) {\\n        return rows > 0 ? AjaxResult.success() : AjaxResult.fail();\\n    }\\n ```\\n 在我今天3个小时的一步步排查异常下终于找到了错误，就是Dubbo的超时机制，在我没有设置超时时间的情况下给我一直在抛异常，导致服务返回的code一直是操作失败\\n# 优先级选择\\n在dubbo中如果provider和consumer都配置了相同的一个属性，比如本文分析的timeout，其实是有一个优先级的，优先级：\\n**consumer方法配置 > provider方法配置 > consumer接口配置 > provider接口配置 > consumer全局配置 > provider全局配置。**\\n\\n参考博客：[https://segmentfault.com/a/1190000018924018](https://segmentfault.com/a/1190000018924018)\",\"blogGoods\":0,\"blogId\":\"1322169187161767936\",\"blogImage\":\"http://808km.top/blog/img/default.jpg\",\"blogRead\":38,\"blogTitle\":\"Dubbo超时问题\",\"blogType\":18,\"createdTime\":1604064673000,\"typeName\":\"dubbo\",\"updateTime\":1606970975000,\"version\":38},\"msg\":\"阅读成功\"}', '127.0.0.1', '2020-12-03 12:53:50', NULL);
INSERT INTO `bl_log` VALUES (2684, '阅读博客', '/blog/read/1333708609683533824', '[1333708609683533824]', 1, NULL, 'PUT', 249, '{\"code\":20000,\"data\":{\"blogCollection\":1,\"blogComment\":0,\"blogContent\":\"# 前言\\n今天在给博客更新，将session存到redis中持久化存储，正常操作是没问题的，但是后来尝试发现，在我输入的密码是错误的时候，他也创建了session，经过我的一番从尾到头的debug。。。。\\n复杂的debug过程就不贴出来了，放出问题的根源\\n在登陆时，会访问到我用来记录日志的切面,而我的记录日志方法中有一个需要获取到当前登录的用户的信息，来完善日志的字段\\n>![image.png](http://808km.top/blog/img/img/blogImg/1333703986787631104)\\n>以下是工具类中的原方法：\\n>![image.png](http://808km.top/blog/img/img/blogImg/1333704236625543168)\\n>以下是修改后的方法\\n>![image.png](http://808km.top/blog/img/img/blogImg/1333704399599419392)\\n>这就是问题的根源，因为在我登录的时候，要记录日志，然后去调用工具类，工具类去获取session，如果没有getSession(false)的话，就会判断session是否存在，如果不存在的话就会自动创建session，这就是为什么明明密码错了还会创建session的原因\",\"blogGoods\":1,\"blogId\":\"1333708609683533824\",\"blogImage\":\"http://808km.top/blog/img/default.jpg\",\"blogRead\":11,\"blogRemark\":\"shiro+redis整合实现session持久化登陆失败时也会生成session问题\",\"blogTitle\":\"shiro+redis整合实现session持久化登陆失败时也会生成session问题\",\"blogType\":6,\"createdTime\":1606815886000,\"typeName\":\"Java\",\"updateTime\":1606868833000,\"version\":1},\"msg\":\"阅读成功\"}', '127.0.0.1', '2020-12-03 12:55:58', NULL);
INSERT INTO `bl_log` VALUES (2685, '阅读博客', '/blog/read/1333708609683533824', '[1333708609683533824]', 1, NULL, 'PUT', 1219, '{\"code\":20000,\"data\":{\"blogCollection\":1,\"blogComment\":0,\"blogContent\":\"# 前言\\n今天在给博客更新，将session存到redis中持久化存储，正常操作是没问题的，但是后来尝试发现，在我输入的密码是错误的时候，他也创建了session，经过我的一番从尾到头的debug。。。。\\n复杂的debug过程就不贴出来了，放出问题的根源\\n在登陆时，会访问到我用来记录日志的切面,而我的记录日志方法中有一个需要获取到当前登录的用户的信息，来完善日志的字段\\n>![image.png](http://808km.top/blog/img/img/blogImg/1333703986787631104)\\n>以下是工具类中的原方法：\\n>![image.png](http://808km.top/blog/img/img/blogImg/1333704236625543168)\\n>以下是修改后的方法\\n>![image.png](http://808km.top/blog/img/img/blogImg/1333704399599419392)\\n>这就是问题的根源，因为在我登录的时候，要记录日志，然后去调用工具类，工具类去获取session，如果没有getSession(false)的话，就会判断session是否存在，如果不存在的话就会自动创建session，这就是为什么明明密码错了还会创建session的原因\",\"blogGoods\":1,\"blogId\":\"1333708609683533824\",\"blogImage\":\"http://808km.top/blog/img/default.jpg\",\"blogRead\":12,\"blogRemark\":\"shiro+redis整合实现session持久化登陆失败时也会生成session问题\",\"blogTitle\":\"shiro+redis整合实现session持久化登陆失败时也会生成session问题\",\"blogType\":6,\"createdTime\":1606815886000,\"typeName\":\"Java\",\"updateTime\":1606971357000,\"version\":1},\"msg\":\"阅读成功\"}', '127.0.0.1', '2020-12-03 13:27:00', NULL);
INSERT INTO `bl_log` VALUES (2686, '阅读博客', '/blog/read/1333708609683533824', '[1333708609683533824]', 1, NULL, 'PUT', 714, '{\"code\":20000,\"data\":{\"blogCollection\":1,\"blogComment\":0,\"blogContent\":\"# 前言\\n今天在给博客更新，将session存到redis中持久化存储，正常操作是没问题的，但是后来尝试发现，在我输入的密码是错误的时候，他也创建了session，经过我的一番从尾到头的debug。。。。\\n复杂的debug过程就不贴出来了，放出问题的根源\\n在登陆时，会访问到我用来记录日志的切面,而我的记录日志方法中有一个需要获取到当前登录的用户的信息，来完善日志的字段\\n>![image.png](http://808km.top/blog/img/img/blogImg/1333703986787631104)\\n>以下是工具类中的原方法：\\n>![image.png](http://808km.top/blog/img/img/blogImg/1333704236625543168)\\n>以下是修改后的方法\\n>![image.png](http://808km.top/blog/img/img/blogImg/1333704399599419392)\\n>这就是问题的根源，因为在我登录的时候，要记录日志，然后去调用工具类，工具类去获取session，如果没有getSession(false)的话，就会判断session是否存在，如果不存在的话就会自动创建session，这就是为什么明明密码错了还会创建session的原因\",\"blogGoods\":1,\"blogId\":\"1333708609683533824\",\"blogImage\":\"http://808km.top/blog/img/default.jpg\",\"blogRead\":13,\"blogRemark\":\"shiro+redis整合实现session持久化登陆失败时也会生成session问题\",\"blogTitle\":\"shiro+redis整合实现session持久化登陆失败时也会生成session问题\",\"blogType\":6,\"createdTime\":1606815886000,\"typeName\":\"Java\",\"updateTime\":1606973219000,\"version\":1},\"msg\":\"阅读成功\"}', '127.0.0.1', '2020-12-03 13:27:45', NULL);
INSERT INTO `bl_log` VALUES (2687, '阅读博客', '/blog/read/1333411378995605504', '[1333411378995605504]', 1, NULL, 'PUT', 534, '{\"code\":20000,\"data\":{\"blogCollection\":0,\"blogComment\":0,\"blogContent\":\"## 预备环境准备\\n\\nNacos 依赖 [Java](https://docs.oracle.com/cd/E19182-01/820-7851/inst_cli_jdk_javahome_t/) 环境来运行。如果您是从代码开始构建并运行Nacos，还需要为此配置 [Maven](https://maven.apache.org/index.html)环境，请确保是在以下版本环境中安装使用:\\n\\n1. 64 bit OS，支持 Linux/Unix/Mac/Windows，推荐选用 Linux/Unix/Mac。\\n2. 64 bit JDK 1.8+；[下载](http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html) & [配置](https://docs.oracle.com/cd/E19182-01/820-7851/inst_cli_jdk_javahome_t/)。\\n3. Maven 3.2.x+；[下载](https://maven.apache.org/download.cgi) & [配置](https://maven.apache.org/settings.html)。\\n\\n## 下载nacos安装包\\n\\nhttps://github.com/alibaba/nacos/releases/tag/1.4.0\\n\\n>  ![在这里插入图片描述](https://img-blog.csdnimg.cn/20201130205557917.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ0ODU5OA==,size_16,color_FFFFFF,t_70)\\n\\n\\nlinux选择第一个\\n\\nwindows选择第二个\\n\\n\\n\\n## 搭建环境\\n\\n### 集群模式部署\\n\\n这个快速开始手册是帮忙您快速在你的电脑上，下载安装并使用Nacos，部署生产使用的集群模式。\\n\\n### 集群部署架构图\\n\\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201130205609797.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ0ODU5OA==,size_16,color_FFFFFF,t_70)\\n\\n\\nVIP:虚拟ip\\n\\n因此开源的时候推荐用户把所有服务列表放到一个vip下面，然后挂到一个域名下面\\n\\nhttp://ip1:port/openAPI 直连ip模式，机器挂则需要修改ip才可以使用。\\n\\nhttp://VIP:port/openAPI 挂载VIP模式，直连vip即可，下面挂server真实ip，可读性不好。\\n\\nhttp://nacos.com:port/openAPI 域名 + VIP模式，可读性好，而且换ip方便，推荐模式\\n\\n### 创建目录\\n\\n该目录存放nacos集群\\n\\n```sh\\nmkdir /usr/local/nacos\\n```\\n\\n### 上传nacos\\n\\n> ![在这里插入图片描述](https://img-blog.csdnimg.cn/20201130205630233.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ0ODU5OA==,size_16,color_FFFFFF,t_70)\\n\\n### 解压nacos\\n\\n```sh\\ntar -zxvf nacos-server-1.4.0.tar.gz\\n```\\n\\n### 创建nacos持久化数据库\\n\\n首先使用navicat连接mysql数据库，然后创建数据库\\n\\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201130205643439.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ0ODU5OA==,size_16,color_FFFFFF,t_70)\\n\\n\\n新建数据库后导入SQL脚本即可\\n\\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201130205705669.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ0ODU5OA==,size_16,color_FFFFFF,t_70)\\n\\n红色框选那栏填写你的SQL脚本位置，SQL脚本在nacos文件夹下的conf下\\n\\n### nacos文件夹改名\\n\\n将文件夹名改为nacos3333代表这个nacos的端口号是3333\\n\\n```sh\\nmv nacos nacos3333\\n```\\n\\n### 配置修改\\n\\n首先进入到配置目录\\n\\n```sh\\ncd /usr/local/nacos/nacos3333/conf\\n```\\n\\n>![在这里插入图片描述](https://img-blog.csdnimg.cn/2020113020572431.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ0ODU5OA==,size_16,color_FFFFFF,t_70)\\n\\n\\n在更改配置之前先备份配置\\n\\n\\n\\n```sh\\ncp application.properties application.properties.example\\n```\\n\\n```sh\\ncp cluster.conf.example cluster.conf\\n```\\n\\n### 集群配置\\n\\n```sh\\nvim cluster.conf\\n```\\n\\n>![在这里插入图片描述](https://img-blog.csdnimg.cn/20201130205739435.png)\\n\\n>\\n> 注意这里不能填写localhost 或者127.0.0.1，这里如果是在本机搭建可以查看本机ip后填写\\n>\\n> ```sh\\n> hostname -i\\n> ```\\n>\\n>![在这里插入图片描述](https://img-blog.csdnimg.cn/20201130205749116.png)\\n\\n\\n### nacos配置\\n\\n```sh\\nvim application.properties\\n```\\n\\n```properties\\n\\n#*************** Spring Boot Related Configurations ***************#\\n### Default web context path:\\nserver.servlet.contextPath=/nacos\\n### Default web server port:\\nserver.port=3333\\n\\n#*************** Network Related Configurations ***************#\\n### If prefer hostname over ip for Nacos server addresses in cluster.conf:\\n# nacos.inetutils.prefer-hostname-over-ip=false\\n\\n### Specify local server\'s IP:\\n# nacos.inetutils.ip-address=\\n\\n\\n#*************** Config Module Related Configurations ***************#\\n### If use MySQL as datasource:\\nspring.datasource.platform=mysql\\n\\n### Count of DB:\\ndb.num=1\\n\\n### Connect URL of DB:\\ndb.url.0=jdbc:mysql://127.0.0.1:3306/nacos_config?characterEncoding=utf8&connectTimeout=1000&socketTimeout=3000&autoReconnect=true&useUnicode=true&useSSL=false&serverTimezone=UTC\\ndb.user=root\\ndb.password=123456\\n\\n\\n#*************** Naming Module Related Configurations ***************#\\n### Data dispatch task execution period in milliseconds:\\n# nacos.naming.distro.taskDispatchPeriod=200\\n\\n### Data count of batch sync task:\\n# nacos.naming.distro.batchSyncKeyCount=1000\\n\\n### Retry delay in milliseconds if sync task failed:\\n# nacos.naming.distro.syncRetryDelay=5000\\n\\n### If enable data warmup. If set to false, the server would accept request without local data preparation:\\n# nacos.naming.data.warmup=true\\n\\n### If enable the instance auto expiration, kind like of health check of instance:\\n# nacos.naming.expireInstance=true\\n\\nnacos.naming.empty-service.auto-clean=true\\nnacos.naming.empty-service.clean.initial-delay-ms=50000\\nnacos.naming.empty-service.clean.period-time-ms=30000\\n\\n\\n#*************** CMDB Module Related Configurations ***************#\\n### The interval to dump external CMDB in seconds:\\n# nacos.cmdb.dumpTaskInterval=3600\\n\\n### The interval of polling data change event in seconds:\\n# nacos.cmdb.eventTaskInterval=10\\n\\n### The interval of loading labels in seconds:\\n# nacos.cmdb.labelTaskInterval=300\\n\\n### If turn on data loading task:\\n# nacos.cmdb.loadDataAtStart=false\\n\\n\\n#*************** Metrics Related Configurations ***************#\\n### Metrics for prometheus\\n#management.endpoints.web.exposure.include=*\\n\\n### Metrics for elastic search\\nmanagement.metrics.export.elastic.enabled=false\\n#management.metrics.export.elastic.host=http://localhost:9200\\n\\n### Metrics for influx\\nmanagement.metrics.export.influx.enabled=false\\n#management.metrics.export.influx.db=springboot\\n#management.metrics.export.influx.uri=http://localhost:8086\\n#management.metrics.export.influx.auto-create-db=true\\n#management.metrics.export.influx.consistency=one\\n#management.metrics.export.influx.compressed=true\\n\\n\\n#*************** Access Log Related Configurations ***************#\\n### If turn on the access log:\\nserver.tomcat.accesslog.enabled=true\\n\\n### The access log pattern:\\nserver.tomcat.accesslog.pattern=%h %l %u %t \\\"%r\\\" %s %b %D %{User-Agent}i %{Request-Source}i\\n\\n### The directory of access log:\\nserver.tomcat.basedir=\\n\\n\\n#*************** Access Control Related Configurations ***************#\\n### If enable spring security, this option is deprecated in 1.2.0:\\n#spring.security.enabled=false\\n\\n### The ignore urls of auth, is deprecated in 1.2.0:\\nnacos.security.ignore.urls=/,/error,/**/*.css,/**/*.js,/**/*.html,/**/*.map,/**/*.svg,/**/*.png,/**/*.ico,/console-fe/public/**,/v1/auth/**,/v1/console/health/**,/actuator/**,/v1/console/server/**\\n\\n### The auth system to use, currently only \'nacos\' is supported:\\nnacos.core.auth.system.type=nacos\\n\\n### If turn on auth system:\\nnacos.core.auth.enabled=false\\n\\n### The token expiration in seconds:\\nnacos.core.auth.default.token.expire.seconds=18000\\n\\n### The default token:\\nnacos.core.auth.default.token.secret.key=SecretKey012345678901234567890123456789012345678901234567890123456789\\n\\n### Turn on/off caching of auth information. By turning on this switch, the update of auth information would have a 15 seconds delay.\\nnacos.core.auth.caching.enabled=true\\n\\n\\n#*************** Istio Related Configurations ***************#\\n### If turn on the MCP server:\\nnacos.istio.mcp.server.enabled=false\\n\\n\\n\\n###*************** Add from 1.3.0 ***************###\\n\\n\\n#*************** Core Related Configurations ***************#\\n\\n### set the WorkerID manually\\n# nacos.core.snowflake.worker-id=\\n\\n### Member-MetaData\\n# nacos.core.member.meta.site=\\n# nacos.core.member.meta.adweight=\\n# nacos.core.member.meta.weight=\\n\\n### MemberLookup\\n### Addressing pattern category, If set, the priority is highest\\n# nacos.core.member.lookup.type=[file,address-server]\\n## Set the cluster list with a configuration file or command-line argument\\n# nacos.member.list=192.168.16.101:8847?raft_port=8807,192.168.16.101?raft_port=8808,192.168.16.101:8849?raft_port=8809\\n## for AddressServerMemberLookup\\n# Maximum number of retries to query the address server upon initialization\\n# nacos.core.address-server.retry=5\\n## Server domain name address of [address-server] mode\\n# address.server.domain=jmenv.tbsite.net\\n## Server port of [address-server] mode\\n# address.server.port=8080\\n## Request address of [address-server] mode\\n# address.server.url=/nacos/serverlist\\n\\n#*************** JRaft Related Configurations ***************#\\n\\n### Sets the Raft cluster election timeout, default value is 5 second\\n# nacos.core.protocol.raft.data.election_timeout_ms=5000\\n### Sets the amount of time the Raft snapshot will execute periodically, default is 30 minute\\n# nacos.core.protocol.raft.data.snapshot_interval_secs=30\\n### raft internal worker threads\\n# nacos.core.protocol.raft.data.core_thread_num=8\\n### Number of threads required for raft business request processing\\n# nacos.core.protocol.raft.data.cli_service_thread_num=4\\n### raft linear read strategy. Safe linear reads are used by default, that is, the Leader tenure is confirmed by heartbeat\\n# nacos.core.protocol.raft.data.read_index_type=ReadOnlySafe\\n### rpc request timeout, default 5 seconds\\n# nacos.core.protocol.raft.data.rpc_request_timeout_ms=5000\\n\\n```\\n\\n这是我的整个application.properties文件,其中主要修改的地方有两处\\n\\n修改端口号\\n\\n```properties\\n### Default web server port:\\nserver.port=3333\\n```\\n\\n修改数据库为mysql并配置mysql的url\\n\\n```properties\\n#*************** Config Module Related Configurations ***************#\\n### If use MySQL as datasource:\\n spring.datasource.platform=mysql\\n\\n### Count of DB:\\n db.num=1\\n\\n### Connect URL of DB:\\ndb.url.0=jdbc:mysql://127.0.0.1:3306/nacos_config?characterEncoding=utf8&connectTimeout=1000&socketTimeout=3000&autoReconnect=true&useUnicode=true&useSSL=false&serverTimezone=UTC\\ndb.user=root\\ndb.password=123456\\n```\\n\\n这时候配置就差不多啦可以开始启动服务了\\n\\n```sh\\n# 进入到nacos3333的bin目录\\ncd /usr/local/nacos/nacos3333/bin\\n# 执行启动脚本 因为nacos启动脚本默认就是使用集群模式所以不用更改\\n./startup.sh\\n```\\n\\n这时候我们可以查看nacos的启动状态\\n\\n```sh\\nps -ef | grep nacos\\n```\\n\\n> ![在这里插入图片描述](https://img-blog.csdnimg.cn/20201130205818481.png)\\n\\n\\n这时候我们应该就可以通过 服务器ip:3333/nacos访问到nacos\\n\\n> ![在这里插入图片描述](https://img-blog.csdnimg.cn/20201130205828641.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ0ODU5OA==,size_16,color_FFFFFF,t_70)\\n\\n\\n成功的访问到了nacos代表成功了。\\n\\n### nacos集群启动\\n\\n这时候我们就可以回到nacos目录下拷贝之前的nacos3333文件夹来启动nacos4444和nacos5555\\n\\n```sh\\ncd /usr/local/nacos\\n# cp -r 代表递归拷贝\\ncp -r nacos3333 nacos4444\\ncp -r nacos3333 nacos5555\\n```\\n\\n这时候再分别将nacos4444和nacos5555文件夹下的conf目录中的application.properties中的server.port更改为3333、4444然后再启动，这里我就不再演示了，和之前配置一样。\\n\\n随后我们再依次启动nacos4444，nacos5555\\n\\n###########################################################################\\n\\n启动后发现问题，nacos5555启动不起来，查看日志得到发现内存不足，nacos脚本默认给的最大内存是2G，我们可以去改小一点。\\n\\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201130205845619.png)\\n\\n原红框中限制的内存是2g 最小1g 适当该小一点[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传\\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201130205903628.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ0ODU5OA==,size_16,color_FFFFFF,t_70)\\n\\n\\n然后再依次启动三个服务\\n\\n登录任意一个nacos可以看到如下页面即集群启动成功\\n\\n### nginx配置\\n\\n这配置nginx负载均衡访问nacos\\n\\n```sh\\ncd /usr/local/nginx/conf\\nvim nginx.conf\\n```\\n\\n```conf\\n#user  nobody;\\nworker_processes  1;\\n\\n#error_log  logs/error.log;\\n#error_log  logs/error.log  notice;\\n#error_log  logs/error.log  info;\\n\\n#pid        logs/nginx.pid;\\n\\n\\nevents {\\n    worker_connections  1024;\\n}\\n\\n\\nhttp {\\n    include       mime.types;\\n    default_type  application/octet-stream;\\n\\n    #log_format  main  \'$remote_addr - $remote_user [$time_local] \\\"$request\\\" \'\\n    #                  \'$status $body_bytes_sent \\\"$http_referer\\\" \'\\n    #                  \'\\\"$http_user_agent\\\" \\\"$http_x_forwarded_for\\\"\';\\n\\n    #access_log  logs/access.log  main;\\n\\n    sendfile        on;\\n    #tcp_nopush     on;\\n\\n    #keepalive_timeout  0;\\n    keepalive_timeout  65;\\n\\n    #gzip  on;\\n\\n    #配置刚刚搭建好的nacos集群\\n    upstream cluster{                                                        \\n\\t    server 127.0.0.1:3333;\\n\\t    server 127.0.0.1:4444;\\n\\t    server 127.0.0.1:5555;\\n\\t}\\n\\n    server {\\n        listen       1111;\\n        server_name  nacos_cluster;\\n\\n        #charset koi8-r;\\n\\n        #access_log  logs/host.access.log  main;\\n\\n        location / {\\n            #root   html;\\n            #index  index.html index.htm;\\n            #将所有访问/的都映射到配置好的集群\\n            proxy_pass http://cluster;\\n        }\\n\\n        #error_page  404              /404.html;\\n\\n        # redirect server error pages to the static page /50x.html\\n        #\\n        error_page   500 502 503 504  /50x.html;\\n        location = /50x.html {\\n            root   html;\\n        }\\n\\n        # proxy the PHP scripts to Apache listening on 127.0.0.1:80\\n        #\\n        #location ~ \\\\.php$ {\\n        #    proxy_pass   http://127.0.0.1;\\n        #}\\n\\n        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000\\n        #\\n        #location ~ \\\\.php$ {\\n        #    root           html;\\n        #    fastcgi_pass   127.0.0.1:9000;\\n        #    fastcgi_index  index.php;\\n        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;\\n        #    include        fastcgi_params;\\n        #}\\n\\n        # deny access to .htaccess files, if Apache\'s document root\\n        # concurs with nginx\'s one\\n        #\\n        #location ~ /\\\\.ht {\\n        #    deny  all;\\n        #}\\n    }\\n\\n\\n    # another virtual host using mix of IP-, name-, and port-based configuration\\n    #\\n    #server {\\n    #    listen       8000;\\n    #    listen       somename:8080;\\n    #    server_name  somename  alias  another.alias;\\n\\n    #    location / {\\n    #        root   html;\\n    #        index  index.html index.htm;\\n    #    }\\n    #}\\n\\n\\n    # HTTPS server\\n    #\\n    #server {\\n    #    listen       443 ssl;\\n    #    server_name  localhost;\\n\\n    #    ssl_certificate      cert.pem;\\n    #    ssl_certificate_key  cert.key;\\n\\n    #    ssl_session_cache    shared:SSL:1m;\\n    #    ssl_session_timeout  5m;\\n\\n    #    ssl_ciphers  HIGH:!aNULL:!MD5;\\n    #    ssl_prefer_server_ciphers  on;\\n\\n    #    location / {\\n    #        root   html;\\n    #        index  index.html index.htm;\\n    #    }\\n    #}\\n}\\n```\\n\\n### nginx启动\\n\\n```sh\\ncd /usr/local/nginx/sbin\\n./nginx\\n```\\n\\n这时候我们就可以通过服务器ip地址:1111/nacos 来访问nacos集群了\\n\\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201130205927229.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ0ODU5OA==,size_16,color_FFFFFF,t_70)\\n\\n\\n关于使用NACOS集群遇到问题 -- CODE:503 MSG: SERVER IS STARTING NOW, PLEASE TRY AGAIN LATER!\\n\\n这时又出现了问题……在服务提供者注册服务时会报错\\n\\n```text\\n2020-11-30 00:36:59.492 ERROR 13140 --- [  restartedMain] c.a.c.n.registry.NacosServiceRegistry    : nacos registry, nacos-payment-provider register failed...NacosRegistration{nacosDiscoveryProperties=NacosDiscoveryProperties{serverAddr=\'wsy.oopsw.top:1111\', endpoint=\'\', namespace=\'\', watchDelay=30000, logName=\'\', service=\'nacos-payment-provider\', weight=1.0, clusterName=\'DEFAULT\', namingLoadCacheAtStart=\'false\', metadata={preserved.register.source=SPRING_CLOUD}, registerEnabled=true, ip=\'10.175.6.100\', networkInterface=\'\', port=9002, secure=false, accessKey=\'\', secretKey=\'\'}},\\n\\njava.lang.IllegalStateException: failed to req API:/nacos/v1/ns/instance after all servers([wsy.oopsw.top:1111]) tried: failed to req API:wsy.oopsw.top:1111/nacos/v1/ns/instance. code:503 msg: server is DOWN now, please try again later!\\n\\tat com.alibaba.nacos.client.naming.net.NamingProxy.reqAPI(NamingProxy.java:464) ~[nacos-client-1.1.1.jar:na]\\n\\tat com.alibaba.nacos.client.naming.net.NamingProxy.reqAPI(NamingProxy.java:386) ~[nacos-client-1.1.1.jar:na]\\n\\tat com.alibaba.nacos.client.naming.net.NamingProxy.registerService(NamingProxy.java:188) ~[nacos-client-1.1.1.jar:na]\\n\\tat com.alibaba.nacos.client.naming.NacosNamingService.registerInstance(NacosNamingService.java:205) ~[nacos-client-1.1.1.jar:na]\\n\\tat com.alibaba.nacos.client.naming.NacosNamingService.registerInstance(NacosNamingService.java:184) ~[nacos-client-1.1.1.jar:na]\\n\\tat com.alibaba.cloud.nacos.registry.NacosServiceRegistry.register(NacosServiceRegistry.java:61) ~[spring-cloud-alibaba-nacos-discovery-2.1.0.RELEASE.jar:2.1.0.RELEASE]\\n\\tat org.springframework.cloud.client.serviceregistry.AbstractAutoServiceRegistration.register(AbstractAutoServiceRegistration.java:239) [spring-cloud-commons-2.2.1.RELEASE.jar:2.2.1.RELEASE]\\n\\tat com.alibaba.cloud.nacos.registry.NacosAutoServiceRegistration.register(NacosAutoServiceRegistration.java:74) [spring-cloud-alibaba-nacos-discovery-2.1.0.RELEASE.jar:2.1.0.RELEASE]\\n\\tat org.springframework.cloud.client.serviceregistry.AbstractAutoServiceRegistration.start(AbstractAutoServiceRegistration.java:138) [spring-cloud-commons-2.2.1.RELEASE.jar:2.2.1.RELEASE]\\n\\tat org.springframework.cloud.client.serviceregistry.AbstractAutoServiceRegistration.bind(AbstractAutoServiceRegistration.java:101) [spring-cloud-commons-2.2.1.RELEASE.jar:2.2.1.RELEASE]\\n\\tat org.springframework.cloud.client.serviceregistry.AbstractAutoServiceRegistration.onApplicationEvent(AbstractAutoServiceRegistration.java:88) [spring-cloud-commons-2.2.1.RELEASE.jar:2.2.1.RELEASE]\\n\\tat org.springframework.cloud.client.serviceregistry.AbstractAutoServiceRegistration.onApplicationEvent(AbstractAutoServiceRegistration.java:47) [spring-cloud-commons-2.2.1.RELEASE.jar:2.2.1.RELEASE]\\n\\tat org.springframework.context.event.SimpleApplicationEventMulticaster.doInvokeListener(SimpleApplicationEventMulticaster.java:172) [spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]\\n\\tat org.springframework.context.event.SimpleApplicationEventMulticaster.invokeListener(SimpleApplicationEventMulticaster.java:165) [spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]\\n\\tat org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:139) [spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]\\n\\tat org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:403) [spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]\\n\\tat org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:360) [spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]\\n\\tat org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.finishRefresh(ServletWebServerApplicationContext.java:165) [spring-boot-2.2.2.RELEASE.jar:2.2.2.RELEASE]\\n\\tat org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:553) [spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]\\n\\tat org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:141) [spring-boot-2.2.2.RELEASE.jar:2.2.2.RELEASE]\\n\\tat org.springframework.boot.SpringApplication.refresh(SpringApplication.java:747) [spring-boot-2.2.2.RELEASE.jar:2.2.2.RELEASE]\\n\\tat org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:397) [spring-boot-2.2.2.RELEASE.jar:2.2.2.RELEASE]\\n\\tat org.springframework.boot.SpringApplication.run(SpringApplication.java:315) [spring-boot-2.2.2.RELEASE.jar:2.2.2.RELEASE]\\n\\tat org.springframework.boot.SpringApplication.run(SpringApplication.java:1226) [spring-boot-2.2.2.RELEASE.jar:2.2.2.RELEASE]\\n\\tat org.springframework.boot.SpringApplication.run(SpringApplication.java:1215) [spring-boot-2.2.2.RELEASE.jar:2.2.2.RELEASE]\\n\\tat com.wsy.springcloud.AlibabaProviderApplication.main(AlibabaProviderApplication.java:15) [classes/:na]\\n\\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_73]\\n\\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_73]\\n\\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_73]\\n\\tat java.lang.reflect.Method.invoke(Method.java:497) ~[na:1.8.0_73]\\n\\tat org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49) [spring-boot-devtools-2.2.2.RELEASE.jar:2.2.2.RELEASE]\\n```\\n\\n像阿里云、腾讯云这种云服务器, 会提供一个外网ip和内网ip, 访问外网ip时会指向对应的内网ip来访问到该服务器, 由于nacos集群内部是指定的使用网卡ip地址来进行通信,但是由于三台服务器各自的内网ip不在同一网段, 所以造成无法通信, 也会造成以下问题\\n\\n注册服务:\\n\\n```\\ncode:503 msg: server is STARTING now, please try again later!\\n```\\n\\nnaming-raft.log 日志:\\n\\n```\\n2019-05-15 00:02:00,000 WARN [IS LEADER] no leader is available now!\\n```\\n\\n这时只要修改启动参数, 设置本机ip地址就可以了\\n修改 nacos/bin/startup.sh 文件\\n找到 JVM Configuration 这部分, 在集群参数里增加 -Dnacos.server.ip=xx\\n\\n```sh\\n#===========================================================================================\\n# JVM Configuration\\n#===========================================================================================\\n\\n# 单机模式对应的启动参数\\nif [[ \\\"${MODE}\\\" == \\\"standalone\\\" ]]; then\\n    JAVA_OPT=\\\"${JAVA_OPT} -Xms512m -Xmx512m -Xmn256m\\\"\\n    JAVA_OPT=\\\"${JAVA_OPT} -Dnacos.standalone=true\\\"\\nelse\\n# 集群模式对应的启动参数\\n    JAVA_OPT=\\\"${JAVA_OPT} -server -Xms2g -Xmx2g -Xmn1g -XX:MetaspaceSize=128m -XX:MaxMetaspaceSize=320m\\\"\\n    JAVA_OPT=\\\"${JAVA_OPT} -XX:-OmitStackTraceInFastThrow -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=${BASE_DIR}/logs/java_heapdump.hprof\\\"\\n    JAVA_OPT=\\\"${JAVA_OPT} -XX:-UseLargePages\\\"\\n    \\n    # *新增以下参数设置本机ip地址*\\n    JAVA_OPT=\\\"${JAVA_OPT} -Dnacos.server.ip=本机ip\\\"\\n\\nfi\\n\\nif [[ \\\"${FUNCTION_MODE}\\\" == \\\"config\\\" ]]; then\\n    JAVA_OPT=\\\"${JAVA_OPT} -Dnacos.functionMode=config\\\"\\nelif [[ \\\"${FUNCTION_MODE}\\\" == \\\"naming\\\" ]]; then\\n    JAVA_OPT=\\\"${JAVA_OPT} -Dnacos.functionMode=naming\\\"\\nfi\\n\\n```\\n\\n参考博客：https://www.freesion.com/article/33101142210/\\n\\n服务注册时报BadRequest400 问题暂时还未解决\\n\\n```text\\ncom.alibaba.nacos.api.exception.NacosException: failed to req API:/nacos/v1/ns/instance after all servers([wsy.oopsw.top:1111]) tried: ErrCode:400, ErrMsg:<html><body><h1>Whitelabel Error Page</h1><p>This application has no explicit mapping for /error, so you are seeing this as a fallback.</p><div id=\'created\'>Mon Nov 30 01:33:45 CST 2020</div><div>There was an unexpected error (type=Bad Request, status=400).</div><div>receive invalid redirect request from peer 172.20.9.153</div></body></html>\\n```\\n\\n#############################################################\\n\\n问题已解决，是nacos版本的问题，据群里老哥解释说是nacos需要使用与之对应的SpringCloudAlibaba的版本，不然就会报错，我更换版本到1.3.2问题解决服务注册正常\",\"blogGoods\":0,\"blogId\":\"1333411378995605504\",\"blogImage\":\"http://808km.top/blog/img/img/default/1333411206555185152\",\"blogRead\":38,\"blogRemark\":\"nacos集群环境搭建\",\"blogTitle\":\"nacos集群环境搭建\",\"blogType\":20,\"createdTime\":1606745021000,\"typeName\":\"nacos\",\"updateTime\":1606970975000,\"version\":36},\"msg\":\"阅读成功\"}', '127.0.0.1', '2020-12-03 13:28:11', NULL);
INSERT INTO `bl_log` VALUES (2688, '阅读博客', '/blog/read/1333411378995605504', '[1333411378995605504]', 1, NULL, 'PUT', 574, '{\"code\":20000,\"data\":{\"blogCollection\":0,\"blogComment\":0,\"blogContent\":\"## 预备环境准备\\n\\nNacos 依赖 [Java](https://docs.oracle.com/cd/E19182-01/820-7851/inst_cli_jdk_javahome_t/) 环境来运行。如果您是从代码开始构建并运行Nacos，还需要为此配置 [Maven](https://maven.apache.org/index.html)环境，请确保是在以下版本环境中安装使用:\\n\\n1. 64 bit OS，支持 Linux/Unix/Mac/Windows，推荐选用 Linux/Unix/Mac。\\n2. 64 bit JDK 1.8+；[下载](http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html) & [配置](https://docs.oracle.com/cd/E19182-01/820-7851/inst_cli_jdk_javahome_t/)。\\n3. Maven 3.2.x+；[下载](https://maven.apache.org/download.cgi) & [配置](https://maven.apache.org/settings.html)。\\n\\n## 下载nacos安装包\\n\\nhttps://github.com/alibaba/nacos/releases/tag/1.4.0\\n\\n>  ![在这里插入图片描述](https://img-blog.csdnimg.cn/20201130205557917.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ0ODU5OA==,size_16,color_FFFFFF,t_70)\\n\\n\\nlinux选择第一个\\n\\nwindows选择第二个\\n\\n\\n\\n## 搭建环境\\n\\n### 集群模式部署\\n\\n这个快速开始手册是帮忙您快速在你的电脑上，下载安装并使用Nacos，部署生产使用的集群模式。\\n\\n### 集群部署架构图\\n\\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201130205609797.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ0ODU5OA==,size_16,color_FFFFFF,t_70)\\n\\n\\nVIP:虚拟ip\\n\\n因此开源的时候推荐用户把所有服务列表放到一个vip下面，然后挂到一个域名下面\\n\\nhttp://ip1:port/openAPI 直连ip模式，机器挂则需要修改ip才可以使用。\\n\\nhttp://VIP:port/openAPI 挂载VIP模式，直连vip即可，下面挂server真实ip，可读性不好。\\n\\nhttp://nacos.com:port/openAPI 域名 + VIP模式，可读性好，而且换ip方便，推荐模式\\n\\n### 创建目录\\n\\n该目录存放nacos集群\\n\\n```sh\\nmkdir /usr/local/nacos\\n```\\n\\n### 上传nacos\\n\\n> ![在这里插入图片描述](https://img-blog.csdnimg.cn/20201130205630233.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ0ODU5OA==,size_16,color_FFFFFF,t_70)\\n\\n### 解压nacos\\n\\n```sh\\ntar -zxvf nacos-server-1.4.0.tar.gz\\n```\\n\\n### 创建nacos持久化数据库\\n\\n首先使用navicat连接mysql数据库，然后创建数据库\\n\\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201130205643439.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ0ODU5OA==,size_16,color_FFFFFF,t_70)\\n\\n\\n新建数据库后导入SQL脚本即可\\n\\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201130205705669.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ0ODU5OA==,size_16,color_FFFFFF,t_70)\\n\\n红色框选那栏填写你的SQL脚本位置，SQL脚本在nacos文件夹下的conf下\\n\\n### nacos文件夹改名\\n\\n将文件夹名改为nacos3333代表这个nacos的端口号是3333\\n\\n```sh\\nmv nacos nacos3333\\n```\\n\\n### 配置修改\\n\\n首先进入到配置目录\\n\\n```sh\\ncd /usr/local/nacos/nacos3333/conf\\n```\\n\\n>![在这里插入图片描述](https://img-blog.csdnimg.cn/2020113020572431.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ0ODU5OA==,size_16,color_FFFFFF,t_70)\\n\\n\\n在更改配置之前先备份配置\\n\\n\\n\\n```sh\\ncp application.properties application.properties.example\\n```\\n\\n```sh\\ncp cluster.conf.example cluster.conf\\n```\\n\\n### 集群配置\\n\\n```sh\\nvim cluster.conf\\n```\\n\\n>![在这里插入图片描述](https://img-blog.csdnimg.cn/20201130205739435.png)\\n\\n>\\n> 注意这里不能填写localhost 或者127.0.0.1，这里如果是在本机搭建可以查看本机ip后填写\\n>\\n> ```sh\\n> hostname -i\\n> ```\\n>\\n>![在这里插入图片描述](https://img-blog.csdnimg.cn/20201130205749116.png)\\n\\n\\n### nacos配置\\n\\n```sh\\nvim application.properties\\n```\\n\\n```properties\\n\\n#*************** Spring Boot Related Configurations ***************#\\n### Default web context path:\\nserver.servlet.contextPath=/nacos\\n### Default web server port:\\nserver.port=3333\\n\\n#*************** Network Related Configurations ***************#\\n### If prefer hostname over ip for Nacos server addresses in cluster.conf:\\n# nacos.inetutils.prefer-hostname-over-ip=false\\n\\n### Specify local server\'s IP:\\n# nacos.inetutils.ip-address=\\n\\n\\n#*************** Config Module Related Configurations ***************#\\n### If use MySQL as datasource:\\nspring.datasource.platform=mysql\\n\\n### Count of DB:\\ndb.num=1\\n\\n### Connect URL of DB:\\ndb.url.0=jdbc:mysql://127.0.0.1:3306/nacos_config?characterEncoding=utf8&connectTimeout=1000&socketTimeout=3000&autoReconnect=true&useUnicode=true&useSSL=false&serverTimezone=UTC\\ndb.user=root\\ndb.password=123456\\n\\n\\n#*************** Naming Module Related Configurations ***************#\\n### Data dispatch task execution period in milliseconds:\\n# nacos.naming.distro.taskDispatchPeriod=200\\n\\n### Data count of batch sync task:\\n# nacos.naming.distro.batchSyncKeyCount=1000\\n\\n### Retry delay in milliseconds if sync task failed:\\n# nacos.naming.distro.syncRetryDelay=5000\\n\\n### If enable data warmup. If set to false, the server would accept request without local data preparation:\\n# nacos.naming.data.warmup=true\\n\\n### If enable the instance auto expiration, kind like of health check of instance:\\n# nacos.naming.expireInstance=true\\n\\nnacos.naming.empty-service.auto-clean=true\\nnacos.naming.empty-service.clean.initial-delay-ms=50000\\nnacos.naming.empty-service.clean.period-time-ms=30000\\n\\n\\n#*************** CMDB Module Related Configurations ***************#\\n### The interval to dump external CMDB in seconds:\\n# nacos.cmdb.dumpTaskInterval=3600\\n\\n### The interval of polling data change event in seconds:\\n# nacos.cmdb.eventTaskInterval=10\\n\\n### The interval of loading labels in seconds:\\n# nacos.cmdb.labelTaskInterval=300\\n\\n### If turn on data loading task:\\n# nacos.cmdb.loadDataAtStart=false\\n\\n\\n#*************** Metrics Related Configurations ***************#\\n### Metrics for prometheus\\n#management.endpoints.web.exposure.include=*\\n\\n### Metrics for elastic search\\nmanagement.metrics.export.elastic.enabled=false\\n#management.metrics.export.elastic.host=http://localhost:9200\\n\\n### Metrics for influx\\nmanagement.metrics.export.influx.enabled=false\\n#management.metrics.export.influx.db=springboot\\n#management.metrics.export.influx.uri=http://localhost:8086\\n#management.metrics.export.influx.auto-create-db=true\\n#management.metrics.export.influx.consistency=one\\n#management.metrics.export.influx.compressed=true\\n\\n\\n#*************** Access Log Related Configurations ***************#\\n### If turn on the access log:\\nserver.tomcat.accesslog.enabled=true\\n\\n### The access log pattern:\\nserver.tomcat.accesslog.pattern=%h %l %u %t \\\"%r\\\" %s %b %D %{User-Agent}i %{Request-Source}i\\n\\n### The directory of access log:\\nserver.tomcat.basedir=\\n\\n\\n#*************** Access Control Related Configurations ***************#\\n### If enable spring security, this option is deprecated in 1.2.0:\\n#spring.security.enabled=false\\n\\n### The ignore urls of auth, is deprecated in 1.2.0:\\nnacos.security.ignore.urls=/,/error,/**/*.css,/**/*.js,/**/*.html,/**/*.map,/**/*.svg,/**/*.png,/**/*.ico,/console-fe/public/**,/v1/auth/**,/v1/console/health/**,/actuator/**,/v1/console/server/**\\n\\n### The auth system to use, currently only \'nacos\' is supported:\\nnacos.core.auth.system.type=nacos\\n\\n### If turn on auth system:\\nnacos.core.auth.enabled=false\\n\\n### The token expiration in seconds:\\nnacos.core.auth.default.token.expire.seconds=18000\\n\\n### The default token:\\nnacos.core.auth.default.token.secret.key=SecretKey012345678901234567890123456789012345678901234567890123456789\\n\\n### Turn on/off caching of auth information. By turning on this switch, the update of auth information would have a 15 seconds delay.\\nnacos.core.auth.caching.enabled=true\\n\\n\\n#*************** Istio Related Configurations ***************#\\n### If turn on the MCP server:\\nnacos.istio.mcp.server.enabled=false\\n\\n\\n\\n###*************** Add from 1.3.0 ***************###\\n\\n\\n#*************** Core Related Configurations ***************#\\n\\n### set the WorkerID manually\\n# nacos.core.snowflake.worker-id=\\n\\n### Member-MetaData\\n# nacos.core.member.meta.site=\\n# nacos.core.member.meta.adweight=\\n# nacos.core.member.meta.weight=\\n\\n### MemberLookup\\n### Addressing pattern category, If set, the priority is highest\\n# nacos.core.member.lookup.type=[file,address-server]\\n## Set the cluster list with a configuration file or command-line argument\\n# nacos.member.list=192.168.16.101:8847?raft_port=8807,192.168.16.101?raft_port=8808,192.168.16.101:8849?raft_port=8809\\n## for AddressServerMemberLookup\\n# Maximum number of retries to query the address server upon initialization\\n# nacos.core.address-server.retry=5\\n## Server domain name address of [address-server] mode\\n# address.server.domain=jmenv.tbsite.net\\n## Server port of [address-server] mode\\n# address.server.port=8080\\n## Request address of [address-server] mode\\n# address.server.url=/nacos/serverlist\\n\\n#*************** JRaft Related Configurations ***************#\\n\\n### Sets the Raft cluster election timeout, default value is 5 second\\n# nacos.core.protocol.raft.data.election_timeout_ms=5000\\n### Sets the amount of time the Raft snapshot will execute periodically, default is 30 minute\\n# nacos.core.protocol.raft.data.snapshot_interval_secs=30\\n### raft internal worker threads\\n# nacos.core.protocol.raft.data.core_thread_num=8\\n### Number of threads required for raft business request processing\\n# nacos.core.protocol.raft.data.cli_service_thread_num=4\\n### raft linear read strategy. Safe linear reads are used by default, that is, the Leader tenure is confirmed by heartbeat\\n# nacos.core.protocol.raft.data.read_index_type=ReadOnlySafe\\n### rpc request timeout, default 5 seconds\\n# nacos.core.protocol.raft.data.rpc_request_timeout_ms=5000\\n\\n```\\n\\n这是我的整个application.properties文件,其中主要修改的地方有两处\\n\\n修改端口号\\n\\n```properties\\n### Default web server port:\\nserver.port=3333\\n```\\n\\n修改数据库为mysql并配置mysql的url\\n\\n```properties\\n#*************** Config Module Related Configurations ***************#\\n### If use MySQL as datasource:\\n spring.datasource.platform=mysql\\n\\n### Count of DB:\\n db.num=1\\n\\n### Connect URL of DB:\\ndb.url.0=jdbc:mysql://127.0.0.1:3306/nacos_config?characterEncoding=utf8&connectTimeout=1000&socketTimeout=3000&autoReconnect=true&useUnicode=true&useSSL=false&serverTimezone=UTC\\ndb.user=root\\ndb.password=123456\\n```\\n\\n这时候配置就差不多啦可以开始启动服务了\\n\\n```sh\\n# 进入到nacos3333的bin目录\\ncd /usr/local/nacos/nacos3333/bin\\n# 执行启动脚本 因为nacos启动脚本默认就是使用集群模式所以不用更改\\n./startup.sh\\n```\\n\\n这时候我们可以查看nacos的启动状态\\n\\n```sh\\nps -ef | grep nacos\\n```\\n\\n> ![在这里插入图片描述](https://img-blog.csdnimg.cn/20201130205818481.png)\\n\\n\\n这时候我们应该就可以通过 服务器ip:3333/nacos访问到nacos\\n\\n> ![在这里插入图片描述](https://img-blog.csdnimg.cn/20201130205828641.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ0ODU5OA==,size_16,color_FFFFFF,t_70)\\n\\n\\n成功的访问到了nacos代表成功了。\\n\\n### nacos集群启动\\n\\n这时候我们就可以回到nacos目录下拷贝之前的nacos3333文件夹来启动nacos4444和nacos5555\\n\\n```sh\\ncd /usr/local/nacos\\n# cp -r 代表递归拷贝\\ncp -r nacos3333 nacos4444\\ncp -r nacos3333 nacos5555\\n```\\n\\n这时候再分别将nacos4444和nacos5555文件夹下的conf目录中的application.properties中的server.port更改为3333、4444然后再启动，这里我就不再演示了，和之前配置一样。\\n\\n随后我们再依次启动nacos4444，nacos5555\\n\\n###########################################################################\\n\\n启动后发现问题，nacos5555启动不起来，查看日志得到发现内存不足，nacos脚本默认给的最大内存是2G，我们可以去改小一点。\\n\\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201130205845619.png)\\n\\n原红框中限制的内存是2g 最小1g 适当该小一点[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传\\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201130205903628.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ0ODU5OA==,size_16,color_FFFFFF,t_70)\\n\\n\\n然后再依次启动三个服务\\n\\n登录任意一个nacos可以看到如下页面即集群启动成功\\n\\n### nginx配置\\n\\n这配置nginx负载均衡访问nacos\\n\\n```sh\\ncd /usr/local/nginx/conf\\nvim nginx.conf\\n```\\n\\n```conf\\n#user  nobody;\\nworker_processes  1;\\n\\n#error_log  logs/error.log;\\n#error_log  logs/error.log  notice;\\n#error_log  logs/error.log  info;\\n\\n#pid        logs/nginx.pid;\\n\\n\\nevents {\\n    worker_connections  1024;\\n}\\n\\n\\nhttp {\\n    include       mime.types;\\n    default_type  application/octet-stream;\\n\\n    #log_format  main  \'$remote_addr - $remote_user [$time_local] \\\"$request\\\" \'\\n    #                  \'$status $body_bytes_sent \\\"$http_referer\\\" \'\\n    #                  \'\\\"$http_user_agent\\\" \\\"$http_x_forwarded_for\\\"\';\\n\\n    #access_log  logs/access.log  main;\\n\\n    sendfile        on;\\n    #tcp_nopush     on;\\n\\n    #keepalive_timeout  0;\\n    keepalive_timeout  65;\\n\\n    #gzip  on;\\n\\n    #配置刚刚搭建好的nacos集群\\n    upstream cluster{                                                        \\n\\t    server 127.0.0.1:3333;\\n\\t    server 127.0.0.1:4444;\\n\\t    server 127.0.0.1:5555;\\n\\t}\\n\\n    server {\\n        listen       1111;\\n        server_name  nacos_cluster;\\n\\n        #charset koi8-r;\\n\\n        #access_log  logs/host.access.log  main;\\n\\n        location / {\\n            #root   html;\\n            #index  index.html index.htm;\\n            #将所有访问/的都映射到配置好的集群\\n            proxy_pass http://cluster;\\n        }\\n\\n        #error_page  404              /404.html;\\n\\n        # redirect server error pages to the static page /50x.html\\n        #\\n        error_page   500 502 503 504  /50x.html;\\n        location = /50x.html {\\n            root   html;\\n        }\\n\\n        # proxy the PHP scripts to Apache listening on 127.0.0.1:80\\n        #\\n        #location ~ \\\\.php$ {\\n        #    proxy_pass   http://127.0.0.1;\\n        #}\\n\\n        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000\\n        #\\n        #location ~ \\\\.php$ {\\n        #    root           html;\\n        #    fastcgi_pass   127.0.0.1:9000;\\n        #    fastcgi_index  index.php;\\n        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;\\n        #    include        fastcgi_params;\\n        #}\\n\\n        # deny access to .htaccess files, if Apache\'s document root\\n        # concurs with nginx\'s one\\n        #\\n        #location ~ /\\\\.ht {\\n        #    deny  all;\\n        #}\\n    }\\n\\n\\n    # another virtual host using mix of IP-, name-, and port-based configuration\\n    #\\n    #server {\\n    #    listen       8000;\\n    #    listen       somename:8080;\\n    #    server_name  somename  alias  another.alias;\\n\\n    #    location / {\\n    #        root   html;\\n    #        index  index.html index.htm;\\n    #    }\\n    #}\\n\\n\\n    # HTTPS server\\n    #\\n    #server {\\n    #    listen       443 ssl;\\n    #    server_name  localhost;\\n\\n    #    ssl_certificate      cert.pem;\\n    #    ssl_certificate_key  cert.key;\\n\\n    #    ssl_session_cache    shared:SSL:1m;\\n    #    ssl_session_timeout  5m;\\n\\n    #    ssl_ciphers  HIGH:!aNULL:!MD5;\\n    #    ssl_prefer_server_ciphers  on;\\n\\n    #    location / {\\n    #        root   html;\\n    #        index  index.html index.htm;\\n    #    }\\n    #}\\n}\\n```\\n\\n### nginx启动\\n\\n```sh\\ncd /usr/local/nginx/sbin\\n./nginx\\n```\\n\\n这时候我们就可以通过服务器ip地址:1111/nacos 来访问nacos集群了\\n\\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201130205927229.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ0ODU5OA==,size_16,color_FFFFFF,t_70)\\n\\n\\n关于使用NACOS集群遇到问题 -- CODE:503 MSG: SERVER IS STARTING NOW, PLEASE TRY AGAIN LATER!\\n\\n这时又出现了问题……在服务提供者注册服务时会报错\\n\\n```text\\n2020-11-30 00:36:59.492 ERROR 13140 --- [  restartedMain] c.a.c.n.registry.NacosServiceRegistry    : nacos registry, nacos-payment-provider register failed...NacosRegistration{nacosDiscoveryProperties=NacosDiscoveryProperties{serverAddr=\'wsy.oopsw.top:1111\', endpoint=\'\', namespace=\'\', watchDelay=30000, logName=\'\', service=\'nacos-payment-provider\', weight=1.0, clusterName=\'DEFAULT\', namingLoadCacheAtStart=\'false\', metadata={preserved.register.source=SPRING_CLOUD}, registerEnabled=true, ip=\'10.175.6.100\', networkInterface=\'\', port=9002, secure=false, accessKey=\'\', secretKey=\'\'}},\\n\\njava.lang.IllegalStateException: failed to req API:/nacos/v1/ns/instance after all servers([wsy.oopsw.top:1111]) tried: failed to req API:wsy.oopsw.top:1111/nacos/v1/ns/instance. code:503 msg: server is DOWN now, please try again later!\\n\\tat com.alibaba.nacos.client.naming.net.NamingProxy.reqAPI(NamingProxy.java:464) ~[nacos-client-1.1.1.jar:na]\\n\\tat com.alibaba.nacos.client.naming.net.NamingProxy.reqAPI(NamingProxy.java:386) ~[nacos-client-1.1.1.jar:na]\\n\\tat com.alibaba.nacos.client.naming.net.NamingProxy.registerService(NamingProxy.java:188) ~[nacos-client-1.1.1.jar:na]\\n\\tat com.alibaba.nacos.client.naming.NacosNamingService.registerInstance(NacosNamingService.java:205) ~[nacos-client-1.1.1.jar:na]\\n\\tat com.alibaba.nacos.client.naming.NacosNamingService.registerInstance(NacosNamingService.java:184) ~[nacos-client-1.1.1.jar:na]\\n\\tat com.alibaba.cloud.nacos.registry.NacosServiceRegistry.register(NacosServiceRegistry.java:61) ~[spring-cloud-alibaba-nacos-discovery-2.1.0.RELEASE.jar:2.1.0.RELEASE]\\n\\tat org.springframework.cloud.client.serviceregistry.AbstractAutoServiceRegistration.register(AbstractAutoServiceRegistration.java:239) [spring-cloud-commons-2.2.1.RELEASE.jar:2.2.1.RELEASE]\\n\\tat com.alibaba.cloud.nacos.registry.NacosAutoServiceRegistration.register(NacosAutoServiceRegistration.java:74) [spring-cloud-alibaba-nacos-discovery-2.1.0.RELEASE.jar:2.1.0.RELEASE]\\n\\tat org.springframework.cloud.client.serviceregistry.AbstractAutoServiceRegistration.start(AbstractAutoServiceRegistration.java:138) [spring-cloud-commons-2.2.1.RELEASE.jar:2.2.1.RELEASE]\\n\\tat org.springframework.cloud.client.serviceregistry.AbstractAutoServiceRegistration.bind(AbstractAutoServiceRegistration.java:101) [spring-cloud-commons-2.2.1.RELEASE.jar:2.2.1.RELEASE]\\n\\tat org.springframework.cloud.client.serviceregistry.AbstractAutoServiceRegistration.onApplicationEvent(AbstractAutoServiceRegistration.java:88) [spring-cloud-commons-2.2.1.RELEASE.jar:2.2.1.RELEASE]\\n\\tat org.springframework.cloud.client.serviceregistry.AbstractAutoServiceRegistration.onApplicationEvent(AbstractAutoServiceRegistration.java:47) [spring-cloud-commons-2.2.1.RELEASE.jar:2.2.1.RELEASE]\\n\\tat org.springframework.context.event.SimpleApplicationEventMulticaster.doInvokeListener(SimpleApplicationEventMulticaster.java:172) [spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]\\n\\tat org.springframework.context.event.SimpleApplicationEventMulticaster.invokeListener(SimpleApplicationEventMulticaster.java:165) [spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]\\n\\tat org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:139) [spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]\\n\\tat org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:403) [spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]\\n\\tat org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:360) [spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]\\n\\tat org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.finishRefresh(ServletWebServerApplicationContext.java:165) [spring-boot-2.2.2.RELEASE.jar:2.2.2.RELEASE]\\n\\tat org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:553) [spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]\\n\\tat org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:141) [spring-boot-2.2.2.RELEASE.jar:2.2.2.RELEASE]\\n\\tat org.springframework.boot.SpringApplication.refresh(SpringApplication.java:747) [spring-boot-2.2.2.RELEASE.jar:2.2.2.RELEASE]\\n\\tat org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:397) [spring-boot-2.2.2.RELEASE.jar:2.2.2.RELEASE]\\n\\tat org.springframework.boot.SpringApplication.run(SpringApplication.java:315) [spring-boot-2.2.2.RELEASE.jar:2.2.2.RELEASE]\\n\\tat org.springframework.boot.SpringApplication.run(SpringApplication.java:1226) [spring-boot-2.2.2.RELEASE.jar:2.2.2.RELEASE]\\n\\tat org.springframework.boot.SpringApplication.run(SpringApplication.java:1215) [spring-boot-2.2.2.RELEASE.jar:2.2.2.RELEASE]\\n\\tat com.wsy.springcloud.AlibabaProviderApplication.main(AlibabaProviderApplication.java:15) [classes/:na]\\n\\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_73]\\n\\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_73]\\n\\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_73]\\n\\tat java.lang.reflect.Method.invoke(Method.java:497) ~[na:1.8.0_73]\\n\\tat org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49) [spring-boot-devtools-2.2.2.RELEASE.jar:2.2.2.RELEASE]\\n```\\n\\n像阿里云、腾讯云这种云服务器, 会提供一个外网ip和内网ip, 访问外网ip时会指向对应的内网ip来访问到该服务器, 由于nacos集群内部是指定的使用网卡ip地址来进行通信,但是由于三台服务器各自的内网ip不在同一网段, 所以造成无法通信, 也会造成以下问题\\n\\n注册服务:\\n\\n```\\ncode:503 msg: server is STARTING now, please try again later!\\n```\\n\\nnaming-raft.log 日志:\\n\\n```\\n2019-05-15 00:02:00,000 WARN [IS LEADER] no leader is available now!\\n```\\n\\n这时只要修改启动参数, 设置本机ip地址就可以了\\n修改 nacos/bin/startup.sh 文件\\n找到 JVM Configuration 这部分, 在集群参数里增加 -Dnacos.server.ip=xx\\n\\n```sh\\n#===========================================================================================\\n# JVM Configuration\\n#===========================================================================================\\n\\n# 单机模式对应的启动参数\\nif [[ \\\"${MODE}\\\" == \\\"standalone\\\" ]]; then\\n    JAVA_OPT=\\\"${JAVA_OPT} -Xms512m -Xmx512m -Xmn256m\\\"\\n    JAVA_OPT=\\\"${JAVA_OPT} -Dnacos.standalone=true\\\"\\nelse\\n# 集群模式对应的启动参数\\n    JAVA_OPT=\\\"${JAVA_OPT} -server -Xms2g -Xmx2g -Xmn1g -XX:MetaspaceSize=128m -XX:MaxMetaspaceSize=320m\\\"\\n    JAVA_OPT=\\\"${JAVA_OPT} -XX:-OmitStackTraceInFastThrow -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=${BASE_DIR}/logs/java_heapdump.hprof\\\"\\n    JAVA_OPT=\\\"${JAVA_OPT} -XX:-UseLargePages\\\"\\n    \\n    # *新增以下参数设置本机ip地址*\\n    JAVA_OPT=\\\"${JAVA_OPT} -Dnacos.server.ip=本机ip\\\"\\n\\nfi\\n\\nif [[ \\\"${FUNCTION_MODE}\\\" == \\\"config\\\" ]]; then\\n    JAVA_OPT=\\\"${JAVA_OPT} -Dnacos.functionMode=config\\\"\\nelif [[ \\\"${FUNCTION_MODE}\\\" == \\\"naming\\\" ]]; then\\n    JAVA_OPT=\\\"${JAVA_OPT} -Dnacos.functionMode=naming\\\"\\nfi\\n\\n```\\n\\n参考博客：https://www.freesion.com/article/33101142210/\\n\\n服务注册时报BadRequest400 问题暂时还未解决\\n\\n```text\\ncom.alibaba.nacos.api.exception.NacosException: failed to req API:/nacos/v1/ns/instance after all servers([wsy.oopsw.top:1111]) tried: ErrCode:400, ErrMsg:<html><body><h1>Whitelabel Error Page</h1><p>This application has no explicit mapping for /error, so you are seeing this as a fallback.</p><div id=\'created\'>Mon Nov 30 01:33:45 CST 2020</div><div>There was an unexpected error (type=Bad Request, status=400).</div><div>receive invalid redirect request from peer 172.20.9.153</div></body></html>\\n```\\n\\n#############################################################\\n\\n问题已解决，是nacos版本的问题，据群里老哥解释说是nacos需要使用与之对应的SpringCloudAlibaba的版本，不然就会报错，我更换版本到1.3.2问题解决服务注册正常\",\"blogGoods\":0,\"blogId\":\"1333411378995605504\",\"blogImage\":\"http://808km.top/blog/img/img/default/1333411206555185152\",\"blogRead\":39,\"blogRemark\":\"nacos集群环境搭建\",\"blogTitle\":\"nacos集群环境搭建\",\"blogType\":20,\"createdTime\":1606745021000,\"typeName\":\"nacos\",\"updateTime\":1606973290000,\"version\":36},\"msg\":\"阅读成功\"}', '127.0.0.1', '2020-12-03 13:28:54', NULL);
INSERT INTO `bl_log` VALUES (2689, '阅读博客', '/blog/read/1311375132718956544', '[1311375132718956544]', 1, NULL, 'PUT', 508, '{\"code\":20000,\"data\":{\"blogCollection\":0,\"blogComment\":0,\"blogContent\":\"# docker中使用fastdfs问题\\n在今天部署之前制作的个人博客项目时，突然图片都获取不到了，我尝试上传图片，可以上传成功，但是访问不到，显示请求被拒绝。经过排查，准备尝试重新启动一个fastdfs容器时，发现之前启动的fastdfs容器的数据卷无法删除，以此猜测可能是数据卷出了问题，所以我重新启动了一个容器，数据卷使用的之前的容器使用的数据卷，发现还是无法访问图片，我删除该容器后再次启动了一个新容器，使用了新的数据卷，这时候上传图片后正常访问。\",\"blogGoods\":0,\"blogId\":\"1311375132718956544\",\"blogImage\":\"http://808km.top/blog/img/default.jpg\",\"blogRead\":17,\"blogTitle\":\"docker中使用fastdfs问题\",\"blogType\":13,\"createdTime\":1601462370000,\"typeName\":\"fastdfs\",\"updateTime\":1606845462000,\"version\":17},\"msg\":\"阅读成功\"}', '127.0.0.1', '2020-12-03 13:29:54', NULL);
INSERT INTO `bl_log` VALUES (2690, '阅读博客', '/blog/read/1311375132718956544', '[1311375132718956544]', 1, NULL, 'PUT', 482, '{\"code\":20000,\"data\":{\"blogCollection\":0,\"blogComment\":0,\"blogContent\":\"# docker中使用fastdfs问题\\n在今天部署之前制作的个人博客项目时，突然图片都获取不到了，我尝试上传图片，可以上传成功，但是访问不到，显示请求被拒绝。经过排查，准备尝试重新启动一个fastdfs容器时，发现之前启动的fastdfs容器的数据卷无法删除，以此猜测可能是数据卷出了问题，所以我重新启动了一个容器，数据卷使用的之前的容器使用的数据卷，发现还是无法访问图片，我删除该容器后再次启动了一个新容器，使用了新的数据卷，这时候上传图片后正常访问。\",\"blogGoods\":0,\"blogId\":\"1311375132718956544\",\"blogImage\":\"http://808km.top/blog/img/default.jpg\",\"blogRead\":18,\"blogTitle\":\"docker中使用fastdfs问题\",\"blogType\":13,\"createdTime\":1601462370000,\"typeName\":\"fastdfs\",\"updateTime\":1606973394000,\"version\":17},\"msg\":\"阅读成功\"}', '127.0.0.1', '2020-12-03 13:30:10', NULL);
INSERT INTO `bl_log` VALUES (2691, '阅读博客', '/blog/read/1333708609683533824', '[1333708609683533824]', 1, NULL, 'PUT', 479, '{\"code\":20000,\"data\":{\"blogCollection\":1,\"blogComment\":0,\"blogContent\":\"# 前言\\n今天在给博客更新，将session存到redis中持久化存储，正常操作是没问题的，但是后来尝试发现，在我输入的密码是错误的时候，他也创建了session，经过我的一番从尾到头的debug。。。。\\n复杂的debug过程就不贴出来了，放出问题的根源\\n在登陆时，会访问到我用来记录日志的切面,而我的记录日志方法中有一个需要获取到当前登录的用户的信息，来完善日志的字段\\n>![image.png](http://808km.top/blog/img/img/blogImg/1333703986787631104)\\n>以下是工具类中的原方法：\\n>![image.png](http://808km.top/blog/img/img/blogImg/1333704236625543168)\\n>以下是修改后的方法\\n>![image.png](http://808km.top/blog/img/img/blogImg/1333704399599419392)\\n>这就是问题的根源，因为在我登录的时候，要记录日志，然后去调用工具类，工具类去获取session，如果没有getSession(false)的话，就会判断session是否存在，如果不存在的话就会自动创建session，这就是为什么明明密码错了还会创建session的原因\",\"blogGoods\":1,\"blogId\":\"1333708609683533824\",\"blogImage\":\"http://808km.top/blog/img/default.jpg\",\"blogRead\":14,\"blogRemark\":\"shiro+redis整合实现session持久化登陆失败时也会生成session问题\",\"blogTitle\":\"shiro+redis整合实现session持久化登陆失败时也会生成session问题\",\"blogType\":6,\"createdTime\":1606815886000,\"typeName\":\"Java\",\"updateTime\":1606973265000,\"version\":1},\"msg\":\"阅读成功\"}', '127.0.0.1', '2020-12-03 13:31:11', NULL);
INSERT INTO `bl_log` VALUES (2692, '查询时间轴', '/blog/getTimeLine', '[]', 1, NULL, 'GET', 439, '{\"code\":20000,\"data\":[{\"list\":[{\"blogId\":\"1333708609683533824\",\"blogMonth\":\"2020-12\",\"blogTitle\":\"shiro+redis整合实现session持久化登陆失败时也会生成session问题\",\"createdTime\":1606815886000}],\"month\":\"2020-12\"},{\"list\":[{\"blogId\":\"1333411378995605504\",\"blogMonth\":\"2020-11\",\"blogTitle\":\"nacos集群环境搭建\",\"createdTime\":1606745021000},{\"blogId\":\"1332742588649615360\",\"blogMonth\":\"2020-11\",\"blogTitle\":\"vue项目引入markdown\",\"createdTime\":1606585569000},{\"blogId\":\"1331436834413211648\",\"blogMonth\":\"2020-11\",\"blogTitle\":\"springboot 后端传给前端相差8小时\",\"createdTime\":1606274253000}],\"month\":\"2020-11\"},{\"list\":[{\"blogId\":\"1322169187161767936\",\"blogMonth\":\"2020-10\",\"blogTitle\":\"Dubbo超时问题\",\"createdTime\":1604064673000}],\"month\":\"2020-10\"},{\"list\":[{\"blogId\":\"1311375132718956544\",\"blogMonth\":\"2020-09\",\"blogTitle\":\"docker中使用fastdfs问题\",\"createdTime\":1601462370000},{\"blogId\":\"1305852969815642112\",\"blogMonth\":\"2020-09\",\"blogTitle\":\"dubbo-admin登录问题\",\"createdTime\":1600174584000}],\"month\":\"2020-09\"},{\"list\":[{\"blogId\":\"1294647161643978752\",\"blogMonth\":\"2020-08\",\"blogTitle\":\"shiroFilter踩坑\",\"createdTime\":1597474112000},{\"blogId\":\"1293808631053139968\",\"blogMonth\":\"2020-08\",\"blogTitle\":\"docker 安装 mysql5.7\",\"createdTime\":1597274190000}],\"month\":\"2020-08\"},{\"list\":[{\"blogId\":\"1293850784802377728\",\"blogMonth\":\"2020-07\",\"blogTitle\":\"mybatis <if>标签踩坑\",\"createdTime\":1594605840000}],\"month\":\"2020-07\"}],\"msg\":\"操作成功！\"}', '127.0.0.1', '2020-12-03 13:31:21', NULL);
INSERT INTO `bl_log` VALUES (2693, '阅读关于我的', '/about/read', '[]', 1, NULL, 'PUT', 577, '{\"code\":20000,\"data\":{\"aboutContent\":\"# 前言\\n我是一名即将大三的在校大学生，自主学习的过程中跟随讲师开发了该个人博客&ldquo;闲言博客&rdquo;，这个博客功能简单，但是为我巩固了不少的技术知识，该网站为前后端分离项目，后端:_**springboot+mybatis**_ 前端-前台：_**vue+ and design**_前端-后台: _**vue+ element-ui**_ 开发该项目花了我大概10来天时间，前台页面代码是我copy的讲师提供的静态页面（原谅我写的css自己都看不下去），后续想追加个_**redis**_写个缓存，以及加一个_**ElasticSearch**_搜索引擎，加油吧！\\n\\n## 该博客使用到的技术栈：\\nSpringBoot，Mybatis，Shiro，Maven，Vue，ElementUI，AntDesignVue，Flex布局，Linux，Nginx，Docker，FastDFS，MongoDB，SpringDataMongoDB\\n该博客由我在腾讯课堂购买课程学习开发，网址：\\n\\n[课程地址](https://ke.qq.com/course/1129309)\\n\\n-------------------------------------------------------------------------\\n\\n目前我正在修改该博客的小bug并且在集成更多的新功能，我希望能够使用这个博客项目去巩固我学习的新知识，也希望能有更多的人看到我写的这个项目。\\n\\n## 目前需要改进的地方：\\n\\n1.  使用elasticSearch 进行博客的检索\\n2.  将首页的主图片修改为轮播图\\n3.  ~~注册时上传头像~~\\n4.  ~~将富文本编辑器改为Markdown编辑器~~\\n5.  ~~更新记录日志的方式~~\\n6.  ~~首页url的问题~~\\n7.  ~~数据库时间问题~~\\n8.  ~~前台md5加密改为后台加密后再匹配~~\\n9.  ~~推荐博客下的时间~~\\n10.  ~~登录注册页面的背景图片~~\\n11.  ~~登录注册页面的卡片问题~~\\n12. 后台中写博客路由问题\\n13. 后端登录中管理员和用户混淆不清关系\\n14. ~~阅读博客时会更新version(乐观锁)这可能会导致在别人观看博客的时候导致博主无法更新博客影响博主体验~~\\n15. 在进入下一个路由之后回到顶部\\n16. 将分页功能改为加载更多\\n\\n暂时还需要学习一点其他的之后，等有时间的时候再来继续完善该博客。\\n## 更新记录\\n- 2020-11-17 09:25 add:如果添加博客不上传封面将会设置一个默认封面图片\\n\\n- 2020-11-18 21:48 update:将原本前端md5加密后再跟后端匹配改为后端进行加密后再匹配\\n\\n- 2020-11-19 22:15 fix:将页面url后面会添加publicPath问题解决\\n\\n- 2020-11-24 11:25 update:将前端静态资源使用cdn加速、日志原记录为controller层的所有方法切入改为Log注解处切入\\n\\n- 2020-11-24 21:51 fix:修复推荐博客下的时间bug\\n- 2020-11-24 21:51 add:注册时添加上传头像功能\\n\\n- 2020-11-25 11:46 fix:修复数据库时间问题，具体问题已发博客，[点我查看](http://oopsw.top:1001/info/1331436834413211648)\\n\\n- 2020-11-27 23:47 fix:登录注册页面卡片超出页面没有显示滚动条、背景图片在页面放大时会出现多个背景图片\\n\\n- 2020-11-29 00:51  update:将前后台的所有富文本编辑器更换为markdown编辑器，并用markdown的样式\\n- 2020-12-01 08:30        update:修改markdown代码块样式\\n- 2020-12-01 08:57        fix:手机访问登录注册页面时样式体验差\",\"aboutId\":\"5\",\"aboutRead\":163,\"aboutTitle\":\"关于我的 关于“闲言”\",\"createdTime\":1597816791000,\"enable\":1,\"updateTime\":1606873724000,\"version\":207},\"msg\":\"阅读成功\"}', '127.0.0.1', '2020-12-03 13:32:32', NULL);
INSERT INTO `bl_log` VALUES (2694, '阅读博客', '/blog/read/1333708609683533824', '[1333708609683533824]', 1, NULL, 'PUT', 472, '{\"code\":20000,\"data\":{\"blogCollection\":1,\"blogComment\":0,\"blogContent\":\"# 前言\\n今天在给博客更新，将session存到redis中持久化存储，正常操作是没问题的，但是后来尝试发现，在我输入的密码是错误的时候，他也创建了session，经过我的一番从尾到头的debug。。。。\\n复杂的debug过程就不贴出来了，放出问题的根源\\n在登陆时，会访问到我用来记录日志的切面,而我的记录日志方法中有一个需要获取到当前登录的用户的信息，来完善日志的字段\\n>![image.png](http://808km.top/blog/img/img/blogImg/1333703986787631104)\\n>以下是工具类中的原方法：\\n>![image.png](http://808km.top/blog/img/img/blogImg/1333704236625543168)\\n>以下是修改后的方法\\n>![image.png](http://808km.top/blog/img/img/blogImg/1333704399599419392)\\n>这就是问题的根源，因为在我登录的时候，要记录日志，然后去调用工具类，工具类去获取session，如果没有getSession(false)的话，就会判断session是否存在，如果不存在的话就会自动创建session，这就是为什么明明密码错了还会创建session的原因\",\"blogGoods\":1,\"blogId\":\"1333708609683533824\",\"blogImage\":\"http://808km.top/blog/img/default.jpg\",\"blogRead\":15,\"blogRemark\":\"shiro+redis整合实现session持久化登陆失败时也会生成session问题\",\"blogTitle\":\"shiro+redis整合实现session持久化登陆失败时也会生成session问题\",\"blogType\":6,\"createdTime\":1606815886000,\"typeName\":\"Java\",\"updateTime\":1606973470000,\"version\":1},\"msg\":\"阅读成功\"}', '127.0.0.1', '2020-12-03 13:47:21', NULL);
INSERT INTO `bl_log` VALUES (2695, '阅读博客', '/blog/read/1333708609683533824', '[1333708609683533824]', 1, NULL, 'PUT', 503, '{\"code\":20000,\"data\":{\"blogCollection\":1,\"blogComment\":0,\"blogContent\":\"# 前言\\n今天在给博客更新，将session存到redis中持久化存储，正常操作是没问题的，但是后来尝试发现，在我输入的密码是错误的时候，他也创建了session，经过我的一番从尾到头的debug。。。。\\n复杂的debug过程就不贴出来了，放出问题的根源\\n在登陆时，会访问到我用来记录日志的切面,而我的记录日志方法中有一个需要获取到当前登录的用户的信息，来完善日志的字段\\n>![image.png](http://808km.top/blog/img/img/blogImg/1333703986787631104)\\n>以下是工具类中的原方法：\\n>![image.png](http://808km.top/blog/img/img/blogImg/1333704236625543168)\\n>以下是修改后的方法\\n>![image.png](http://808km.top/blog/img/img/blogImg/1333704399599419392)\\n>这就是问题的根源，因为在我登录的时候，要记录日志，然后去调用工具类，工具类去获取session，如果没有getSession(false)的话，就会判断session是否存在，如果不存在的话就会自动创建session，这就是为什么明明密码错了还会创建session的原因\",\"blogGoods\":1,\"blogId\":\"1333708609683533824\",\"blogImage\":\"http://808km.top/blog/img/default.jpg\",\"blogRead\":16,\"blogRemark\":\"shiro+redis整合实现session持久化登陆失败时也会生成session问题\",\"blogTitle\":\"shiro+redis整合实现session持久化登陆失败时也会生成session问题\",\"blogType\":6,\"createdTime\":1606815886000,\"typeName\":\"Java\",\"updateTime\":1606974440000,\"version\":1},\"msg\":\"阅读成功\"}', '127.0.0.1', '2020-12-03 13:48:48', NULL);
INSERT INTO `bl_log` VALUES (2696, '阅读博客', '/blog/read/1333411378995605504', '[1333411378995605504]', 1, NULL, 'PUT', 560, '{\"code\":20000,\"data\":{\"blogCollection\":0,\"blogComment\":0,\"blogContent\":\"## 预备环境准备\\n\\nNacos 依赖 [Java](https://docs.oracle.com/cd/E19182-01/820-7851/inst_cli_jdk_javahome_t/) 环境来运行。如果您是从代码开始构建并运行Nacos，还需要为此配置 [Maven](https://maven.apache.org/index.html)环境，请确保是在以下版本环境中安装使用:\\n\\n1. 64 bit OS，支持 Linux/Unix/Mac/Windows，推荐选用 Linux/Unix/Mac。\\n2. 64 bit JDK 1.8+；[下载](http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html) & [配置](https://docs.oracle.com/cd/E19182-01/820-7851/inst_cli_jdk_javahome_t/)。\\n3. Maven 3.2.x+；[下载](https://maven.apache.org/download.cgi) & [配置](https://maven.apache.org/settings.html)。\\n\\n## 下载nacos安装包\\n\\nhttps://github.com/alibaba/nacos/releases/tag/1.4.0\\n\\n>  ![在这里插入图片描述](https://img-blog.csdnimg.cn/20201130205557917.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ0ODU5OA==,size_16,color_FFFFFF,t_70)\\n\\n\\nlinux选择第一个\\n\\nwindows选择第二个\\n\\n\\n\\n## 搭建环境\\n\\n### 集群模式部署\\n\\n这个快速开始手册是帮忙您快速在你的电脑上，下载安装并使用Nacos，部署生产使用的集群模式。\\n\\n### 集群部署架构图\\n\\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201130205609797.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ0ODU5OA==,size_16,color_FFFFFF,t_70)\\n\\n\\nVIP:虚拟ip\\n\\n因此开源的时候推荐用户把所有服务列表放到一个vip下面，然后挂到一个域名下面\\n\\nhttp://ip1:port/openAPI 直连ip模式，机器挂则需要修改ip才可以使用。\\n\\nhttp://VIP:port/openAPI 挂载VIP模式，直连vip即可，下面挂server真实ip，可读性不好。\\n\\nhttp://nacos.com:port/openAPI 域名 + VIP模式，可读性好，而且换ip方便，推荐模式\\n\\n### 创建目录\\n\\n该目录存放nacos集群\\n\\n```sh\\nmkdir /usr/local/nacos\\n```\\n\\n### 上传nacos\\n\\n> ![在这里插入图片描述](https://img-blog.csdnimg.cn/20201130205630233.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ0ODU5OA==,size_16,color_FFFFFF,t_70)\\n\\n### 解压nacos\\n\\n```sh\\ntar -zxvf nacos-server-1.4.0.tar.gz\\n```\\n\\n### 创建nacos持久化数据库\\n\\n首先使用navicat连接mysql数据库，然后创建数据库\\n\\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201130205643439.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ0ODU5OA==,size_16,color_FFFFFF,t_70)\\n\\n\\n新建数据库后导入SQL脚本即可\\n\\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201130205705669.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ0ODU5OA==,size_16,color_FFFFFF,t_70)\\n\\n红色框选那栏填写你的SQL脚本位置，SQL脚本在nacos文件夹下的conf下\\n\\n### nacos文件夹改名\\n\\n将文件夹名改为nacos3333代表这个nacos的端口号是3333\\n\\n```sh\\nmv nacos nacos3333\\n```\\n\\n### 配置修改\\n\\n首先进入到配置目录\\n\\n```sh\\ncd /usr/local/nacos/nacos3333/conf\\n```\\n\\n>![在这里插入图片描述](https://img-blog.csdnimg.cn/2020113020572431.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ0ODU5OA==,size_16,color_FFFFFF,t_70)\\n\\n\\n在更改配置之前先备份配置\\n\\n\\n\\n```sh\\ncp application.properties application.properties.example\\n```\\n\\n```sh\\ncp cluster.conf.example cluster.conf\\n```\\n\\n### 集群配置\\n\\n```sh\\nvim cluster.conf\\n```\\n\\n>![在这里插入图片描述](https://img-blog.csdnimg.cn/20201130205739435.png)\\n\\n>\\n> 注意这里不能填写localhost 或者127.0.0.1，这里如果是在本机搭建可以查看本机ip后填写\\n>\\n> ```sh\\n> hostname -i\\n> ```\\n>\\n>![在这里插入图片描述](https://img-blog.csdnimg.cn/20201130205749116.png)\\n\\n\\n### nacos配置\\n\\n```sh\\nvim application.properties\\n```\\n\\n```properties\\n\\n#*************** Spring Boot Related Configurations ***************#\\n### Default web context path:\\nserver.servlet.contextPath=/nacos\\n### Default web server port:\\nserver.port=3333\\n\\n#*************** Network Related Configurations ***************#\\n### If prefer hostname over ip for Nacos server addresses in cluster.conf:\\n# nacos.inetutils.prefer-hostname-over-ip=false\\n\\n### Specify local server\'s IP:\\n# nacos.inetutils.ip-address=\\n\\n\\n#*************** Config Module Related Configurations ***************#\\n### If use MySQL as datasource:\\nspring.datasource.platform=mysql\\n\\n### Count of DB:\\ndb.num=1\\n\\n### Connect URL of DB:\\ndb.url.0=jdbc:mysql://127.0.0.1:3306/nacos_config?characterEncoding=utf8&connectTimeout=1000&socketTimeout=3000&autoReconnect=true&useUnicode=true&useSSL=false&serverTimezone=UTC\\ndb.user=root\\ndb.password=123456\\n\\n\\n#*************** Naming Module Related Configurations ***************#\\n### Data dispatch task execution period in milliseconds:\\n# nacos.naming.distro.taskDispatchPeriod=200\\n\\n### Data count of batch sync task:\\n# nacos.naming.distro.batchSyncKeyCount=1000\\n\\n### Retry delay in milliseconds if sync task failed:\\n# nacos.naming.distro.syncRetryDelay=5000\\n\\n### If enable data warmup. If set to false, the server would accept request without local data preparation:\\n# nacos.naming.data.warmup=true\\n\\n### If enable the instance auto expiration, kind like of health check of instance:\\n# nacos.naming.expireInstance=true\\n\\nnacos.naming.empty-service.auto-clean=true\\nnacos.naming.empty-service.clean.initial-delay-ms=50000\\nnacos.naming.empty-service.clean.period-time-ms=30000\\n\\n\\n#*************** CMDB Module Related Configurations ***************#\\n### The interval to dump external CMDB in seconds:\\n# nacos.cmdb.dumpTaskInterval=3600\\n\\n### The interval of polling data change event in seconds:\\n# nacos.cmdb.eventTaskInterval=10\\n\\n### The interval of loading labels in seconds:\\n# nacos.cmdb.labelTaskInterval=300\\n\\n### If turn on data loading task:\\n# nacos.cmdb.loadDataAtStart=false\\n\\n\\n#*************** Metrics Related Configurations ***************#\\n### Metrics for prometheus\\n#management.endpoints.web.exposure.include=*\\n\\n### Metrics for elastic search\\nmanagement.metrics.export.elastic.enabled=false\\n#management.metrics.export.elastic.host=http://localhost:9200\\n\\n### Metrics for influx\\nmanagement.metrics.export.influx.enabled=false\\n#management.metrics.export.influx.db=springboot\\n#management.metrics.export.influx.uri=http://localhost:8086\\n#management.metrics.export.influx.auto-create-db=true\\n#management.metrics.export.influx.consistency=one\\n#management.metrics.export.influx.compressed=true\\n\\n\\n#*************** Access Log Related Configurations ***************#\\n### If turn on the access log:\\nserver.tomcat.accesslog.enabled=true\\n\\n### The access log pattern:\\nserver.tomcat.accesslog.pattern=%h %l %u %t \\\"%r\\\" %s %b %D %{User-Agent}i %{Request-Source}i\\n\\n### The directory of access log:\\nserver.tomcat.basedir=\\n\\n\\n#*************** Access Control Related Configurations ***************#\\n### If enable spring security, this option is deprecated in 1.2.0:\\n#spring.security.enabled=false\\n\\n### The ignore urls of auth, is deprecated in 1.2.0:\\nnacos.security.ignore.urls=/,/error,/**/*.css,/**/*.js,/**/*.html,/**/*.map,/**/*.svg,/**/*.png,/**/*.ico,/console-fe/public/**,/v1/auth/**,/v1/console/health/**,/actuator/**,/v1/console/server/**\\n\\n### The auth system to use, currently only \'nacos\' is supported:\\nnacos.core.auth.system.type=nacos\\n\\n### If turn on auth system:\\nnacos.core.auth.enabled=false\\n\\n### The token expiration in seconds:\\nnacos.core.auth.default.token.expire.seconds=18000\\n\\n### The default token:\\nnacos.core.auth.default.token.secret.key=SecretKey012345678901234567890123456789012345678901234567890123456789\\n\\n### Turn on/off caching of auth information. By turning on this switch, the update of auth information would have a 15 seconds delay.\\nnacos.core.auth.caching.enabled=true\\n\\n\\n#*************** Istio Related Configurations ***************#\\n### If turn on the MCP server:\\nnacos.istio.mcp.server.enabled=false\\n\\n\\n\\n###*************** Add from 1.3.0 ***************###\\n\\n\\n#*************** Core Related Configurations ***************#\\n\\n### set the WorkerID manually\\n# nacos.core.snowflake.worker-id=\\n\\n### Member-MetaData\\n# nacos.core.member.meta.site=\\n# nacos.core.member.meta.adweight=\\n# nacos.core.member.meta.weight=\\n\\n### MemberLookup\\n### Addressing pattern category, If set, the priority is highest\\n# nacos.core.member.lookup.type=[file,address-server]\\n## Set the cluster list with a configuration file or command-line argument\\n# nacos.member.list=192.168.16.101:8847?raft_port=8807,192.168.16.101?raft_port=8808,192.168.16.101:8849?raft_port=8809\\n## for AddressServerMemberLookup\\n# Maximum number of retries to query the address server upon initialization\\n# nacos.core.address-server.retry=5\\n## Server domain name address of [address-server] mode\\n# address.server.domain=jmenv.tbsite.net\\n## Server port of [address-server] mode\\n# address.server.port=8080\\n## Request address of [address-server] mode\\n# address.server.url=/nacos/serverlist\\n\\n#*************** JRaft Related Configurations ***************#\\n\\n### Sets the Raft cluster election timeout, default value is 5 second\\n# nacos.core.protocol.raft.data.election_timeout_ms=5000\\n### Sets the amount of time the Raft snapshot will execute periodically, default is 30 minute\\n# nacos.core.protocol.raft.data.snapshot_interval_secs=30\\n### raft internal worker threads\\n# nacos.core.protocol.raft.data.core_thread_num=8\\n### Number of threads required for raft business request processing\\n# nacos.core.protocol.raft.data.cli_service_thread_num=4\\n### raft linear read strategy. Safe linear reads are used by default, that is, the Leader tenure is confirmed by heartbeat\\n# nacos.core.protocol.raft.data.read_index_type=ReadOnlySafe\\n### rpc request timeout, default 5 seconds\\n# nacos.core.protocol.raft.data.rpc_request_timeout_ms=5000\\n\\n```\\n\\n这是我的整个application.properties文件,其中主要修改的地方有两处\\n\\n修改端口号\\n\\n```properties\\n### Default web server port:\\nserver.port=3333\\n```\\n\\n修改数据库为mysql并配置mysql的url\\n\\n```properties\\n#*************** Config Module Related Configurations ***************#\\n### If use MySQL as datasource:\\n spring.datasource.platform=mysql\\n\\n### Count of DB:\\n db.num=1\\n\\n### Connect URL of DB:\\ndb.url.0=jdbc:mysql://127.0.0.1:3306/nacos_config?characterEncoding=utf8&connectTimeout=1000&socketTimeout=3000&autoReconnect=true&useUnicode=true&useSSL=false&serverTimezone=UTC\\ndb.user=root\\ndb.password=123456\\n```\\n\\n这时候配置就差不多啦可以开始启动服务了\\n\\n```sh\\n# 进入到nacos3333的bin目录\\ncd /usr/local/nacos/nacos3333/bin\\n# 执行启动脚本 因为nacos启动脚本默认就是使用集群模式所以不用更改\\n./startup.sh\\n```\\n\\n这时候我们可以查看nacos的启动状态\\n\\n```sh\\nps -ef | grep nacos\\n```\\n\\n> ![在这里插入图片描述](https://img-blog.csdnimg.cn/20201130205818481.png)\\n\\n\\n这时候我们应该就可以通过 服务器ip:3333/nacos访问到nacos\\n\\n> ![在这里插入图片描述](https://img-blog.csdnimg.cn/20201130205828641.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ0ODU5OA==,size_16,color_FFFFFF,t_70)\\n\\n\\n成功的访问到了nacos代表成功了。\\n\\n### nacos集群启动\\n\\n这时候我们就可以回到nacos目录下拷贝之前的nacos3333文件夹来启动nacos4444和nacos5555\\n\\n```sh\\ncd /usr/local/nacos\\n# cp -r 代表递归拷贝\\ncp -r nacos3333 nacos4444\\ncp -r nacos3333 nacos5555\\n```\\n\\n这时候再分别将nacos4444和nacos5555文件夹下的conf目录中的application.properties中的server.port更改为3333、4444然后再启动，这里我就不再演示了，和之前配置一样。\\n\\n随后我们再依次启动nacos4444，nacos5555\\n\\n###########################################################################\\n\\n启动后发现问题，nacos5555启动不起来，查看日志得到发现内存不足，nacos脚本默认给的最大内存是2G，我们可以去改小一点。\\n\\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201130205845619.png)\\n\\n原红框中限制的内存是2g 最小1g 适当该小一点[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传\\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201130205903628.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ0ODU5OA==,size_16,color_FFFFFF,t_70)\\n\\n\\n然后再依次启动三个服务\\n\\n登录任意一个nacos可以看到如下页面即集群启动成功\\n\\n### nginx配置\\n\\n这配置nginx负载均衡访问nacos\\n\\n```sh\\ncd /usr/local/nginx/conf\\nvim nginx.conf\\n```\\n\\n```conf\\n#user  nobody;\\nworker_processes  1;\\n\\n#error_log  logs/error.log;\\n#error_log  logs/error.log  notice;\\n#error_log  logs/error.log  info;\\n\\n#pid        logs/nginx.pid;\\n\\n\\nevents {\\n    worker_connections  1024;\\n}\\n\\n\\nhttp {\\n    include       mime.types;\\n    default_type  application/octet-stream;\\n\\n    #log_format  main  \'$remote_addr - $remote_user [$time_local] \\\"$request\\\" \'\\n    #                  \'$status $body_bytes_sent \\\"$http_referer\\\" \'\\n    #                  \'\\\"$http_user_agent\\\" \\\"$http_x_forwarded_for\\\"\';\\n\\n    #access_log  logs/access.log  main;\\n\\n    sendfile        on;\\n    #tcp_nopush     on;\\n\\n    #keepalive_timeout  0;\\n    keepalive_timeout  65;\\n\\n    #gzip  on;\\n\\n    #配置刚刚搭建好的nacos集群\\n    upstream cluster{                                                        \\n\\t    server 127.0.0.1:3333;\\n\\t    server 127.0.0.1:4444;\\n\\t    server 127.0.0.1:5555;\\n\\t}\\n\\n    server {\\n        listen       1111;\\n        server_name  nacos_cluster;\\n\\n        #charset koi8-r;\\n\\n        #access_log  logs/host.access.log  main;\\n\\n        location / {\\n            #root   html;\\n            #index  index.html index.htm;\\n            #将所有访问/的都映射到配置好的集群\\n            proxy_pass http://cluster;\\n        }\\n\\n        #error_page  404              /404.html;\\n\\n        # redirect server error pages to the static page /50x.html\\n        #\\n        error_page   500 502 503 504  /50x.html;\\n        location = /50x.html {\\n            root   html;\\n        }\\n\\n        # proxy the PHP scripts to Apache listening on 127.0.0.1:80\\n        #\\n        #location ~ \\\\.php$ {\\n        #    proxy_pass   http://127.0.0.1;\\n        #}\\n\\n        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000\\n        #\\n        #location ~ \\\\.php$ {\\n        #    root           html;\\n        #    fastcgi_pass   127.0.0.1:9000;\\n        #    fastcgi_index  index.php;\\n        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;\\n        #    include        fastcgi_params;\\n        #}\\n\\n        # deny access to .htaccess files, if Apache\'s document root\\n        # concurs with nginx\'s one\\n        #\\n        #location ~ /\\\\.ht {\\n        #    deny  all;\\n        #}\\n    }\\n\\n\\n    # another virtual host using mix of IP-, name-, and port-based configuration\\n    #\\n    #server {\\n    #    listen       8000;\\n    #    listen       somename:8080;\\n    #    server_name  somename  alias  another.alias;\\n\\n    #    location / {\\n    #        root   html;\\n    #        index  index.html index.htm;\\n    #    }\\n    #}\\n\\n\\n    # HTTPS server\\n    #\\n    #server {\\n    #    listen       443 ssl;\\n    #    server_name  localhost;\\n\\n    #    ssl_certificate      cert.pem;\\n    #    ssl_certificate_key  cert.key;\\n\\n    #    ssl_session_cache    shared:SSL:1m;\\n    #    ssl_session_timeout  5m;\\n\\n    #    ssl_ciphers  HIGH:!aNULL:!MD5;\\n    #    ssl_prefer_server_ciphers  on;\\n\\n    #    location / {\\n    #        root   html;\\n    #        index  index.html index.htm;\\n    #    }\\n    #}\\n}\\n```\\n\\n### nginx启动\\n\\n```sh\\ncd /usr/local/nginx/sbin\\n./nginx\\n```\\n\\n这时候我们就可以通过服务器ip地址:1111/nacos 来访问nacos集群了\\n\\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201130205927229.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ0ODU5OA==,size_16,color_FFFFFF,t_70)\\n\\n\\n关于使用NACOS集群遇到问题 -- CODE:503 MSG: SERVER IS STARTING NOW, PLEASE TRY AGAIN LATER!\\n\\n这时又出现了问题……在服务提供者注册服务时会报错\\n\\n```text\\n2020-11-30 00:36:59.492 ERROR 13140 --- [  restartedMain] c.a.c.n.registry.NacosServiceRegistry    : nacos registry, nacos-payment-provider register failed...NacosRegistration{nacosDiscoveryProperties=NacosDiscoveryProperties{serverAddr=\'wsy.oopsw.top:1111\', endpoint=\'\', namespace=\'\', watchDelay=30000, logName=\'\', service=\'nacos-payment-provider\', weight=1.0, clusterName=\'DEFAULT\', namingLoadCacheAtStart=\'false\', metadata={preserved.register.source=SPRING_CLOUD}, registerEnabled=true, ip=\'10.175.6.100\', networkInterface=\'\', port=9002, secure=false, accessKey=\'\', secretKey=\'\'}},\\n\\njava.lang.IllegalStateException: failed to req API:/nacos/v1/ns/instance after all servers([wsy.oopsw.top:1111]) tried: failed to req API:wsy.oopsw.top:1111/nacos/v1/ns/instance. code:503 msg: server is DOWN now, please try again later!\\n\\tat com.alibaba.nacos.client.naming.net.NamingProxy.reqAPI(NamingProxy.java:464) ~[nacos-client-1.1.1.jar:na]\\n\\tat com.alibaba.nacos.client.naming.net.NamingProxy.reqAPI(NamingProxy.java:386) ~[nacos-client-1.1.1.jar:na]\\n\\tat com.alibaba.nacos.client.naming.net.NamingProxy.registerService(NamingProxy.java:188) ~[nacos-client-1.1.1.jar:na]\\n\\tat com.alibaba.nacos.client.naming.NacosNamingService.registerInstance(NacosNamingService.java:205) ~[nacos-client-1.1.1.jar:na]\\n\\tat com.alibaba.nacos.client.naming.NacosNamingService.registerInstance(NacosNamingService.java:184) ~[nacos-client-1.1.1.jar:na]\\n\\tat com.alibaba.cloud.nacos.registry.NacosServiceRegistry.register(NacosServiceRegistry.java:61) ~[spring-cloud-alibaba-nacos-discovery-2.1.0.RELEASE.jar:2.1.0.RELEASE]\\n\\tat org.springframework.cloud.client.serviceregistry.AbstractAutoServiceRegistration.register(AbstractAutoServiceRegistration.java:239) [spring-cloud-commons-2.2.1.RELEASE.jar:2.2.1.RELEASE]\\n\\tat com.alibaba.cloud.nacos.registry.NacosAutoServiceRegistration.register(NacosAutoServiceRegistration.java:74) [spring-cloud-alibaba-nacos-discovery-2.1.0.RELEASE.jar:2.1.0.RELEASE]\\n\\tat org.springframework.cloud.client.serviceregistry.AbstractAutoServiceRegistration.start(AbstractAutoServiceRegistration.java:138) [spring-cloud-commons-2.2.1.RELEASE.jar:2.2.1.RELEASE]\\n\\tat org.springframework.cloud.client.serviceregistry.AbstractAutoServiceRegistration.bind(AbstractAutoServiceRegistration.java:101) [spring-cloud-commons-2.2.1.RELEASE.jar:2.2.1.RELEASE]\\n\\tat org.springframework.cloud.client.serviceregistry.AbstractAutoServiceRegistration.onApplicationEvent(AbstractAutoServiceRegistration.java:88) [spring-cloud-commons-2.2.1.RELEASE.jar:2.2.1.RELEASE]\\n\\tat org.springframework.cloud.client.serviceregistry.AbstractAutoServiceRegistration.onApplicationEvent(AbstractAutoServiceRegistration.java:47) [spring-cloud-commons-2.2.1.RELEASE.jar:2.2.1.RELEASE]\\n\\tat org.springframework.context.event.SimpleApplicationEventMulticaster.doInvokeListener(SimpleApplicationEventMulticaster.java:172) [spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]\\n\\tat org.springframework.context.event.SimpleApplicationEventMulticaster.invokeListener(SimpleApplicationEventMulticaster.java:165) [spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]\\n\\tat org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:139) [spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]\\n\\tat org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:403) [spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]\\n\\tat org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:360) [spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]\\n\\tat org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.finishRefresh(ServletWebServerApplicationContext.java:165) [spring-boot-2.2.2.RELEASE.jar:2.2.2.RELEASE]\\n\\tat org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:553) [spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]\\n\\tat org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:141) [spring-boot-2.2.2.RELEASE.jar:2.2.2.RELEASE]\\n\\tat org.springframework.boot.SpringApplication.refresh(SpringApplication.java:747) [spring-boot-2.2.2.RELEASE.jar:2.2.2.RELEASE]\\n\\tat org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:397) [spring-boot-2.2.2.RELEASE.jar:2.2.2.RELEASE]\\n\\tat org.springframework.boot.SpringApplication.run(SpringApplication.java:315) [spring-boot-2.2.2.RELEASE.jar:2.2.2.RELEASE]\\n\\tat org.springframework.boot.SpringApplication.run(SpringApplication.java:1226) [spring-boot-2.2.2.RELEASE.jar:2.2.2.RELEASE]\\n\\tat org.springframework.boot.SpringApplication.run(SpringApplication.java:1215) [spring-boot-2.2.2.RELEASE.jar:2.2.2.RELEASE]\\n\\tat com.wsy.springcloud.AlibabaProviderApplication.main(AlibabaProviderApplication.java:15) [classes/:na]\\n\\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_73]\\n\\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_73]\\n\\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_73]\\n\\tat java.lang.reflect.Method.invoke(Method.java:497) ~[na:1.8.0_73]\\n\\tat org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49) [spring-boot-devtools-2.2.2.RELEASE.jar:2.2.2.RELEASE]\\n```\\n\\n像阿里云、腾讯云这种云服务器, 会提供一个外网ip和内网ip, 访问外网ip时会指向对应的内网ip来访问到该服务器, 由于nacos集群内部是指定的使用网卡ip地址来进行通信,但是由于三台服务器各自的内网ip不在同一网段, 所以造成无法通信, 也会造成以下问题\\n\\n注册服务:\\n\\n```\\ncode:503 msg: server is STARTING now, please try again later!\\n```\\n\\nnaming-raft.log 日志:\\n\\n```\\n2019-05-15 00:02:00,000 WARN [IS LEADER] no leader is available now!\\n```\\n\\n这时只要修改启动参数, 设置本机ip地址就可以了\\n修改 nacos/bin/startup.sh 文件\\n找到 JVM Configuration 这部分, 在集群参数里增加 -Dnacos.server.ip=xx\\n\\n```sh\\n#===========================================================================================\\n# JVM Configuration\\n#===========================================================================================\\n\\n# 单机模式对应的启动参数\\nif [[ \\\"${MODE}\\\" == \\\"standalone\\\" ]]; then\\n    JAVA_OPT=\\\"${JAVA_OPT} -Xms512m -Xmx512m -Xmn256m\\\"\\n    JAVA_OPT=\\\"${JAVA_OPT} -Dnacos.standalone=true\\\"\\nelse\\n# 集群模式对应的启动参数\\n    JAVA_OPT=\\\"${JAVA_OPT} -server -Xms2g -Xmx2g -Xmn1g -XX:MetaspaceSize=128m -XX:MaxMetaspaceSize=320m\\\"\\n    JAVA_OPT=\\\"${JAVA_OPT} -XX:-OmitStackTraceInFastThrow -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=${BASE_DIR}/logs/java_heapdump.hprof\\\"\\n    JAVA_OPT=\\\"${JAVA_OPT} -XX:-UseLargePages\\\"\\n    \\n    # *新增以下参数设置本机ip地址*\\n    JAVA_OPT=\\\"${JAVA_OPT} -Dnacos.server.ip=本机ip\\\"\\n\\nfi\\n\\nif [[ \\\"${FUNCTION_MODE}\\\" == \\\"config\\\" ]]; then\\n    JAVA_OPT=\\\"${JAVA_OPT} -Dnacos.functionMode=config\\\"\\nelif [[ \\\"${FUNCTION_MODE}\\\" == \\\"naming\\\" ]]; then\\n    JAVA_OPT=\\\"${JAVA_OPT} -Dnacos.functionMode=naming\\\"\\nfi\\n\\n```\\n\\n参考博客：https://www.freesion.com/article/33101142210/\\n\\n服务注册时报BadRequest400 问题暂时还未解决\\n\\n```text\\ncom.alibaba.nacos.api.exception.NacosException: failed to req API:/nacos/v1/ns/instance after all servers([wsy.oopsw.top:1111]) tried: ErrCode:400, ErrMsg:<html><body><h1>Whitelabel Error Page</h1><p>This application has no explicit mapping for /error, so you are seeing this as a fallback.</p><div id=\'created\'>Mon Nov 30 01:33:45 CST 2020</div><div>There was an unexpected error (type=Bad Request, status=400).</div><div>receive invalid redirect request from peer 172.20.9.153</div></body></html>\\n```\\n\\n#############################################################\\n\\n问题已解决，是nacos版本的问题，据群里老哥解释说是nacos需要使用与之对应的SpringCloudAlibaba的版本，不然就会报错，我更换版本到1.3.2问题解决服务注册正常\",\"blogGoods\":0,\"blogId\":\"1333411378995605504\",\"blogImage\":\"http://808km.top/blog/img/img/default/1333411206555185152\",\"blogRead\":40,\"blogRemark\":\"nacos集群环境搭建\",\"blogTitle\":\"nacos集群环境搭建\",\"blogType\":20,\"createdTime\":1606745021000,\"typeName\":\"nacos\",\"updateTime\":1606973333000,\"version\":36},\"msg\":\"阅读成功\"}', '127.0.0.1', '2020-12-03 13:55:13', NULL);
INSERT INTO `bl_log` VALUES (2697, '阅读博客', '/blog/read/1333411378995605504', '[1333411378995605504]', 1, NULL, 'PUT', 545, '{\"code\":20000,\"data\":{\"blogCollection\":0,\"blogComment\":0,\"blogContent\":\"## 预备环境准备\\n\\nNacos 依赖 [Java](https://docs.oracle.com/cd/E19182-01/820-7851/inst_cli_jdk_javahome_t/) 环境来运行。如果您是从代码开始构建并运行Nacos，还需要为此配置 [Maven](https://maven.apache.org/index.html)环境，请确保是在以下版本环境中安装使用:\\n\\n1. 64 bit OS，支持 Linux/Unix/Mac/Windows，推荐选用 Linux/Unix/Mac。\\n2. 64 bit JDK 1.8+；[下载](http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html) & [配置](https://docs.oracle.com/cd/E19182-01/820-7851/inst_cli_jdk_javahome_t/)。\\n3. Maven 3.2.x+；[下载](https://maven.apache.org/download.cgi) & [配置](https://maven.apache.org/settings.html)。\\n\\n## 下载nacos安装包\\n\\nhttps://github.com/alibaba/nacos/releases/tag/1.4.0\\n\\n>  ![在这里插入图片描述](https://img-blog.csdnimg.cn/20201130205557917.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ0ODU5OA==,size_16,color_FFFFFF,t_70)\\n\\n\\nlinux选择第一个\\n\\nwindows选择第二个\\n\\n\\n\\n## 搭建环境\\n\\n### 集群模式部署\\n\\n这个快速开始手册是帮忙您快速在你的电脑上，下载安装并使用Nacos，部署生产使用的集群模式。\\n\\n### 集群部署架构图\\n\\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201130205609797.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ0ODU5OA==,size_16,color_FFFFFF,t_70)\\n\\n\\nVIP:虚拟ip\\n\\n因此开源的时候推荐用户把所有服务列表放到一个vip下面，然后挂到一个域名下面\\n\\nhttp://ip1:port/openAPI 直连ip模式，机器挂则需要修改ip才可以使用。\\n\\nhttp://VIP:port/openAPI 挂载VIP模式，直连vip即可，下面挂server真实ip，可读性不好。\\n\\nhttp://nacos.com:port/openAPI 域名 + VIP模式，可读性好，而且换ip方便，推荐模式\\n\\n### 创建目录\\n\\n该目录存放nacos集群\\n\\n```sh\\nmkdir /usr/local/nacos\\n```\\n\\n### 上传nacos\\n\\n> ![在这里插入图片描述](https://img-blog.csdnimg.cn/20201130205630233.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ0ODU5OA==,size_16,color_FFFFFF,t_70)\\n\\n### 解压nacos\\n\\n```sh\\ntar -zxvf nacos-server-1.4.0.tar.gz\\n```\\n\\n### 创建nacos持久化数据库\\n\\n首先使用navicat连接mysql数据库，然后创建数据库\\n\\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201130205643439.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ0ODU5OA==,size_16,color_FFFFFF,t_70)\\n\\n\\n新建数据库后导入SQL脚本即可\\n\\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201130205705669.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ0ODU5OA==,size_16,color_FFFFFF,t_70)\\n\\n红色框选那栏填写你的SQL脚本位置，SQL脚本在nacos文件夹下的conf下\\n\\n### nacos文件夹改名\\n\\n将文件夹名改为nacos3333代表这个nacos的端口号是3333\\n\\n```sh\\nmv nacos nacos3333\\n```\\n\\n### 配置修改\\n\\n首先进入到配置目录\\n\\n```sh\\ncd /usr/local/nacos/nacos3333/conf\\n```\\n\\n>![在这里插入图片描述](https://img-blog.csdnimg.cn/2020113020572431.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ0ODU5OA==,size_16,color_FFFFFF,t_70)\\n\\n\\n在更改配置之前先备份配置\\n\\n\\n\\n```sh\\ncp application.properties application.properties.example\\n```\\n\\n```sh\\ncp cluster.conf.example cluster.conf\\n```\\n\\n### 集群配置\\n\\n```sh\\nvim cluster.conf\\n```\\n\\n>![在这里插入图片描述](https://img-blog.csdnimg.cn/20201130205739435.png)\\n\\n>\\n> 注意这里不能填写localhost 或者127.0.0.1，这里如果是在本机搭建可以查看本机ip后填写\\n>\\n> ```sh\\n> hostname -i\\n> ```\\n>\\n>![在这里插入图片描述](https://img-blog.csdnimg.cn/20201130205749116.png)\\n\\n\\n### nacos配置\\n\\n```sh\\nvim application.properties\\n```\\n\\n```properties\\n\\n#*************** Spring Boot Related Configurations ***************#\\n### Default web context path:\\nserver.servlet.contextPath=/nacos\\n### Default web server port:\\nserver.port=3333\\n\\n#*************** Network Related Configurations ***************#\\n### If prefer hostname over ip for Nacos server addresses in cluster.conf:\\n# nacos.inetutils.prefer-hostname-over-ip=false\\n\\n### Specify local server\'s IP:\\n# nacos.inetutils.ip-address=\\n\\n\\n#*************** Config Module Related Configurations ***************#\\n### If use MySQL as datasource:\\nspring.datasource.platform=mysql\\n\\n### Count of DB:\\ndb.num=1\\n\\n### Connect URL of DB:\\ndb.url.0=jdbc:mysql://127.0.0.1:3306/nacos_config?characterEncoding=utf8&connectTimeout=1000&socketTimeout=3000&autoReconnect=true&useUnicode=true&useSSL=false&serverTimezone=UTC\\ndb.user=root\\ndb.password=123456\\n\\n\\n#*************** Naming Module Related Configurations ***************#\\n### Data dispatch task execution period in milliseconds:\\n# nacos.naming.distro.taskDispatchPeriod=200\\n\\n### Data count of batch sync task:\\n# nacos.naming.distro.batchSyncKeyCount=1000\\n\\n### Retry delay in milliseconds if sync task failed:\\n# nacos.naming.distro.syncRetryDelay=5000\\n\\n### If enable data warmup. If set to false, the server would accept request without local data preparation:\\n# nacos.naming.data.warmup=true\\n\\n### If enable the instance auto expiration, kind like of health check of instance:\\n# nacos.naming.expireInstance=true\\n\\nnacos.naming.empty-service.auto-clean=true\\nnacos.naming.empty-service.clean.initial-delay-ms=50000\\nnacos.naming.empty-service.clean.period-time-ms=30000\\n\\n\\n#*************** CMDB Module Related Configurations ***************#\\n### The interval to dump external CMDB in seconds:\\n# nacos.cmdb.dumpTaskInterval=3600\\n\\n### The interval of polling data change event in seconds:\\n# nacos.cmdb.eventTaskInterval=10\\n\\n### The interval of loading labels in seconds:\\n# nacos.cmdb.labelTaskInterval=300\\n\\n### If turn on data loading task:\\n# nacos.cmdb.loadDataAtStart=false\\n\\n\\n#*************** Metrics Related Configurations ***************#\\n### Metrics for prometheus\\n#management.endpoints.web.exposure.include=*\\n\\n### Metrics for elastic search\\nmanagement.metrics.export.elastic.enabled=false\\n#management.metrics.export.elastic.host=http://localhost:9200\\n\\n### Metrics for influx\\nmanagement.metrics.export.influx.enabled=false\\n#management.metrics.export.influx.db=springboot\\n#management.metrics.export.influx.uri=http://localhost:8086\\n#management.metrics.export.influx.auto-create-db=true\\n#management.metrics.export.influx.consistency=one\\n#management.metrics.export.influx.compressed=true\\n\\n\\n#*************** Access Log Related Configurations ***************#\\n### If turn on the access log:\\nserver.tomcat.accesslog.enabled=true\\n\\n### The access log pattern:\\nserver.tomcat.accesslog.pattern=%h %l %u %t \\\"%r\\\" %s %b %D %{User-Agent}i %{Request-Source}i\\n\\n### The directory of access log:\\nserver.tomcat.basedir=\\n\\n\\n#*************** Access Control Related Configurations ***************#\\n### If enable spring security, this option is deprecated in 1.2.0:\\n#spring.security.enabled=false\\n\\n### The ignore urls of auth, is deprecated in 1.2.0:\\nnacos.security.ignore.urls=/,/error,/**/*.css,/**/*.js,/**/*.html,/**/*.map,/**/*.svg,/**/*.png,/**/*.ico,/console-fe/public/**,/v1/auth/**,/v1/console/health/**,/actuator/**,/v1/console/server/**\\n\\n### The auth system to use, currently only \'nacos\' is supported:\\nnacos.core.auth.system.type=nacos\\n\\n### If turn on auth system:\\nnacos.core.auth.enabled=false\\n\\n### The token expiration in seconds:\\nnacos.core.auth.default.token.expire.seconds=18000\\n\\n### The default token:\\nnacos.core.auth.default.token.secret.key=SecretKey012345678901234567890123456789012345678901234567890123456789\\n\\n### Turn on/off caching of auth information. By turning on this switch, the update of auth information would have a 15 seconds delay.\\nnacos.core.auth.caching.enabled=true\\n\\n\\n#*************** Istio Related Configurations ***************#\\n### If turn on the MCP server:\\nnacos.istio.mcp.server.enabled=false\\n\\n\\n\\n###*************** Add from 1.3.0 ***************###\\n\\n\\n#*************** Core Related Configurations ***************#\\n\\n### set the WorkerID manually\\n# nacos.core.snowflake.worker-id=\\n\\n### Member-MetaData\\n# nacos.core.member.meta.site=\\n# nacos.core.member.meta.adweight=\\n# nacos.core.member.meta.weight=\\n\\n### MemberLookup\\n### Addressing pattern category, If set, the priority is highest\\n# nacos.core.member.lookup.type=[file,address-server]\\n## Set the cluster list with a configuration file or command-line argument\\n# nacos.member.list=192.168.16.101:8847?raft_port=8807,192.168.16.101?raft_port=8808,192.168.16.101:8849?raft_port=8809\\n## for AddressServerMemberLookup\\n# Maximum number of retries to query the address server upon initialization\\n# nacos.core.address-server.retry=5\\n## Server domain name address of [address-server] mode\\n# address.server.domain=jmenv.tbsite.net\\n## Server port of [address-server] mode\\n# address.server.port=8080\\n## Request address of [address-server] mode\\n# address.server.url=/nacos/serverlist\\n\\n#*************** JRaft Related Configurations ***************#\\n\\n### Sets the Raft cluster election timeout, default value is 5 second\\n# nacos.core.protocol.raft.data.election_timeout_ms=5000\\n### Sets the amount of time the Raft snapshot will execute periodically, default is 30 minute\\n# nacos.core.protocol.raft.data.snapshot_interval_secs=30\\n### raft internal worker threads\\n# nacos.core.protocol.raft.data.core_thread_num=8\\n### Number of threads required for raft business request processing\\n# nacos.core.protocol.raft.data.cli_service_thread_num=4\\n### raft linear read strategy. Safe linear reads are used by default, that is, the Leader tenure is confirmed by heartbeat\\n# nacos.core.protocol.raft.data.read_index_type=ReadOnlySafe\\n### rpc request timeout, default 5 seconds\\n# nacos.core.protocol.raft.data.rpc_request_timeout_ms=5000\\n\\n```\\n\\n这是我的整个application.properties文件,其中主要修改的地方有两处\\n\\n修改端口号\\n\\n```properties\\n### Default web server port:\\nserver.port=3333\\n```\\n\\n修改数据库为mysql并配置mysql的url\\n\\n```properties\\n#*************** Config Module Related Configurations ***************#\\n### If use MySQL as datasource:\\n spring.datasource.platform=mysql\\n\\n### Count of DB:\\n db.num=1\\n\\n### Connect URL of DB:\\ndb.url.0=jdbc:mysql://127.0.0.1:3306/nacos_config?characterEncoding=utf8&connectTimeout=1000&socketTimeout=3000&autoReconnect=true&useUnicode=true&useSSL=false&serverTimezone=UTC\\ndb.user=root\\ndb.password=123456\\n```\\n\\n这时候配置就差不多啦可以开始启动服务了\\n\\n```sh\\n# 进入到nacos3333的bin目录\\ncd /usr/local/nacos/nacos3333/bin\\n# 执行启动脚本 因为nacos启动脚本默认就是使用集群模式所以不用更改\\n./startup.sh\\n```\\n\\n这时候我们可以查看nacos的启动状态\\n\\n```sh\\nps -ef | grep nacos\\n```\\n\\n> ![在这里插入图片描述](https://img-blog.csdnimg.cn/20201130205818481.png)\\n\\n\\n这时候我们应该就可以通过 服务器ip:3333/nacos访问到nacos\\n\\n> ![在这里插入图片描述](https://img-blog.csdnimg.cn/20201130205828641.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ0ODU5OA==,size_16,color_FFFFFF,t_70)\\n\\n\\n成功的访问到了nacos代表成功了。\\n\\n### nacos集群启动\\n\\n这时候我们就可以回到nacos目录下拷贝之前的nacos3333文件夹来启动nacos4444和nacos5555\\n\\n```sh\\ncd /usr/local/nacos\\n# cp -r 代表递归拷贝\\ncp -r nacos3333 nacos4444\\ncp -r nacos3333 nacos5555\\n```\\n\\n这时候再分别将nacos4444和nacos5555文件夹下的conf目录中的application.properties中的server.port更改为3333、4444然后再启动，这里我就不再演示了，和之前配置一样。\\n\\n随后我们再依次启动nacos4444，nacos5555\\n\\n###########################################################################\\n\\n启动后发现问题，nacos5555启动不起来，查看日志得到发现内存不足，nacos脚本默认给的最大内存是2G，我们可以去改小一点。\\n\\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201130205845619.png)\\n\\n原红框中限制的内存是2g 最小1g 适当该小一点[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传\\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201130205903628.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ0ODU5OA==,size_16,color_FFFFFF,t_70)\\n\\n\\n然后再依次启动三个服务\\n\\n登录任意一个nacos可以看到如下页面即集群启动成功\\n\\n### nginx配置\\n\\n这配置nginx负载均衡访问nacos\\n\\n```sh\\ncd /usr/local/nginx/conf\\nvim nginx.conf\\n```\\n\\n```conf\\n#user  nobody;\\nworker_processes  1;\\n\\n#error_log  logs/error.log;\\n#error_log  logs/error.log  notice;\\n#error_log  logs/error.log  info;\\n\\n#pid        logs/nginx.pid;\\n\\n\\nevents {\\n    worker_connections  1024;\\n}\\n\\n\\nhttp {\\n    include       mime.types;\\n    default_type  application/octet-stream;\\n\\n    #log_format  main  \'$remote_addr - $remote_user [$time_local] \\\"$request\\\" \'\\n    #                  \'$status $body_bytes_sent \\\"$http_referer\\\" \'\\n    #                  \'\\\"$http_user_agent\\\" \\\"$http_x_forwarded_for\\\"\';\\n\\n    #access_log  logs/access.log  main;\\n\\n    sendfile        on;\\n    #tcp_nopush     on;\\n\\n    #keepalive_timeout  0;\\n    keepalive_timeout  65;\\n\\n    #gzip  on;\\n\\n    #配置刚刚搭建好的nacos集群\\n    upstream cluster{                                                        \\n\\t    server 127.0.0.1:3333;\\n\\t    server 127.0.0.1:4444;\\n\\t    server 127.0.0.1:5555;\\n\\t}\\n\\n    server {\\n        listen       1111;\\n        server_name  nacos_cluster;\\n\\n        #charset koi8-r;\\n\\n        #access_log  logs/host.access.log  main;\\n\\n        location / {\\n            #root   html;\\n            #index  index.html index.htm;\\n            #将所有访问/的都映射到配置好的集群\\n            proxy_pass http://cluster;\\n        }\\n\\n        #error_page  404              /404.html;\\n\\n        # redirect server error pages to the static page /50x.html\\n        #\\n        error_page   500 502 503 504  /50x.html;\\n        location = /50x.html {\\n            root   html;\\n        }\\n\\n        # proxy the PHP scripts to Apache listening on 127.0.0.1:80\\n        #\\n        #location ~ \\\\.php$ {\\n        #    proxy_pass   http://127.0.0.1;\\n        #}\\n\\n        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000\\n        #\\n        #location ~ \\\\.php$ {\\n        #    root           html;\\n        #    fastcgi_pass   127.0.0.1:9000;\\n        #    fastcgi_index  index.php;\\n        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;\\n        #    include        fastcgi_params;\\n        #}\\n\\n        # deny access to .htaccess files, if Apache\'s document root\\n        # concurs with nginx\'s one\\n        #\\n        #location ~ /\\\\.ht {\\n        #    deny  all;\\n        #}\\n    }\\n\\n\\n    # another virtual host using mix of IP-, name-, and port-based configuration\\n    #\\n    #server {\\n    #    listen       8000;\\n    #    listen       somename:8080;\\n    #    server_name  somename  alias  another.alias;\\n\\n    #    location / {\\n    #        root   html;\\n    #        index  index.html index.htm;\\n    #    }\\n    #}\\n\\n\\n    # HTTPS server\\n    #\\n    #server {\\n    #    listen       443 ssl;\\n    #    server_name  localhost;\\n\\n    #    ssl_certificate      cert.pem;\\n    #    ssl_certificate_key  cert.key;\\n\\n    #    ssl_session_cache    shared:SSL:1m;\\n    #    ssl_session_timeout  5m;\\n\\n    #    ssl_ciphers  HIGH:!aNULL:!MD5;\\n    #    ssl_prefer_server_ciphers  on;\\n\\n    #    location / {\\n    #        root   html;\\n    #        index  index.html index.htm;\\n    #    }\\n    #}\\n}\\n```\\n\\n### nginx启动\\n\\n```sh\\ncd /usr/local/nginx/sbin\\n./nginx\\n```\\n\\n这时候我们就可以通过服务器ip地址:1111/nacos 来访问nacos集群了\\n\\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201130205927229.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ0ODU5OA==,size_16,color_FFFFFF,t_70)\\n\\n\\n关于使用NACOS集群遇到问题 -- CODE:503 MSG: SERVER IS STARTING NOW, PLEASE TRY AGAIN LATER!\\n\\n这时又出现了问题……在服务提供者注册服务时会报错\\n\\n```text\\n2020-11-30 00:36:59.492 ERROR 13140 --- [  restartedMain] c.a.c.n.registry.NacosServiceRegistry    : nacos registry, nacos-payment-provider register failed...NacosRegistration{nacosDiscoveryProperties=NacosDiscoveryProperties{serverAddr=\'wsy.oopsw.top:1111\', endpoint=\'\', namespace=\'\', watchDelay=30000, logName=\'\', service=\'nacos-payment-provider\', weight=1.0, clusterName=\'DEFAULT\', namingLoadCacheAtStart=\'false\', metadata={preserved.register.source=SPRING_CLOUD}, registerEnabled=true, ip=\'10.175.6.100\', networkInterface=\'\', port=9002, secure=false, accessKey=\'\', secretKey=\'\'}},\\n\\njava.lang.IllegalStateException: failed to req API:/nacos/v1/ns/instance after all servers([wsy.oopsw.top:1111]) tried: failed to req API:wsy.oopsw.top:1111/nacos/v1/ns/instance. code:503 msg: server is DOWN now, please try again later!\\n\\tat com.alibaba.nacos.client.naming.net.NamingProxy.reqAPI(NamingProxy.java:464) ~[nacos-client-1.1.1.jar:na]\\n\\tat com.alibaba.nacos.client.naming.net.NamingProxy.reqAPI(NamingProxy.java:386) ~[nacos-client-1.1.1.jar:na]\\n\\tat com.alibaba.nacos.client.naming.net.NamingProxy.registerService(NamingProxy.java:188) ~[nacos-client-1.1.1.jar:na]\\n\\tat com.alibaba.nacos.client.naming.NacosNamingService.registerInstance(NacosNamingService.java:205) ~[nacos-client-1.1.1.jar:na]\\n\\tat com.alibaba.nacos.client.naming.NacosNamingService.registerInstance(NacosNamingService.java:184) ~[nacos-client-1.1.1.jar:na]\\n\\tat com.alibaba.cloud.nacos.registry.NacosServiceRegistry.register(NacosServiceRegistry.java:61) ~[spring-cloud-alibaba-nacos-discovery-2.1.0.RELEASE.jar:2.1.0.RELEASE]\\n\\tat org.springframework.cloud.client.serviceregistry.AbstractAutoServiceRegistration.register(AbstractAutoServiceRegistration.java:239) [spring-cloud-commons-2.2.1.RELEASE.jar:2.2.1.RELEASE]\\n\\tat com.alibaba.cloud.nacos.registry.NacosAutoServiceRegistration.register(NacosAutoServiceRegistration.java:74) [spring-cloud-alibaba-nacos-discovery-2.1.0.RELEASE.jar:2.1.0.RELEASE]\\n\\tat org.springframework.cloud.client.serviceregistry.AbstractAutoServiceRegistration.start(AbstractAutoServiceRegistration.java:138) [spring-cloud-commons-2.2.1.RELEASE.jar:2.2.1.RELEASE]\\n\\tat org.springframework.cloud.client.serviceregistry.AbstractAutoServiceRegistration.bind(AbstractAutoServiceRegistration.java:101) [spring-cloud-commons-2.2.1.RELEASE.jar:2.2.1.RELEASE]\\n\\tat org.springframework.cloud.client.serviceregistry.AbstractAutoServiceRegistration.onApplicationEvent(AbstractAutoServiceRegistration.java:88) [spring-cloud-commons-2.2.1.RELEASE.jar:2.2.1.RELEASE]\\n\\tat org.springframework.cloud.client.serviceregistry.AbstractAutoServiceRegistration.onApplicationEvent(AbstractAutoServiceRegistration.java:47) [spring-cloud-commons-2.2.1.RELEASE.jar:2.2.1.RELEASE]\\n\\tat org.springframework.context.event.SimpleApplicationEventMulticaster.doInvokeListener(SimpleApplicationEventMulticaster.java:172) [spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]\\n\\tat org.springframework.context.event.SimpleApplicationEventMulticaster.invokeListener(SimpleApplicationEventMulticaster.java:165) [spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]\\n\\tat org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:139) [spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]\\n\\tat org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:403) [spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]\\n\\tat org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:360) [spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]\\n\\tat org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.finishRefresh(ServletWebServerApplicationContext.java:165) [spring-boot-2.2.2.RELEASE.jar:2.2.2.RELEASE]\\n\\tat org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:553) [spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]\\n\\tat org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:141) [spring-boot-2.2.2.RELEASE.jar:2.2.2.RELEASE]\\n\\tat org.springframework.boot.SpringApplication.refresh(SpringApplication.java:747) [spring-boot-2.2.2.RELEASE.jar:2.2.2.RELEASE]\\n\\tat org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:397) [spring-boot-2.2.2.RELEASE.jar:2.2.2.RELEASE]\\n\\tat org.springframework.boot.SpringApplication.run(SpringApplication.java:315) [spring-boot-2.2.2.RELEASE.jar:2.2.2.RELEASE]\\n\\tat org.springframework.boot.SpringApplication.run(SpringApplication.java:1226) [spring-boot-2.2.2.RELEASE.jar:2.2.2.RELEASE]\\n\\tat org.springframework.boot.SpringApplication.run(SpringApplication.java:1215) [spring-boot-2.2.2.RELEASE.jar:2.2.2.RELEASE]\\n\\tat com.wsy.springcloud.AlibabaProviderApplication.main(AlibabaProviderApplication.java:15) [classes/:na]\\n\\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_73]\\n\\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_73]\\n\\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_73]\\n\\tat java.lang.reflect.Method.invoke(Method.java:497) ~[na:1.8.0_73]\\n\\tat org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49) [spring-boot-devtools-2.2.2.RELEASE.jar:2.2.2.RELEASE]\\n```\\n\\n像阿里云、腾讯云这种云服务器, 会提供一个外网ip和内网ip, 访问外网ip时会指向对应的内网ip来访问到该服务器, 由于nacos集群内部是指定的使用网卡ip地址来进行通信,但是由于三台服务器各自的内网ip不在同一网段, 所以造成无法通信, 也会造成以下问题\\n\\n注册服务:\\n\\n```\\ncode:503 msg: server is STARTING now, please try again later!\\n```\\n\\nnaming-raft.log 日志:\\n\\n```\\n2019-05-15 00:02:00,000 WARN [IS LEADER] no leader is available now!\\n```\\n\\n这时只要修改启动参数, 设置本机ip地址就可以了\\n修改 nacos/bin/startup.sh 文件\\n找到 JVM Configuration 这部分, 在集群参数里增加 -Dnacos.server.ip=xx\\n\\n```sh\\n#===========================================================================================\\n# JVM Configuration\\n#===========================================================================================\\n\\n# 单机模式对应的启动参数\\nif [[ \\\"${MODE}\\\" == \\\"standalone\\\" ]]; then\\n    JAVA_OPT=\\\"${JAVA_OPT} -Xms512m -Xmx512m -Xmn256m\\\"\\n    JAVA_OPT=\\\"${JAVA_OPT} -Dnacos.standalone=true\\\"\\nelse\\n# 集群模式对应的启动参数\\n    JAVA_OPT=\\\"${JAVA_OPT} -server -Xms2g -Xmx2g -Xmn1g -XX:MetaspaceSize=128m -XX:MaxMetaspaceSize=320m\\\"\\n    JAVA_OPT=\\\"${JAVA_OPT} -XX:-OmitStackTraceInFastThrow -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=${BASE_DIR}/logs/java_heapdump.hprof\\\"\\n    JAVA_OPT=\\\"${JAVA_OPT} -XX:-UseLargePages\\\"\\n    \\n    # *新增以下参数设置本机ip地址*\\n    JAVA_OPT=\\\"${JAVA_OPT} -Dnacos.server.ip=本机ip\\\"\\n\\nfi\\n\\nif [[ \\\"${FUNCTION_MODE}\\\" == \\\"config\\\" ]]; then\\n    JAVA_OPT=\\\"${JAVA_OPT} -Dnacos.functionMode=config\\\"\\nelif [[ \\\"${FUNCTION_MODE}\\\" == \\\"naming\\\" ]]; then\\n    JAVA_OPT=\\\"${JAVA_OPT} -Dnacos.functionMode=naming\\\"\\nfi\\n\\n```\\n\\n参考博客：https://www.freesion.com/article/33101142210/\\n\\n服务注册时报BadRequest400 问题暂时还未解决\\n\\n```text\\ncom.alibaba.nacos.api.exception.NacosException: failed to req API:/nacos/v1/ns/instance after all servers([wsy.oopsw.top:1111]) tried: ErrCode:400, ErrMsg:<html><body><h1>Whitelabel Error Page</h1><p>This application has no explicit mapping for /error, so you are seeing this as a fallback.</p><div id=\'created\'>Mon Nov 30 01:33:45 CST 2020</div><div>There was an unexpected error (type=Bad Request, status=400).</div><div>receive invalid redirect request from peer 172.20.9.153</div></body></html>\\n```\\n\\n#############################################################\\n\\n问题已解决，是nacos版本的问题，据群里老哥解释说是nacos需要使用与之对应的SpringCloudAlibaba的版本，不然就会报错，我更换版本到1.3.2问题解决服务注册正常\",\"blogGoods\":0,\"blogId\":\"1333411378995605504\",\"blogImage\":\"http://808km.top/blog/img/img/default/1333411206555185152\",\"blogRead\":41,\"blogRemark\":\"nacos集群环境搭建\",\"blogTitle\":\"nacos集群环境搭建\",\"blogType\":20,\"createdTime\":1606745021000,\"typeName\":\"nacos\",\"updateTime\":1606974913000,\"version\":36},\"msg\":\"阅读成功\"}', '127.0.0.1', '2020-12-03 13:55:38', NULL);
INSERT INTO `bl_log` VALUES (2698, '阅读博客', '/blog/read/1333411378995605504', '[1333411378995605504]', 1, NULL, 'PUT', 546, '{\"code\":20000,\"data\":{\"blogCollection\":0,\"blogComment\":0,\"blogContent\":\"## 预备环境准备\\n\\nNacos 依赖 [Java](https://docs.oracle.com/cd/E19182-01/820-7851/inst_cli_jdk_javahome_t/) 环境来运行。如果您是从代码开始构建并运行Nacos，还需要为此配置 [Maven](https://maven.apache.org/index.html)环境，请确保是在以下版本环境中安装使用:\\n\\n1. 64 bit OS，支持 Linux/Unix/Mac/Windows，推荐选用 Linux/Unix/Mac。\\n2. 64 bit JDK 1.8+；[下载](http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html) & [配置](https://docs.oracle.com/cd/E19182-01/820-7851/inst_cli_jdk_javahome_t/)。\\n3. Maven 3.2.x+；[下载](https://maven.apache.org/download.cgi) & [配置](https://maven.apache.org/settings.html)。\\n\\n## 下载nacos安装包\\n\\nhttps://github.com/alibaba/nacos/releases/tag/1.4.0\\n\\n>  ![在这里插入图片描述](https://img-blog.csdnimg.cn/20201130205557917.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ0ODU5OA==,size_16,color_FFFFFF,t_70)\\n\\n\\nlinux选择第一个\\n\\nwindows选择第二个\\n\\n\\n\\n## 搭建环境\\n\\n### 集群模式部署\\n\\n这个快速开始手册是帮忙您快速在你的电脑上，下载安装并使用Nacos，部署生产使用的集群模式。\\n\\n### 集群部署架构图\\n\\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201130205609797.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ0ODU5OA==,size_16,color_FFFFFF,t_70)\\n\\n\\nVIP:虚拟ip\\n\\n因此开源的时候推荐用户把所有服务列表放到一个vip下面，然后挂到一个域名下面\\n\\nhttp://ip1:port/openAPI 直连ip模式，机器挂则需要修改ip才可以使用。\\n\\nhttp://VIP:port/openAPI 挂载VIP模式，直连vip即可，下面挂server真实ip，可读性不好。\\n\\nhttp://nacos.com:port/openAPI 域名 + VIP模式，可读性好，而且换ip方便，推荐模式\\n\\n### 创建目录\\n\\n该目录存放nacos集群\\n\\n```sh\\nmkdir /usr/local/nacos\\n```\\n\\n### 上传nacos\\n\\n> ![在这里插入图片描述](https://img-blog.csdnimg.cn/20201130205630233.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ0ODU5OA==,size_16,color_FFFFFF,t_70)\\n\\n### 解压nacos\\n\\n```sh\\ntar -zxvf nacos-server-1.4.0.tar.gz\\n```\\n\\n### 创建nacos持久化数据库\\n\\n首先使用navicat连接mysql数据库，然后创建数据库\\n\\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201130205643439.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ0ODU5OA==,size_16,color_FFFFFF,t_70)\\n\\n\\n新建数据库后导入SQL脚本即可\\n\\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201130205705669.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ0ODU5OA==,size_16,color_FFFFFF,t_70)\\n\\n红色框选那栏填写你的SQL脚本位置，SQL脚本在nacos文件夹下的conf下\\n\\n### nacos文件夹改名\\n\\n将文件夹名改为nacos3333代表这个nacos的端口号是3333\\n\\n```sh\\nmv nacos nacos3333\\n```\\n\\n### 配置修改\\n\\n首先进入到配置目录\\n\\n```sh\\ncd /usr/local/nacos/nacos3333/conf\\n```\\n\\n>![在这里插入图片描述](https://img-blog.csdnimg.cn/2020113020572431.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ0ODU5OA==,size_16,color_FFFFFF,t_70)\\n\\n\\n在更改配置之前先备份配置\\n\\n\\n\\n```sh\\ncp application.properties application.properties.example\\n```\\n\\n```sh\\ncp cluster.conf.example cluster.conf\\n```\\n\\n### 集群配置\\n\\n```sh\\nvim cluster.conf\\n```\\n\\n>![在这里插入图片描述](https://img-blog.csdnimg.cn/20201130205739435.png)\\n\\n>\\n> 注意这里不能填写localhost 或者127.0.0.1，这里如果是在本机搭建可以查看本机ip后填写\\n>\\n> ```sh\\n> hostname -i\\n> ```\\n>\\n>![在这里插入图片描述](https://img-blog.csdnimg.cn/20201130205749116.png)\\n\\n\\n### nacos配置\\n\\n```sh\\nvim application.properties\\n```\\n\\n```properties\\n\\n#*************** Spring Boot Related Configurations ***************#\\n### Default web context path:\\nserver.servlet.contextPath=/nacos\\n### Default web server port:\\nserver.port=3333\\n\\n#*************** Network Related Configurations ***************#\\n### If prefer hostname over ip for Nacos server addresses in cluster.conf:\\n# nacos.inetutils.prefer-hostname-over-ip=false\\n\\n### Specify local server\'s IP:\\n# nacos.inetutils.ip-address=\\n\\n\\n#*************** Config Module Related Configurations ***************#\\n### If use MySQL as datasource:\\nspring.datasource.platform=mysql\\n\\n### Count of DB:\\ndb.num=1\\n\\n### Connect URL of DB:\\ndb.url.0=jdbc:mysql://127.0.0.1:3306/nacos_config?characterEncoding=utf8&connectTimeout=1000&socketTimeout=3000&autoReconnect=true&useUnicode=true&useSSL=false&serverTimezone=UTC\\ndb.user=root\\ndb.password=123456\\n\\n\\n#*************** Naming Module Related Configurations ***************#\\n### Data dispatch task execution period in milliseconds:\\n# nacos.naming.distro.taskDispatchPeriod=200\\n\\n### Data count of batch sync task:\\n# nacos.naming.distro.batchSyncKeyCount=1000\\n\\n### Retry delay in milliseconds if sync task failed:\\n# nacos.naming.distro.syncRetryDelay=5000\\n\\n### If enable data warmup. If set to false, the server would accept request without local data preparation:\\n# nacos.naming.data.warmup=true\\n\\n### If enable the instance auto expiration, kind like of health check of instance:\\n# nacos.naming.expireInstance=true\\n\\nnacos.naming.empty-service.auto-clean=true\\nnacos.naming.empty-service.clean.initial-delay-ms=50000\\nnacos.naming.empty-service.clean.period-time-ms=30000\\n\\n\\n#*************** CMDB Module Related Configurations ***************#\\n### The interval to dump external CMDB in seconds:\\n# nacos.cmdb.dumpTaskInterval=3600\\n\\n### The interval of polling data change event in seconds:\\n# nacos.cmdb.eventTaskInterval=10\\n\\n### The interval of loading labels in seconds:\\n# nacos.cmdb.labelTaskInterval=300\\n\\n### If turn on data loading task:\\n# nacos.cmdb.loadDataAtStart=false\\n\\n\\n#*************** Metrics Related Configurations ***************#\\n### Metrics for prometheus\\n#management.endpoints.web.exposure.include=*\\n\\n### Metrics for elastic search\\nmanagement.metrics.export.elastic.enabled=false\\n#management.metrics.export.elastic.host=http://localhost:9200\\n\\n### Metrics for influx\\nmanagement.metrics.export.influx.enabled=false\\n#management.metrics.export.influx.db=springboot\\n#management.metrics.export.influx.uri=http://localhost:8086\\n#management.metrics.export.influx.auto-create-db=true\\n#management.metrics.export.influx.consistency=one\\n#management.metrics.export.influx.compressed=true\\n\\n\\n#*************** Access Log Related Configurations ***************#\\n### If turn on the access log:\\nserver.tomcat.accesslog.enabled=true\\n\\n### The access log pattern:\\nserver.tomcat.accesslog.pattern=%h %l %u %t \\\"%r\\\" %s %b %D %{User-Agent}i %{Request-Source}i\\n\\n### The directory of access log:\\nserver.tomcat.basedir=\\n\\n\\n#*************** Access Control Related Configurations ***************#\\n### If enable spring security, this option is deprecated in 1.2.0:\\n#spring.security.enabled=false\\n\\n### The ignore urls of auth, is deprecated in 1.2.0:\\nnacos.security.ignore.urls=/,/error,/**/*.css,/**/*.js,/**/*.html,/**/*.map,/**/*.svg,/**/*.png,/**/*.ico,/console-fe/public/**,/v1/auth/**,/v1/console/health/**,/actuator/**,/v1/console/server/**\\n\\n### The auth system to use, currently only \'nacos\' is supported:\\nnacos.core.auth.system.type=nacos\\n\\n### If turn on auth system:\\nnacos.core.auth.enabled=false\\n\\n### The token expiration in seconds:\\nnacos.core.auth.default.token.expire.seconds=18000\\n\\n### The default token:\\nnacos.core.auth.default.token.secret.key=SecretKey012345678901234567890123456789012345678901234567890123456789\\n\\n### Turn on/off caching of auth information. By turning on this switch, the update of auth information would have a 15 seconds delay.\\nnacos.core.auth.caching.enabled=true\\n\\n\\n#*************** Istio Related Configurations ***************#\\n### If turn on the MCP server:\\nnacos.istio.mcp.server.enabled=false\\n\\n\\n\\n###*************** Add from 1.3.0 ***************###\\n\\n\\n#*************** Core Related Configurations ***************#\\n\\n### set the WorkerID manually\\n# nacos.core.snowflake.worker-id=\\n\\n### Member-MetaData\\n# nacos.core.member.meta.site=\\n# nacos.core.member.meta.adweight=\\n# nacos.core.member.meta.weight=\\n\\n### MemberLookup\\n### Addressing pattern category, If set, the priority is highest\\n# nacos.core.member.lookup.type=[file,address-server]\\n## Set the cluster list with a configuration file or command-line argument\\n# nacos.member.list=192.168.16.101:8847?raft_port=8807,192.168.16.101?raft_port=8808,192.168.16.101:8849?raft_port=8809\\n## for AddressServerMemberLookup\\n# Maximum number of retries to query the address server upon initialization\\n# nacos.core.address-server.retry=5\\n## Server domain name address of [address-server] mode\\n# address.server.domain=jmenv.tbsite.net\\n## Server port of [address-server] mode\\n# address.server.port=8080\\n## Request address of [address-server] mode\\n# address.server.url=/nacos/serverlist\\n\\n#*************** JRaft Related Configurations ***************#\\n\\n### Sets the Raft cluster election timeout, default value is 5 second\\n# nacos.core.protocol.raft.data.election_timeout_ms=5000\\n### Sets the amount of time the Raft snapshot will execute periodically, default is 30 minute\\n# nacos.core.protocol.raft.data.snapshot_interval_secs=30\\n### raft internal worker threads\\n# nacos.core.protocol.raft.data.core_thread_num=8\\n### Number of threads required for raft business request processing\\n# nacos.core.protocol.raft.data.cli_service_thread_num=4\\n### raft linear read strategy. Safe linear reads are used by default, that is, the Leader tenure is confirmed by heartbeat\\n# nacos.core.protocol.raft.data.read_index_type=ReadOnlySafe\\n### rpc request timeout, default 5 seconds\\n# nacos.core.protocol.raft.data.rpc_request_timeout_ms=5000\\n\\n```\\n\\n这是我的整个application.properties文件,其中主要修改的地方有两处\\n\\n修改端口号\\n\\n```properties\\n### Default web server port:\\nserver.port=3333\\n```\\n\\n修改数据库为mysql并配置mysql的url\\n\\n```properties\\n#*************** Config Module Related Configurations ***************#\\n### If use MySQL as datasource:\\n spring.datasource.platform=mysql\\n\\n### Count of DB:\\n db.num=1\\n\\n### Connect URL of DB:\\ndb.url.0=jdbc:mysql://127.0.0.1:3306/nacos_config?characterEncoding=utf8&connectTimeout=1000&socketTimeout=3000&autoReconnect=true&useUnicode=true&useSSL=false&serverTimezone=UTC\\ndb.user=root\\ndb.password=123456\\n```\\n\\n这时候配置就差不多啦可以开始启动服务了\\n\\n```sh\\n# 进入到nacos3333的bin目录\\ncd /usr/local/nacos/nacos3333/bin\\n# 执行启动脚本 因为nacos启动脚本默认就是使用集群模式所以不用更改\\n./startup.sh\\n```\\n\\n这时候我们可以查看nacos的启动状态\\n\\n```sh\\nps -ef | grep nacos\\n```\\n\\n> ![在这里插入图片描述](https://img-blog.csdnimg.cn/20201130205818481.png)\\n\\n\\n这时候我们应该就可以通过 服务器ip:3333/nacos访问到nacos\\n\\n> ![在这里插入图片描述](https://img-blog.csdnimg.cn/20201130205828641.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ0ODU5OA==,size_16,color_FFFFFF,t_70)\\n\\n\\n成功的访问到了nacos代表成功了。\\n\\n### nacos集群启动\\n\\n这时候我们就可以回到nacos目录下拷贝之前的nacos3333文件夹来启动nacos4444和nacos5555\\n\\n```sh\\ncd /usr/local/nacos\\n# cp -r 代表递归拷贝\\ncp -r nacos3333 nacos4444\\ncp -r nacos3333 nacos5555\\n```\\n\\n这时候再分别将nacos4444和nacos5555文件夹下的conf目录中的application.properties中的server.port更改为3333、4444然后再启动，这里我就不再演示了，和之前配置一样。\\n\\n随后我们再依次启动nacos4444，nacos5555\\n\\n###########################################################################\\n\\n启动后发现问题，nacos5555启动不起来，查看日志得到发现内存不足，nacos脚本默认给的最大内存是2G，我们可以去改小一点。\\n\\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201130205845619.png)\\n\\n原红框中限制的内存是2g 最小1g 适当该小一点[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传\\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201130205903628.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ0ODU5OA==,size_16,color_FFFFFF,t_70)\\n\\n\\n然后再依次启动三个服务\\n\\n登录任意一个nacos可以看到如下页面即集群启动成功\\n\\n### nginx配置\\n\\n这配置nginx负载均衡访问nacos\\n\\n```sh\\ncd /usr/local/nginx/conf\\nvim nginx.conf\\n```\\n\\n```conf\\n#user  nobody;\\nworker_processes  1;\\n\\n#error_log  logs/error.log;\\n#error_log  logs/error.log  notice;\\n#error_log  logs/error.log  info;\\n\\n#pid        logs/nginx.pid;\\n\\n\\nevents {\\n    worker_connections  1024;\\n}\\n\\n\\nhttp {\\n    include       mime.types;\\n    default_type  application/octet-stream;\\n\\n    #log_format  main  \'$remote_addr - $remote_user [$time_local] \\\"$request\\\" \'\\n    #                  \'$status $body_bytes_sent \\\"$http_referer\\\" \'\\n    #                  \'\\\"$http_user_agent\\\" \\\"$http_x_forwarded_for\\\"\';\\n\\n    #access_log  logs/access.log  main;\\n\\n    sendfile        on;\\n    #tcp_nopush     on;\\n\\n    #keepalive_timeout  0;\\n    keepalive_timeout  65;\\n\\n    #gzip  on;\\n\\n    #配置刚刚搭建好的nacos集群\\n    upstream cluster{                                                        \\n\\t    server 127.0.0.1:3333;\\n\\t    server 127.0.0.1:4444;\\n\\t    server 127.0.0.1:5555;\\n\\t}\\n\\n    server {\\n        listen       1111;\\n        server_name  nacos_cluster;\\n\\n        #charset koi8-r;\\n\\n        #access_log  logs/host.access.log  main;\\n\\n        location / {\\n            #root   html;\\n            #index  index.html index.htm;\\n            #将所有访问/的都映射到配置好的集群\\n            proxy_pass http://cluster;\\n        }\\n\\n        #error_page  404              /404.html;\\n\\n        # redirect server error pages to the static page /50x.html\\n        #\\n        error_page   500 502 503 504  /50x.html;\\n        location = /50x.html {\\n            root   html;\\n        }\\n\\n        # proxy the PHP scripts to Apache listening on 127.0.0.1:80\\n        #\\n        #location ~ \\\\.php$ {\\n        #    proxy_pass   http://127.0.0.1;\\n        #}\\n\\n        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000\\n        #\\n        #location ~ \\\\.php$ {\\n        #    root           html;\\n        #    fastcgi_pass   127.0.0.1:9000;\\n        #    fastcgi_index  index.php;\\n        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;\\n        #    include        fastcgi_params;\\n        #}\\n\\n        # deny access to .htaccess files, if Apache\'s document root\\n        # concurs with nginx\'s one\\n        #\\n        #location ~ /\\\\.ht {\\n        #    deny  all;\\n        #}\\n    }\\n\\n\\n    # another virtual host using mix of IP-, name-, and port-based configuration\\n    #\\n    #server {\\n    #    listen       8000;\\n    #    listen       somename:8080;\\n    #    server_name  somename  alias  another.alias;\\n\\n    #    location / {\\n    #        root   html;\\n    #        index  index.html index.htm;\\n    #    }\\n    #}\\n\\n\\n    # HTTPS server\\n    #\\n    #server {\\n    #    listen       443 ssl;\\n    #    server_name  localhost;\\n\\n    #    ssl_certificate      cert.pem;\\n    #    ssl_certificate_key  cert.key;\\n\\n    #    ssl_session_cache    shared:SSL:1m;\\n    #    ssl_session_timeout  5m;\\n\\n    #    ssl_ciphers  HIGH:!aNULL:!MD5;\\n    #    ssl_prefer_server_ciphers  on;\\n\\n    #    location / {\\n    #        root   html;\\n    #        index  index.html index.htm;\\n    #    }\\n    #}\\n}\\n```\\n\\n### nginx启动\\n\\n```sh\\ncd /usr/local/nginx/sbin\\n./nginx\\n```\\n\\n这时候我们就可以通过服务器ip地址:1111/nacos 来访问nacos集群了\\n\\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201130205927229.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ0ODU5OA==,size_16,color_FFFFFF,t_70)\\n\\n\\n关于使用NACOS集群遇到问题 -- CODE:503 MSG: SERVER IS STARTING NOW, PLEASE TRY AGAIN LATER!\\n\\n这时又出现了问题……在服务提供者注册服务时会报错\\n\\n```text\\n2020-11-30 00:36:59.492 ERROR 13140 --- [  restartedMain] c.a.c.n.registry.NacosServiceRegistry    : nacos registry, nacos-payment-provider register failed...NacosRegistration{nacosDiscoveryProperties=NacosDiscoveryProperties{serverAddr=\'wsy.oopsw.top:1111\', endpoint=\'\', namespace=\'\', watchDelay=30000, logName=\'\', service=\'nacos-payment-provider\', weight=1.0, clusterName=\'DEFAULT\', namingLoadCacheAtStart=\'false\', metadata={preserved.register.source=SPRING_CLOUD}, registerEnabled=true, ip=\'10.175.6.100\', networkInterface=\'\', port=9002, secure=false, accessKey=\'\', secretKey=\'\'}},\\n\\njava.lang.IllegalStateException: failed to req API:/nacos/v1/ns/instance after all servers([wsy.oopsw.top:1111]) tried: failed to req API:wsy.oopsw.top:1111/nacos/v1/ns/instance. code:503 msg: server is DOWN now, please try again later!\\n\\tat com.alibaba.nacos.client.naming.net.NamingProxy.reqAPI(NamingProxy.java:464) ~[nacos-client-1.1.1.jar:na]\\n\\tat com.alibaba.nacos.client.naming.net.NamingProxy.reqAPI(NamingProxy.java:386) ~[nacos-client-1.1.1.jar:na]\\n\\tat com.alibaba.nacos.client.naming.net.NamingProxy.registerService(NamingProxy.java:188) ~[nacos-client-1.1.1.jar:na]\\n\\tat com.alibaba.nacos.client.naming.NacosNamingService.registerInstance(NacosNamingService.java:205) ~[nacos-client-1.1.1.jar:na]\\n\\tat com.alibaba.nacos.client.naming.NacosNamingService.registerInstance(NacosNamingService.java:184) ~[nacos-client-1.1.1.jar:na]\\n\\tat com.alibaba.cloud.nacos.registry.NacosServiceRegistry.register(NacosServiceRegistry.java:61) ~[spring-cloud-alibaba-nacos-discovery-2.1.0.RELEASE.jar:2.1.0.RELEASE]\\n\\tat org.springframework.cloud.client.serviceregistry.AbstractAutoServiceRegistration.register(AbstractAutoServiceRegistration.java:239) [spring-cloud-commons-2.2.1.RELEASE.jar:2.2.1.RELEASE]\\n\\tat com.alibaba.cloud.nacos.registry.NacosAutoServiceRegistration.register(NacosAutoServiceRegistration.java:74) [spring-cloud-alibaba-nacos-discovery-2.1.0.RELEASE.jar:2.1.0.RELEASE]\\n\\tat org.springframework.cloud.client.serviceregistry.AbstractAutoServiceRegistration.start(AbstractAutoServiceRegistration.java:138) [spring-cloud-commons-2.2.1.RELEASE.jar:2.2.1.RELEASE]\\n\\tat org.springframework.cloud.client.serviceregistry.AbstractAutoServiceRegistration.bind(AbstractAutoServiceRegistration.java:101) [spring-cloud-commons-2.2.1.RELEASE.jar:2.2.1.RELEASE]\\n\\tat org.springframework.cloud.client.serviceregistry.AbstractAutoServiceRegistration.onApplicationEvent(AbstractAutoServiceRegistration.java:88) [spring-cloud-commons-2.2.1.RELEASE.jar:2.2.1.RELEASE]\\n\\tat org.springframework.cloud.client.serviceregistry.AbstractAutoServiceRegistration.onApplicationEvent(AbstractAutoServiceRegistration.java:47) [spring-cloud-commons-2.2.1.RELEASE.jar:2.2.1.RELEASE]\\n\\tat org.springframework.context.event.SimpleApplicationEventMulticaster.doInvokeListener(SimpleApplicationEventMulticaster.java:172) [spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]\\n\\tat org.springframework.context.event.SimpleApplicationEventMulticaster.invokeListener(SimpleApplicationEventMulticaster.java:165) [spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]\\n\\tat org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:139) [spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]\\n\\tat org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:403) [spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]\\n\\tat org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:360) [spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]\\n\\tat org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.finishRefresh(ServletWebServerApplicationContext.java:165) [spring-boot-2.2.2.RELEASE.jar:2.2.2.RELEASE]\\n\\tat org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:553) [spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]\\n\\tat org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:141) [spring-boot-2.2.2.RELEASE.jar:2.2.2.RELEASE]\\n\\tat org.springframework.boot.SpringApplication.refresh(SpringApplication.java:747) [spring-boot-2.2.2.RELEASE.jar:2.2.2.RELEASE]\\n\\tat org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:397) [spring-boot-2.2.2.RELEASE.jar:2.2.2.RELEASE]\\n\\tat org.springframework.boot.SpringApplication.run(SpringApplication.java:315) [spring-boot-2.2.2.RELEASE.jar:2.2.2.RELEASE]\\n\\tat org.springframework.boot.SpringApplication.run(SpringApplication.java:1226) [spring-boot-2.2.2.RELEASE.jar:2.2.2.RELEASE]\\n\\tat org.springframework.boot.SpringApplication.run(SpringApplication.java:1215) [spring-boot-2.2.2.RELEASE.jar:2.2.2.RELEASE]\\n\\tat com.wsy.springcloud.AlibabaProviderApplication.main(AlibabaProviderApplication.java:15) [classes/:na]\\n\\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_73]\\n\\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_73]\\n\\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_73]\\n\\tat java.lang.reflect.Method.invoke(Method.java:497) ~[na:1.8.0_73]\\n\\tat org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49) [spring-boot-devtools-2.2.2.RELEASE.jar:2.2.2.RELEASE]\\n```\\n\\n像阿里云、腾讯云这种云服务器, 会提供一个外网ip和内网ip, 访问外网ip时会指向对应的内网ip来访问到该服务器, 由于nacos集群内部是指定的使用网卡ip地址来进行通信,但是由于三台服务器各自的内网ip不在同一网段, 所以造成无法通信, 也会造成以下问题\\n\\n注册服务:\\n\\n```\\ncode:503 msg: server is STARTING now, please try again later!\\n```\\n\\nnaming-raft.log 日志:\\n\\n```\\n2019-05-15 00:02:00,000 WARN [IS LEADER] no leader is available now!\\n```\\n\\n这时只要修改启动参数, 设置本机ip地址就可以了\\n修改 nacos/bin/startup.sh 文件\\n找到 JVM Configuration 这部分, 在集群参数里增加 -Dnacos.server.ip=xx\\n\\n```sh\\n#===========================================================================================\\n# JVM Configuration\\n#===========================================================================================\\n\\n# 单机模式对应的启动参数\\nif [[ \\\"${MODE}\\\" == \\\"standalone\\\" ]]; then\\n    JAVA_OPT=\\\"${JAVA_OPT} -Xms512m -Xmx512m -Xmn256m\\\"\\n    JAVA_OPT=\\\"${JAVA_OPT} -Dnacos.standalone=true\\\"\\nelse\\n# 集群模式对应的启动参数\\n    JAVA_OPT=\\\"${JAVA_OPT} -server -Xms2g -Xmx2g -Xmn1g -XX:MetaspaceSize=128m -XX:MaxMetaspaceSize=320m\\\"\\n    JAVA_OPT=\\\"${JAVA_OPT} -XX:-OmitStackTraceInFastThrow -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=${BASE_DIR}/logs/java_heapdump.hprof\\\"\\n    JAVA_OPT=\\\"${JAVA_OPT} -XX:-UseLargePages\\\"\\n    \\n    # *新增以下参数设置本机ip地址*\\n    JAVA_OPT=\\\"${JAVA_OPT} -Dnacos.server.ip=本机ip\\\"\\n\\nfi\\n\\nif [[ \\\"${FUNCTION_MODE}\\\" == \\\"config\\\" ]]; then\\n    JAVA_OPT=\\\"${JAVA_OPT} -Dnacos.functionMode=config\\\"\\nelif [[ \\\"${FUNCTION_MODE}\\\" == \\\"naming\\\" ]]; then\\n    JAVA_OPT=\\\"${JAVA_OPT} -Dnacos.functionMode=naming\\\"\\nfi\\n\\n```\\n\\n参考博客：https://www.freesion.com/article/33101142210/\\n\\n服务注册时报BadRequest400 问题暂时还未解决\\n\\n```text\\ncom.alibaba.nacos.api.exception.NacosException: failed to req API:/nacos/v1/ns/instance after all servers([wsy.oopsw.top:1111]) tried: ErrCode:400, ErrMsg:<html><body><h1>Whitelabel Error Page</h1><p>This application has no explicit mapping for /error, so you are seeing this as a fallback.</p><div id=\'created\'>Mon Nov 30 01:33:45 CST 2020</div><div>There was an unexpected error (type=Bad Request, status=400).</div><div>receive invalid redirect request from peer 172.20.9.153</div></body></html>\\n```\\n\\n#############################################################\\n\\n问题已解决，是nacos版本的问题，据群里老哥解释说是nacos需要使用与之对应的SpringCloudAlibaba的版本，不然就会报错，我更换版本到1.3.2问题解决服务注册正常\",\"blogGoods\":0,\"blogId\":\"1333411378995605504\",\"blogImage\":\"http://808km.top/blog/img/img/default/1333411206555185152\",\"blogRead\":42,\"blogRemark\":\"nacos集群环境搭建\",\"blogTitle\":\"nacos集群环境搭建\",\"blogType\":20,\"createdTime\":1606745021000,\"typeName\":\"nacos\",\"updateTime\":1606974937000,\"version\":36},\"msg\":\"阅读成功\"}', '127.0.0.1', '2020-12-03 13:55:43', NULL);
INSERT INTO `bl_log` VALUES (2699, '阅读博客', '/blog/read/1333708609683533824', '[1333708609683533824]', 1, NULL, 'PUT', 514, '{\"code\":20000,\"data\":{\"blogCollection\":1,\"blogComment\":0,\"blogContent\":\"# 前言\\n今天在给博客更新，将session存到redis中持久化存储，正常操作是没问题的，但是后来尝试发现，在我输入的密码是错误的时候，他也创建了session，经过我的一番从尾到头的debug。。。。\\n复杂的debug过程就不贴出来了，放出问题的根源\\n在登陆时，会访问到我用来记录日志的切面,而我的记录日志方法中有一个需要获取到当前登录的用户的信息，来完善日志的字段\\n>![image.png](http://808km.top/blog/img/img/blogImg/1333703986787631104)\\n>以下是工具类中的原方法：\\n>![image.png](http://808km.top/blog/img/img/blogImg/1333704236625543168)\\n>以下是修改后的方法\\n>![image.png](http://808km.top/blog/img/img/blogImg/1333704399599419392)\\n>这就是问题的根源，因为在我登录的时候，要记录日志，然后去调用工具类，工具类去获取session，如果没有getSession(false)的话，就会判断session是否存在，如果不存在的话就会自动创建session，这就是为什么明明密码错了还会创建session的原因\",\"blogGoods\":1,\"blogId\":\"1333708609683533824\",\"blogImage\":\"http://808km.top/blog/img/default.jpg\",\"blogRead\":17,\"blogRemark\":\"shiro+redis整合实现session持久化登陆失败时也会生成session问题\",\"blogTitle\":\"shiro+redis整合实现session持久化登陆失败时也会生成session问题\",\"blogType\":6,\"createdTime\":1606815886000,\"typeName\":\"Java\",\"updateTime\":1606974528000,\"version\":1},\"msg\":\"阅读成功\"}', '127.0.0.1', '2020-12-03 13:56:26', NULL);
INSERT INTO `bl_log` VALUES (2700, '阅读博客', '/blog/read/1331436834413211648', '[1331436834413211648]', 1, NULL, 'PUT', 435, '{\"code\":20000,\"data\":{\"blogCollection\":0,\"blogComment\":0,\"blogContent\":\" 在开发中日期最常打交道的东西之一，但是日期又会存在各式各样的格式，常见的情形就是，从数据库取出的日期往往都是时间戳（毫秒数）的形式，这个一般情况下是前端不想要的结果，需要进行处理，那在springboot中比较简单：\\n因为后端传给前端时默认使用jackson转换格式所以我们可以\\n 1. 在application.yml中设置\\n```yml\\nspring:\\n  jackson:\\n    date-format: yyyy-MM-dd HH:mm:ss\\n    time-zone: GMT+8\\n```\\n 2. 在pojo对象上添加@JsonFormat注解\\n```java\\n    @JsonFormat(pattern = \\\"yyyy-MM-dd HH:mm:ss\\\", timezone = \\\"GMT+8\\\")\\n    private Date createdTime;\\n```\\n但是我在尝试了这两个方法以及相类似的方法，但是都无效，要么就是格式化无效，直接返回的时间戳，要么就是时间还是相差8个小时，但是格式化有效。\\n\\n这时我看到了另外一篇不一样的博客，随后明白了为什么我的配置没有用，原来是因为我添加拦截器时写的配置类的问题。\\n以下代码是我更改之前的配置类\\n```java\\npackage com.wsy.blog.config;\\n\\nimport com.fasterxml.jackson.databind.DeserializationFeature;\\nimport com.fasterxml.jackson.databind.ObjectMapper;\\nimport com.wsy.blog.interceptor.LoginInterceptor;\\nimport org.springframework.context.annotation.Bean;\\nimport org.springframework.context.annotation.Configuration;\\nimport org.springframework.http.converter.HttpMessageConverter;\\nimport org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;\\nimport org.springframework.web.servlet.config.annotation.InterceptorRegistry;\\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport;\\n\\nimport java.text.SimpleDateFormat;\\nimport java.util.List;\\n\\n/**\\n * @Author: wsy\\n * @Date: 2020/8/10 11:34\\n */\\n@Configuration\\npublic class InterceptorConfig extends WebMvcConfigurationSupport {\\n\\n    @Bean\\n    public LoginInterceptor getLoginInterceptor() {\\n        return new LoginInterceptor();\\n    }\\n\\n    /**\\n     * 添加拦截器\\n     * @param registry  拦截器注册\\n     */\\n    @Override\\n    protected void addInterceptors(InterceptorRegistry registry) {\\n        // TODO Auto-generated method stub\\n        registry.addInterceptor(getLoginInterceptor()).addPathPatterns(\\\"/**\\\")\\n                .excludePathPatterns(\\\"/*/login\\\");;\\n        super.addInterceptors(registry);\\n    }\\n}\\n```\\n\\n这里大家注意，看看自己的代码有没有因为添加拦截器而创建了一个配置类，该类继承了`WebMvcConfigurationSupport`，就是他！以前是用 `WebMvcConfigurerAdapter` ，springboot 2.0 建议使用 `WebMvcConfigurationSupport` 。但是在添加拦截器并继承 `WebMvcConfigurationSupport` 后会覆盖`@EnableAutoConfiguration`关于`WebMvcAutoConfiguration`的配置！从而导致所有的Date返回都变成时间戳！\\n可以采用另外一种方式，在你继承`WebMvcConfigurationSupport`的子类中添加日期转换的bean\\n以下是我更改后的代码\\n```java\\npackage com.wsy.blog.config;\\n\\nimport com.fasterxml.jackson.databind.DeserializationFeature;\\nimport com.fasterxml.jackson.databind.ObjectMapper;\\nimport com.wsy.blog.interceptor.LoginInterceptor;\\nimport org.springframework.context.annotation.Bean;\\nimport org.springframework.context.annotation.Configuration;\\nimport org.springframework.http.converter.HttpMessageConverter;\\nimport org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;\\nimport org.springframework.web.servlet.config.annotation.InterceptorRegistry;\\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport;\\n\\nimport java.text.SimpleDateFormat;\\nimport java.util.List;\\n\\n/**\\n * @Author: wsy\\n * @Date: 2020/8/10 11:34\\n */\\n@Configuration\\npublic class InterceptorConfig extends WebMvcConfigurationSupport {\\n\\n    @Bean\\n    public LoginInterceptor getLoginInterceptor() {\\n        return new LoginInterceptor();\\n    }\\n\\n    /**\\n     * 定义时间格式转换器\\n     * @return  MappingJackson2HttpMessageConverter\\n     */\\n    @Bean\\n    public MappingJackson2HttpMessageConverter jackson2HttpMessageConverter() {\\n        MappingJackson2HttpMessageConverter converter = new MappingJackson2HttpMessageConverter();\\n        ObjectMapper mapper = new ObjectMapper();\\n        mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\\n        mapper.setDateFormat(new SimpleDateFormat(\\\"yyyy-MM-dd HH:mm:ss\\\"));\\n        converter.setObjectMapper(mapper);\\n        return converter;\\n    }\\n\\n    /**\\n     * 添加转换器\\n     * @param converters    converters\\n     */\\n    @Override\\n    public void configureMessageConverters(List<HttpMessageConverter<?>> converters) {\\n        //将我们定义的时间格式转换器添加到转换器列表中,\\n        //这样jackson格式化时候但凡遇到Date类型就会转换成我们定义的格式\\n        converters.add(jackson2HttpMessageConverter());\\n    }\\n\\n    /**\\n     * 添加拦截器\\n     * @param registry  拦截器注册\\n     */\\n    @Override\\n    protected void addInterceptors(InterceptorRegistry registry) {\\n        // TODO Auto-generated method stub\\n        registry.addInterceptor(getLoginInterceptor()).addPathPatterns(\\\"/**\\\")\\n                .excludePathPatterns(\\\"/*/login\\\");;\\n        super.addInterceptors(registry);\\n    }\\n}\\n```\\n 感谢博主的分享经验   \\n参考博客：[https://blog.csdn.net/qq_34975710/article/details/84872489](https://blog.csdn.net/qq_34975710/article/details/84872489)\",\"blogGoods\":1,\"blogId\":\"1331436834413211648\",\"blogImage\":\"http://808km.top/blog/img/default.jpg\",\"blogRead\":40,\"blogTitle\":\"springboot 后端传给前端相差8小时\",\"blogType\":9,\"createdTime\":1606274253000,\"typeName\":\"Springboot\",\"updateTime\":1606895891000,\"version\":35},\"msg\":\"阅读成功\"}', '127.0.0.1', '2020-12-03 13:56:35', NULL);
INSERT INTO `bl_log` VALUES (2701, '阅读博客', '/blog/read/1331436834413211648', '[1331436834413211648]', 1, NULL, 'PUT', 431, '{\"code\":20000,\"data\":{\"blogCollection\":0,\"blogComment\":0,\"blogContent\":\" 在开发中日期最常打交道的东西之一，但是日期又会存在各式各样的格式，常见的情形就是，从数据库取出的日期往往都是时间戳（毫秒数）的形式，这个一般情况下是前端不想要的结果，需要进行处理，那在springboot中比较简单：\\n因为后端传给前端时默认使用jackson转换格式所以我们可以\\n 1. 在application.yml中设置\\n```yml\\nspring:\\n  jackson:\\n    date-format: yyyy-MM-dd HH:mm:ss\\n    time-zone: GMT+8\\n```\\n 2. 在pojo对象上添加@JsonFormat注解\\n```java\\n    @JsonFormat(pattern = \\\"yyyy-MM-dd HH:mm:ss\\\", timezone = \\\"GMT+8\\\")\\n    private Date createdTime;\\n```\\n但是我在尝试了这两个方法以及相类似的方法，但是都无效，要么就是格式化无效，直接返回的时间戳，要么就是时间还是相差8个小时，但是格式化有效。\\n\\n这时我看到了另外一篇不一样的博客，随后明白了为什么我的配置没有用，原来是因为我添加拦截器时写的配置类的问题。\\n以下代码是我更改之前的配置类\\n```java\\npackage com.wsy.blog.config;\\n\\nimport com.fasterxml.jackson.databind.DeserializationFeature;\\nimport com.fasterxml.jackson.databind.ObjectMapper;\\nimport com.wsy.blog.interceptor.LoginInterceptor;\\nimport org.springframework.context.annotation.Bean;\\nimport org.springframework.context.annotation.Configuration;\\nimport org.springframework.http.converter.HttpMessageConverter;\\nimport org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;\\nimport org.springframework.web.servlet.config.annotation.InterceptorRegistry;\\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport;\\n\\nimport java.text.SimpleDateFormat;\\nimport java.util.List;\\n\\n/**\\n * @Author: wsy\\n * @Date: 2020/8/10 11:34\\n */\\n@Configuration\\npublic class InterceptorConfig extends WebMvcConfigurationSupport {\\n\\n    @Bean\\n    public LoginInterceptor getLoginInterceptor() {\\n        return new LoginInterceptor();\\n    }\\n\\n    /**\\n     * 添加拦截器\\n     * @param registry  拦截器注册\\n     */\\n    @Override\\n    protected void addInterceptors(InterceptorRegistry registry) {\\n        // TODO Auto-generated method stub\\n        registry.addInterceptor(getLoginInterceptor()).addPathPatterns(\\\"/**\\\")\\n                .excludePathPatterns(\\\"/*/login\\\");;\\n        super.addInterceptors(registry);\\n    }\\n}\\n```\\n\\n这里大家注意，看看自己的代码有没有因为添加拦截器而创建了一个配置类，该类继承了`WebMvcConfigurationSupport`，就是他！以前是用 `WebMvcConfigurerAdapter` ，springboot 2.0 建议使用 `WebMvcConfigurationSupport` 。但是在添加拦截器并继承 `WebMvcConfigurationSupport` 后会覆盖`@EnableAutoConfiguration`关于`WebMvcAutoConfiguration`的配置！从而导致所有的Date返回都变成时间戳！\\n可以采用另外一种方式，在你继承`WebMvcConfigurationSupport`的子类中添加日期转换的bean\\n以下是我更改后的代码\\n```java\\npackage com.wsy.blog.config;\\n\\nimport com.fasterxml.jackson.databind.DeserializationFeature;\\nimport com.fasterxml.jackson.databind.ObjectMapper;\\nimport com.wsy.blog.interceptor.LoginInterceptor;\\nimport org.springframework.context.annotation.Bean;\\nimport org.springframework.context.annotation.Configuration;\\nimport org.springframework.http.converter.HttpMessageConverter;\\nimport org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;\\nimport org.springframework.web.servlet.config.annotation.InterceptorRegistry;\\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport;\\n\\nimport java.text.SimpleDateFormat;\\nimport java.util.List;\\n\\n/**\\n * @Author: wsy\\n * @Date: 2020/8/10 11:34\\n */\\n@Configuration\\npublic class InterceptorConfig extends WebMvcConfigurationSupport {\\n\\n    @Bean\\n    public LoginInterceptor getLoginInterceptor() {\\n        return new LoginInterceptor();\\n    }\\n\\n    /**\\n     * 定义时间格式转换器\\n     * @return  MappingJackson2HttpMessageConverter\\n     */\\n    @Bean\\n    public MappingJackson2HttpMessageConverter jackson2HttpMessageConverter() {\\n        MappingJackson2HttpMessageConverter converter = new MappingJackson2HttpMessageConverter();\\n        ObjectMapper mapper = new ObjectMapper();\\n        mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\\n        mapper.setDateFormat(new SimpleDateFormat(\\\"yyyy-MM-dd HH:mm:ss\\\"));\\n        converter.setObjectMapper(mapper);\\n        return converter;\\n    }\\n\\n    /**\\n     * 添加转换器\\n     * @param converters    converters\\n     */\\n    @Override\\n    public void configureMessageConverters(List<HttpMessageConverter<?>> converters) {\\n        //将我们定义的时间格式转换器添加到转换器列表中,\\n        //这样jackson格式化时候但凡遇到Date类型就会转换成我们定义的格式\\n        converters.add(jackson2HttpMessageConverter());\\n    }\\n\\n    /**\\n     * 添加拦截器\\n     * @param registry  拦截器注册\\n     */\\n    @Override\\n    protected void addInterceptors(InterceptorRegistry registry) {\\n        // TODO Auto-generated method stub\\n        registry.addInterceptor(getLoginInterceptor()).addPathPatterns(\\\"/**\\\")\\n                .excludePathPatterns(\\\"/*/login\\\");;\\n        super.addInterceptors(registry);\\n    }\\n}\\n```\\n 感谢博主的分享经验   \\n参考博客：[https://blog.csdn.net/qq_34975710/article/details/84872489](https://blog.csdn.net/qq_34975710/article/details/84872489)\",\"blogGoods\":1,\"blogId\":\"1331436834413211648\",\"blogImage\":\"http://808km.top/blog/img/default.jpg\",\"blogRead\":41,\"blogTitle\":\"springboot 后端传给前端相差8小时\",\"blogType\":9,\"createdTime\":1606274253000,\"typeName\":\"Springboot\",\"updateTime\":1606974994000,\"version\":35},\"msg\":\"阅读成功\"}', '127.0.0.1', '2020-12-03 13:57:22', NULL);
INSERT INTO `bl_log` VALUES (2702, '阅读博客', '/blog/read/1331436834413211648', '[1331436834413211648]', 1, NULL, 'PUT', 438, '{\"code\":20000,\"data\":{\"blogCollection\":0,\"blogComment\":0,\"blogContent\":\" 在开发中日期最常打交道的东西之一，但是日期又会存在各式各样的格式，常见的情形就是，从数据库取出的日期往往都是时间戳（毫秒数）的形式，这个一般情况下是前端不想要的结果，需要进行处理，那在springboot中比较简单：\\n因为后端传给前端时默认使用jackson转换格式所以我们可以\\n 1. 在application.yml中设置\\n```yml\\nspring:\\n  jackson:\\n    date-format: yyyy-MM-dd HH:mm:ss\\n    time-zone: GMT+8\\n```\\n 2. 在pojo对象上添加@JsonFormat注解\\n```java\\n    @JsonFormat(pattern = \\\"yyyy-MM-dd HH:mm:ss\\\", timezone = \\\"GMT+8\\\")\\n    private Date createdTime;\\n```\\n但是我在尝试了这两个方法以及相类似的方法，但是都无效，要么就是格式化无效，直接返回的时间戳，要么就是时间还是相差8个小时，但是格式化有效。\\n\\n这时我看到了另外一篇不一样的博客，随后明白了为什么我的配置没有用，原来是因为我添加拦截器时写的配置类的问题。\\n以下代码是我更改之前的配置类\\n```java\\npackage com.wsy.blog.config;\\n\\nimport com.fasterxml.jackson.databind.DeserializationFeature;\\nimport com.fasterxml.jackson.databind.ObjectMapper;\\nimport com.wsy.blog.interceptor.LoginInterceptor;\\nimport org.springframework.context.annotation.Bean;\\nimport org.springframework.context.annotation.Configuration;\\nimport org.springframework.http.converter.HttpMessageConverter;\\nimport org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;\\nimport org.springframework.web.servlet.config.annotation.InterceptorRegistry;\\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport;\\n\\nimport java.text.SimpleDateFormat;\\nimport java.util.List;\\n\\n/**\\n * @Author: wsy\\n * @Date: 2020/8/10 11:34\\n */\\n@Configuration\\npublic class InterceptorConfig extends WebMvcConfigurationSupport {\\n\\n    @Bean\\n    public LoginInterceptor getLoginInterceptor() {\\n        return new LoginInterceptor();\\n    }\\n\\n    /**\\n     * 添加拦截器\\n     * @param registry  拦截器注册\\n     */\\n    @Override\\n    protected void addInterceptors(InterceptorRegistry registry) {\\n        // TODO Auto-generated method stub\\n        registry.addInterceptor(getLoginInterceptor()).addPathPatterns(\\\"/**\\\")\\n                .excludePathPatterns(\\\"/*/login\\\");;\\n        super.addInterceptors(registry);\\n    }\\n}\\n```\\n\\n这里大家注意，看看自己的代码有没有因为添加拦截器而创建了一个配置类，该类继承了`WebMvcConfigurationSupport`，就是他！以前是用 `WebMvcConfigurerAdapter` ，springboot 2.0 建议使用 `WebMvcConfigurationSupport` 。但是在添加拦截器并继承 `WebMvcConfigurationSupport` 后会覆盖`@EnableAutoConfiguration`关于`WebMvcAutoConfiguration`的配置！从而导致所有的Date返回都变成时间戳！\\n可以采用另外一种方式，在你继承`WebMvcConfigurationSupport`的子类中添加日期转换的bean\\n以下是我更改后的代码\\n```java\\npackage com.wsy.blog.config;\\n\\nimport com.fasterxml.jackson.databind.DeserializationFeature;\\nimport com.fasterxml.jackson.databind.ObjectMapper;\\nimport com.wsy.blog.interceptor.LoginInterceptor;\\nimport org.springframework.context.annotation.Bean;\\nimport org.springframework.context.annotation.Configuration;\\nimport org.springframework.http.converter.HttpMessageConverter;\\nimport org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;\\nimport org.springframework.web.servlet.config.annotation.InterceptorRegistry;\\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport;\\n\\nimport java.text.SimpleDateFormat;\\nimport java.util.List;\\n\\n/**\\n * @Author: wsy\\n * @Date: 2020/8/10 11:34\\n */\\n@Configuration\\npublic class InterceptorConfig extends WebMvcConfigurationSupport {\\n\\n    @Bean\\n    public LoginInterceptor getLoginInterceptor() {\\n        return new LoginInterceptor();\\n    }\\n\\n    /**\\n     * 定义时间格式转换器\\n     * @return  MappingJackson2HttpMessageConverter\\n     */\\n    @Bean\\n    public MappingJackson2HttpMessageConverter jackson2HttpMessageConverter() {\\n        MappingJackson2HttpMessageConverter converter = new MappingJackson2HttpMessageConverter();\\n        ObjectMapper mapper = new ObjectMapper();\\n        mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\\n        mapper.setDateFormat(new SimpleDateFormat(\\\"yyyy-MM-dd HH:mm:ss\\\"));\\n        converter.setObjectMapper(mapper);\\n        return converter;\\n    }\\n\\n    /**\\n     * 添加转换器\\n     * @param converters    converters\\n     */\\n    @Override\\n    public void configureMessageConverters(List<HttpMessageConverter<?>> converters) {\\n        //将我们定义的时间格式转换器添加到转换器列表中,\\n        //这样jackson格式化时候但凡遇到Date类型就会转换成我们定义的格式\\n        converters.add(jackson2HttpMessageConverter());\\n    }\\n\\n    /**\\n     * 添加拦截器\\n     * @param registry  拦截器注册\\n     */\\n    @Override\\n    protected void addInterceptors(InterceptorRegistry registry) {\\n        // TODO Auto-generated method stub\\n        registry.addInterceptor(getLoginInterceptor()).addPathPatterns(\\\"/**\\\")\\n                .excludePathPatterns(\\\"/*/login\\\");;\\n        super.addInterceptors(registry);\\n    }\\n}\\n```\\n 感谢博主的分享经验   \\n参考博客：[https://blog.csdn.net/qq_34975710/article/details/84872489](https://blog.csdn.net/qq_34975710/article/details/84872489)\",\"blogGoods\":1,\"blogId\":\"1331436834413211648\",\"blogImage\":\"http://808km.top/blog/img/default.jpg\",\"blogRead\":42,\"blogTitle\":\"springboot 后端传给前端相差8小时\",\"blogType\":9,\"createdTime\":1606274253000,\"typeName\":\"Springboot\",\"updateTime\":1606975041000,\"version\":35},\"msg\":\"阅读成功\"}', '127.0.0.1', '2020-12-03 13:57:39', NULL);
INSERT INTO `bl_log` VALUES (2703, '阅读博客', '/blog/read/1331436834413211648', '[1331436834413211648]', 1, NULL, 'PUT', 481, '{\"code\":20000,\"data\":{\"blogCollection\":0,\"blogComment\":0,\"blogContent\":\" 在开发中日期最常打交道的东西之一，但是日期又会存在各式各样的格式，常见的情形就是，从数据库取出的日期往往都是时间戳（毫秒数）的形式，这个一般情况下是前端不想要的结果，需要进行处理，那在springboot中比较简单：\\n因为后端传给前端时默认使用jackson转换格式所以我们可以\\n 1. 在application.yml中设置\\n```yml\\nspring:\\n  jackson:\\n    date-format: yyyy-MM-dd HH:mm:ss\\n    time-zone: GMT+8\\n```\\n 2. 在pojo对象上添加@JsonFormat注解\\n```java\\n    @JsonFormat(pattern = \\\"yyyy-MM-dd HH:mm:ss\\\", timezone = \\\"GMT+8\\\")\\n    private Date createdTime;\\n```\\n但是我在尝试了这两个方法以及相类似的方法，但是都无效，要么就是格式化无效，直接返回的时间戳，要么就是时间还是相差8个小时，但是格式化有效。\\n\\n这时我看到了另外一篇不一样的博客，随后明白了为什么我的配置没有用，原来是因为我添加拦截器时写的配置类的问题。\\n以下代码是我更改之前的配置类\\n```java\\npackage com.wsy.blog.config;\\n\\nimport com.fasterxml.jackson.databind.DeserializationFeature;\\nimport com.fasterxml.jackson.databind.ObjectMapper;\\nimport com.wsy.blog.interceptor.LoginInterceptor;\\nimport org.springframework.context.annotation.Bean;\\nimport org.springframework.context.annotation.Configuration;\\nimport org.springframework.http.converter.HttpMessageConverter;\\nimport org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;\\nimport org.springframework.web.servlet.config.annotation.InterceptorRegistry;\\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport;\\n\\nimport java.text.SimpleDateFormat;\\nimport java.util.List;\\n\\n/**\\n * @Author: wsy\\n * @Date: 2020/8/10 11:34\\n */\\n@Configuration\\npublic class InterceptorConfig extends WebMvcConfigurationSupport {\\n\\n    @Bean\\n    public LoginInterceptor getLoginInterceptor() {\\n        return new LoginInterceptor();\\n    }\\n\\n    /**\\n     * 添加拦截器\\n     * @param registry  拦截器注册\\n     */\\n    @Override\\n    protected void addInterceptors(InterceptorRegistry registry) {\\n        // TODO Auto-generated method stub\\n        registry.addInterceptor(getLoginInterceptor()).addPathPatterns(\\\"/**\\\")\\n                .excludePathPatterns(\\\"/*/login\\\");;\\n        super.addInterceptors(registry);\\n    }\\n}\\n```\\n\\n这里大家注意，看看自己的代码有没有因为添加拦截器而创建了一个配置类，该类继承了`WebMvcConfigurationSupport`，就是他！以前是用 `WebMvcConfigurerAdapter` ，springboot 2.0 建议使用 `WebMvcConfigurationSupport` 。但是在添加拦截器并继承 `WebMvcConfigurationSupport` 后会覆盖`@EnableAutoConfiguration`关于`WebMvcAutoConfiguration`的配置！从而导致所有的Date返回都变成时间戳！\\n可以采用另外一种方式，在你继承`WebMvcConfigurationSupport`的子类中添加日期转换的bean\\n以下是我更改后的代码\\n```java\\npackage com.wsy.blog.config;\\n\\nimport com.fasterxml.jackson.databind.DeserializationFeature;\\nimport com.fasterxml.jackson.databind.ObjectMapper;\\nimport com.wsy.blog.interceptor.LoginInterceptor;\\nimport org.springframework.context.annotation.Bean;\\nimport org.springframework.context.annotation.Configuration;\\nimport org.springframework.http.converter.HttpMessageConverter;\\nimport org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;\\nimport org.springframework.web.servlet.config.annotation.InterceptorRegistry;\\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport;\\n\\nimport java.text.SimpleDateFormat;\\nimport java.util.List;\\n\\n/**\\n * @Author: wsy\\n * @Date: 2020/8/10 11:34\\n */\\n@Configuration\\npublic class InterceptorConfig extends WebMvcConfigurationSupport {\\n\\n    @Bean\\n    public LoginInterceptor getLoginInterceptor() {\\n        return new LoginInterceptor();\\n    }\\n\\n    /**\\n     * 定义时间格式转换器\\n     * @return  MappingJackson2HttpMessageConverter\\n     */\\n    @Bean\\n    public MappingJackson2HttpMessageConverter jackson2HttpMessageConverter() {\\n        MappingJackson2HttpMessageConverter converter = new MappingJackson2HttpMessageConverter();\\n        ObjectMapper mapper = new ObjectMapper();\\n        mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\\n        mapper.setDateFormat(new SimpleDateFormat(\\\"yyyy-MM-dd HH:mm:ss\\\"));\\n        converter.setObjectMapper(mapper);\\n        return converter;\\n    }\\n\\n    /**\\n     * 添加转换器\\n     * @param converters    converters\\n     */\\n    @Override\\n    public void configureMessageConverters(List<HttpMessageConverter<?>> converters) {\\n        //将我们定义的时间格式转换器添加到转换器列表中,\\n        //这样jackson格式化时候但凡遇到Date类型就会转换成我们定义的格式\\n        converters.add(jackson2HttpMessageConverter());\\n    }\\n\\n    /**\\n     * 添加拦截器\\n     * @param registry  拦截器注册\\n     */\\n    @Override\\n    protected void addInterceptors(InterceptorRegistry registry) {\\n        // TODO Auto-generated method stub\\n        registry.addInterceptor(getLoginInterceptor()).addPathPatterns(\\\"/**\\\")\\n                .excludePathPatterns(\\\"/*/login\\\");;\\n        super.addInterceptors(registry);\\n    }\\n}\\n```\\n 感谢博主的分享经验   \\n参考博客：[https://blog.csdn.net/qq_34975710/article/details/84872489](https://blog.csdn.net/qq_34975710/article/details/84872489)\",\"blogGoods\":1,\"blogId\":\"1331436834413211648\",\"blogImage\":\"http://808km.top/blog/img/default.jpg\",\"blogRead\":43,\"blogTitle\":\"springboot 后端传给前端相差8小时\",\"blogType\":9,\"createdTime\":1606274253000,\"typeName\":\"Springboot\",\"updateTime\":1606975058000,\"version\":35},\"msg\":\"阅读成功\"}', '127.0.0.1', '2020-12-03 13:57:53', NULL);
INSERT INTO `bl_log` VALUES (2704, '阅读博客', '/blog/read/1331436834413211648', '[1331436834413211648]', 1, NULL, 'PUT', 444, '{\"code\":20000,\"data\":{\"blogCollection\":0,\"blogComment\":0,\"blogContent\":\" 在开发中日期最常打交道的东西之一，但是日期又会存在各式各样的格式，常见的情形就是，从数据库取出的日期往往都是时间戳（毫秒数）的形式，这个一般情况下是前端不想要的结果，需要进行处理，那在springboot中比较简单：\\n因为后端传给前端时默认使用jackson转换格式所以我们可以\\n 1. 在application.yml中设置\\n```yml\\nspring:\\n  jackson:\\n    date-format: yyyy-MM-dd HH:mm:ss\\n    time-zone: GMT+8\\n```\\n 2. 在pojo对象上添加@JsonFormat注解\\n```java\\n    @JsonFormat(pattern = \\\"yyyy-MM-dd HH:mm:ss\\\", timezone = \\\"GMT+8\\\")\\n    private Date createdTime;\\n```\\n但是我在尝试了这两个方法以及相类似的方法，但是都无效，要么就是格式化无效，直接返回的时间戳，要么就是时间还是相差8个小时，但是格式化有效。\\n\\n这时我看到了另外一篇不一样的博客，随后明白了为什么我的配置没有用，原来是因为我添加拦截器时写的配置类的问题。\\n以下代码是我更改之前的配置类\\n```java\\npackage com.wsy.blog.config;\\n\\nimport com.fasterxml.jackson.databind.DeserializationFeature;\\nimport com.fasterxml.jackson.databind.ObjectMapper;\\nimport com.wsy.blog.interceptor.LoginInterceptor;\\nimport org.springframework.context.annotation.Bean;\\nimport org.springframework.context.annotation.Configuration;\\nimport org.springframework.http.converter.HttpMessageConverter;\\nimport org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;\\nimport org.springframework.web.servlet.config.annotation.InterceptorRegistry;\\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport;\\n\\nimport java.text.SimpleDateFormat;\\nimport java.util.List;\\n\\n/**\\n * @Author: wsy\\n * @Date: 2020/8/10 11:34\\n */\\n@Configuration\\npublic class InterceptorConfig extends WebMvcConfigurationSupport {\\n\\n    @Bean\\n    public LoginInterceptor getLoginInterceptor() {\\n        return new LoginInterceptor();\\n    }\\n\\n    /**\\n     * 添加拦截器\\n     * @param registry  拦截器注册\\n     */\\n    @Override\\n    protected void addInterceptors(InterceptorRegistry registry) {\\n        // TODO Auto-generated method stub\\n        registry.addInterceptor(getLoginInterceptor()).addPathPatterns(\\\"/**\\\")\\n                .excludePathPatterns(\\\"/*/login\\\");;\\n        super.addInterceptors(registry);\\n    }\\n}\\n```\\n\\n这里大家注意，看看自己的代码有没有因为添加拦截器而创建了一个配置类，该类继承了`WebMvcConfigurationSupport`，就是他！以前是用 `WebMvcConfigurerAdapter` ，springboot 2.0 建议使用 `WebMvcConfigurationSupport` 。但是在添加拦截器并继承 `WebMvcConfigurationSupport` 后会覆盖`@EnableAutoConfiguration`关于`WebMvcAutoConfiguration`的配置！从而导致所有的Date返回都变成时间戳！\\n可以采用另外一种方式，在你继承`WebMvcConfigurationSupport`的子类中添加日期转换的bean\\n以下是我更改后的代码\\n```java\\npackage com.wsy.blog.config;\\n\\nimport com.fasterxml.jackson.databind.DeserializationFeature;\\nimport com.fasterxml.jackson.databind.ObjectMapper;\\nimport com.wsy.blog.interceptor.LoginInterceptor;\\nimport org.springframework.context.annotation.Bean;\\nimport org.springframework.context.annotation.Configuration;\\nimport org.springframework.http.converter.HttpMessageConverter;\\nimport org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;\\nimport org.springframework.web.servlet.config.annotation.InterceptorRegistry;\\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport;\\n\\nimport java.text.SimpleDateFormat;\\nimport java.util.List;\\n\\n/**\\n * @Author: wsy\\n * @Date: 2020/8/10 11:34\\n */\\n@Configuration\\npublic class InterceptorConfig extends WebMvcConfigurationSupport {\\n\\n    @Bean\\n    public LoginInterceptor getLoginInterceptor() {\\n        return new LoginInterceptor();\\n    }\\n\\n    /**\\n     * 定义时间格式转换器\\n     * @return  MappingJackson2HttpMessageConverter\\n     */\\n    @Bean\\n    public MappingJackson2HttpMessageConverter jackson2HttpMessageConverter() {\\n        MappingJackson2HttpMessageConverter converter = new MappingJackson2HttpMessageConverter();\\n        ObjectMapper mapper = new ObjectMapper();\\n        mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\\n        mapper.setDateFormat(new SimpleDateFormat(\\\"yyyy-MM-dd HH:mm:ss\\\"));\\n        converter.setObjectMapper(mapper);\\n        return converter;\\n    }\\n\\n    /**\\n     * 添加转换器\\n     * @param converters    converters\\n     */\\n    @Override\\n    public void configureMessageConverters(List<HttpMessageConverter<?>> converters) {\\n        //将我们定义的时间格式转换器添加到转换器列表中,\\n        //这样jackson格式化时候但凡遇到Date类型就会转换成我们定义的格式\\n        converters.add(jackson2HttpMessageConverter());\\n    }\\n\\n    /**\\n     * 添加拦截器\\n     * @param registry  拦截器注册\\n     */\\n    @Override\\n    protected void addInterceptors(InterceptorRegistry registry) {\\n        // TODO Auto-generated method stub\\n        registry.addInterceptor(getLoginInterceptor()).addPathPatterns(\\\"/**\\\")\\n                .excludePathPatterns(\\\"/*/login\\\");;\\n        super.addInterceptors(registry);\\n    }\\n}\\n```\\n 感谢博主的分享经验   \\n参考博客：[https://blog.csdn.net/qq_34975710/article/details/84872489](https://blog.csdn.net/qq_34975710/article/details/84872489)\",\"blogGoods\":1,\"blogId\":\"1331436834413211648\",\"blogImage\":\"http://808km.top/blog/img/default.jpg\",\"blogRead\":44,\"blogTitle\":\"springboot 后端传给前端相差8小时\",\"blogType\":9,\"createdTime\":1606274253000,\"typeName\":\"Springboot\",\"updateTime\":1606975072000,\"version\":35},\"msg\":\"阅读成功\"}', '127.0.0.1', '2020-12-03 13:59:03', NULL);
INSERT INTO `bl_log` VALUES (2705, '阅读博客', '/blog/read/1331436834413211648', '[1331436834413211648]', 1, NULL, 'PUT', 555, '{\"code\":20000,\"data\":{\"blogCollection\":0,\"blogComment\":0,\"blogContent\":\" 在开发中日期最常打交道的东西之一，但是日期又会存在各式各样的格式，常见的情形就是，从数据库取出的日期往往都是时间戳（毫秒数）的形式，这个一般情况下是前端不想要的结果，需要进行处理，那在springboot中比较简单：\\n因为后端传给前端时默认使用jackson转换格式所以我们可以\\n 1. 在application.yml中设置\\n```yml\\nspring:\\n  jackson:\\n    date-format: yyyy-MM-dd HH:mm:ss\\n    time-zone: GMT+8\\n```\\n 2. 在pojo对象上添加@JsonFormat注解\\n```java\\n    @JsonFormat(pattern = \\\"yyyy-MM-dd HH:mm:ss\\\", timezone = \\\"GMT+8\\\")\\n    private Date createdTime;\\n```\\n但是我在尝试了这两个方法以及相类似的方法，但是都无效，要么就是格式化无效，直接返回的时间戳，要么就是时间还是相差8个小时，但是格式化有效。\\n\\n这时我看到了另外一篇不一样的博客，随后明白了为什么我的配置没有用，原来是因为我添加拦截器时写的配置类的问题。\\n以下代码是我更改之前的配置类\\n```java\\npackage com.wsy.blog.config;\\n\\nimport com.fasterxml.jackson.databind.DeserializationFeature;\\nimport com.fasterxml.jackson.databind.ObjectMapper;\\nimport com.wsy.blog.interceptor.LoginInterceptor;\\nimport org.springframework.context.annotation.Bean;\\nimport org.springframework.context.annotation.Configuration;\\nimport org.springframework.http.converter.HttpMessageConverter;\\nimport org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;\\nimport org.springframework.web.servlet.config.annotation.InterceptorRegistry;\\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport;\\n\\nimport java.text.SimpleDateFormat;\\nimport java.util.List;\\n\\n/**\\n * @Author: wsy\\n * @Date: 2020/8/10 11:34\\n */\\n@Configuration\\npublic class InterceptorConfig extends WebMvcConfigurationSupport {\\n\\n    @Bean\\n    public LoginInterceptor getLoginInterceptor() {\\n        return new LoginInterceptor();\\n    }\\n\\n    /**\\n     * 添加拦截器\\n     * @param registry  拦截器注册\\n     */\\n    @Override\\n    protected void addInterceptors(InterceptorRegistry registry) {\\n        // TODO Auto-generated method stub\\n        registry.addInterceptor(getLoginInterceptor()).addPathPatterns(\\\"/**\\\")\\n                .excludePathPatterns(\\\"/*/login\\\");;\\n        super.addInterceptors(registry);\\n    }\\n}\\n```\\n\\n这里大家注意，看看自己的代码有没有因为添加拦截器而创建了一个配置类，该类继承了`WebMvcConfigurationSupport`，就是他！以前是用 `WebMvcConfigurerAdapter` ，springboot 2.0 建议使用 `WebMvcConfigurationSupport` 。但是在添加拦截器并继承 `WebMvcConfigurationSupport` 后会覆盖`@EnableAutoConfiguration`关于`WebMvcAutoConfiguration`的配置！从而导致所有的Date返回都变成时间戳！\\n可以采用另外一种方式，在你继承`WebMvcConfigurationSupport`的子类中添加日期转换的bean\\n以下是我更改后的代码\\n```java\\npackage com.wsy.blog.config;\\n\\nimport com.fasterxml.jackson.databind.DeserializationFeature;\\nimport com.fasterxml.jackson.databind.ObjectMapper;\\nimport com.wsy.blog.interceptor.LoginInterceptor;\\nimport org.springframework.context.annotation.Bean;\\nimport org.springframework.context.annotation.Configuration;\\nimport org.springframework.http.converter.HttpMessageConverter;\\nimport org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;\\nimport org.springframework.web.servlet.config.annotation.InterceptorRegistry;\\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport;\\n\\nimport java.text.SimpleDateFormat;\\nimport java.util.List;\\n\\n/**\\n * @Author: wsy\\n * @Date: 2020/8/10 11:34\\n */\\n@Configuration\\npublic class InterceptorConfig extends WebMvcConfigurationSupport {\\n\\n    @Bean\\n    public LoginInterceptor getLoginInterceptor() {\\n        return new LoginInterceptor();\\n    }\\n\\n    /**\\n     * 定义时间格式转换器\\n     * @return  MappingJackson2HttpMessageConverter\\n     */\\n    @Bean\\n    public MappingJackson2HttpMessageConverter jackson2HttpMessageConverter() {\\n        MappingJackson2HttpMessageConverter converter = new MappingJackson2HttpMessageConverter();\\n        ObjectMapper mapper = new ObjectMapper();\\n        mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\\n        mapper.setDateFormat(new SimpleDateFormat(\\\"yyyy-MM-dd HH:mm:ss\\\"));\\n        converter.setObjectMapper(mapper);\\n        return converter;\\n    }\\n\\n    /**\\n     * 添加转换器\\n     * @param converters    converters\\n     */\\n    @Override\\n    public void configureMessageConverters(List<HttpMessageConverter<?>> converters) {\\n        //将我们定义的时间格式转换器添加到转换器列表中,\\n        //这样jackson格式化时候但凡遇到Date类型就会转换成我们定义的格式\\n        converters.add(jackson2HttpMessageConverter());\\n    }\\n\\n    /**\\n     * 添加拦截器\\n     * @param registry  拦截器注册\\n     */\\n    @Override\\n    protected void addInterceptors(InterceptorRegistry registry) {\\n        // TODO Auto-generated method stub\\n        registry.addInterceptor(getLoginInterceptor()).addPathPatterns(\\\"/**\\\")\\n                .excludePathPatterns(\\\"/*/login\\\");;\\n        super.addInterceptors(registry);\\n    }\\n}\\n```\\n 感谢博主的分享经验   \\n参考博客：[https://blog.csdn.net/qq_34975710/article/details/84872489](https://blog.csdn.net/qq_34975710/article/details/84872489)\",\"blogGoods\":1,\"blogId\":\"1331436834413211648\",\"blogImage\":\"http://808km.top/blog/img/default.jpg\",\"blogRead\":45,\"blogTitle\":\"springboot 后端传给前端相差8小时\",\"blogType\":9,\"createdTime\":1606274253000,\"typeName\":\"Springboot\",\"updateTime\":1606975143000,\"version\":35},\"msg\":\"阅读成功\"}', '127.0.0.1', '2020-12-03 13:59:08', NULL);
INSERT INTO `bl_log` VALUES (2706, '阅读博客', '/blog/read/1331436834413211648', '[1331436834413211648]', 1, NULL, 'PUT', 525, '{\"code\":20000,\"data\":{\"blogCollection\":0,\"blogComment\":0,\"blogContent\":\" 在开发中日期最常打交道的东西之一，但是日期又会存在各式各样的格式，常见的情形就是，从数据库取出的日期往往都是时间戳（毫秒数）的形式，这个一般情况下是前端不想要的结果，需要进行处理，那在springboot中比较简单：\\n因为后端传给前端时默认使用jackson转换格式所以我们可以\\n 1. 在application.yml中设置\\n```yml\\nspring:\\n  jackson:\\n    date-format: yyyy-MM-dd HH:mm:ss\\n    time-zone: GMT+8\\n```\\n 2. 在pojo对象上添加@JsonFormat注解\\n```java\\n    @JsonFormat(pattern = \\\"yyyy-MM-dd HH:mm:ss\\\", timezone = \\\"GMT+8\\\")\\n    private Date createdTime;\\n```\\n但是我在尝试了这两个方法以及相类似的方法，但是都无效，要么就是格式化无效，直接返回的时间戳，要么就是时间还是相差8个小时，但是格式化有效。\\n\\n这时我看到了另外一篇不一样的博客，随后明白了为什么我的配置没有用，原来是因为我添加拦截器时写的配置类的问题。\\n以下代码是我更改之前的配置类\\n```java\\npackage com.wsy.blog.config;\\n\\nimport com.fasterxml.jackson.databind.DeserializationFeature;\\nimport com.fasterxml.jackson.databind.ObjectMapper;\\nimport com.wsy.blog.interceptor.LoginInterceptor;\\nimport org.springframework.context.annotation.Bean;\\nimport org.springframework.context.annotation.Configuration;\\nimport org.springframework.http.converter.HttpMessageConverter;\\nimport org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;\\nimport org.springframework.web.servlet.config.annotation.InterceptorRegistry;\\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport;\\n\\nimport java.text.SimpleDateFormat;\\nimport java.util.List;\\n\\n/**\\n * @Author: wsy\\n * @Date: 2020/8/10 11:34\\n */\\n@Configuration\\npublic class InterceptorConfig extends WebMvcConfigurationSupport {\\n\\n    @Bean\\n    public LoginInterceptor getLoginInterceptor() {\\n        return new LoginInterceptor();\\n    }\\n\\n    /**\\n     * 添加拦截器\\n     * @param registry  拦截器注册\\n     */\\n    @Override\\n    protected void addInterceptors(InterceptorRegistry registry) {\\n        // TODO Auto-generated method stub\\n        registry.addInterceptor(getLoginInterceptor()).addPathPatterns(\\\"/**\\\")\\n                .excludePathPatterns(\\\"/*/login\\\");;\\n        super.addInterceptors(registry);\\n    }\\n}\\n```\\n\\n这里大家注意，看看自己的代码有没有因为添加拦截器而创建了一个配置类，该类继承了`WebMvcConfigurationSupport`，就是他！以前是用 `WebMvcConfigurerAdapter` ，springboot 2.0 建议使用 `WebMvcConfigurationSupport` 。但是在添加拦截器并继承 `WebMvcConfigurationSupport` 后会覆盖`@EnableAutoConfiguration`关于`WebMvcAutoConfiguration`的配置！从而导致所有的Date返回都变成时间戳！\\n可以采用另外一种方式，在你继承`WebMvcConfigurationSupport`的子类中添加日期转换的bean\\n以下是我更改后的代码\\n```java\\npackage com.wsy.blog.config;\\n\\nimport com.fasterxml.jackson.databind.DeserializationFeature;\\nimport com.fasterxml.jackson.databind.ObjectMapper;\\nimport com.wsy.blog.interceptor.LoginInterceptor;\\nimport org.springframework.context.annotation.Bean;\\nimport org.springframework.context.annotation.Configuration;\\nimport org.springframework.http.converter.HttpMessageConverter;\\nimport org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;\\nimport org.springframework.web.servlet.config.annotation.InterceptorRegistry;\\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport;\\n\\nimport java.text.SimpleDateFormat;\\nimport java.util.List;\\n\\n/**\\n * @Author: wsy\\n * @Date: 2020/8/10 11:34\\n */\\n@Configuration\\npublic class InterceptorConfig extends WebMvcConfigurationSupport {\\n\\n    @Bean\\n    public LoginInterceptor getLoginInterceptor() {\\n        return new LoginInterceptor();\\n    }\\n\\n    /**\\n     * 定义时间格式转换器\\n     * @return  MappingJackson2HttpMessageConverter\\n     */\\n    @Bean\\n    public MappingJackson2HttpMessageConverter jackson2HttpMessageConverter() {\\n        MappingJackson2HttpMessageConverter converter = new MappingJackson2HttpMessageConverter();\\n        ObjectMapper mapper = new ObjectMapper();\\n        mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\\n        mapper.setDateFormat(new SimpleDateFormat(\\\"yyyy-MM-dd HH:mm:ss\\\"));\\n        converter.setObjectMapper(mapper);\\n        return converter;\\n    }\\n\\n    /**\\n     * 添加转换器\\n     * @param converters    converters\\n     */\\n    @Override\\n    public void configureMessageConverters(List<HttpMessageConverter<?>> converters) {\\n        //将我们定义的时间格式转换器添加到转换器列表中,\\n        //这样jackson格式化时候但凡遇到Date类型就会转换成我们定义的格式\\n        converters.add(jackson2HttpMessageConverter());\\n    }\\n\\n    /**\\n     * 添加拦截器\\n     * @param registry  拦截器注册\\n     */\\n    @Override\\n    protected void addInterceptors(InterceptorRegistry registry) {\\n        // TODO Auto-generated method stub\\n        registry.addInterceptor(getLoginInterceptor()).addPathPatterns(\\\"/**\\\")\\n                .excludePathPatterns(\\\"/*/login\\\");;\\n        super.addInterceptors(registry);\\n    }\\n}\\n```\\n 感谢博主的分享经验   \\n参考博客：[https://blog.csdn.net/qq_34975710/article/details/84872489](https://blog.csdn.net/qq_34975710/article/details/84872489)\",\"blogGoods\":1,\"blogId\":\"1331436834413211648\",\"blogImage\":\"http://808km.top/blog/img/default.jpg\",\"blogRead\":46,\"blogTitle\":\"springboot 后端传给前端相差8小时\",\"blogType\":9,\"createdTime\":1606274253000,\"typeName\":\"Springboot\",\"updateTime\":1606975147000,\"version\":35},\"msg\":\"阅读成功\"}', '127.0.0.1', '2020-12-03 13:59:17', NULL);
INSERT INTO `bl_log` VALUES (2707, '阅读博客', '/blog/read/1331436834413211648', '[1331436834413211648]', 1, NULL, 'PUT', 475, '{\"code\":20000,\"data\":{\"blogCollection\":0,\"blogComment\":0,\"blogContent\":\" 在开发中日期最常打交道的东西之一，但是日期又会存在各式各样的格式，常见的情形就是，从数据库取出的日期往往都是时间戳（毫秒数）的形式，这个一般情况下是前端不想要的结果，需要进行处理，那在springboot中比较简单：\\n因为后端传给前端时默认使用jackson转换格式所以我们可以\\n 1. 在application.yml中设置\\n```yml\\nspring:\\n  jackson:\\n    date-format: yyyy-MM-dd HH:mm:ss\\n    time-zone: GMT+8\\n```\\n 2. 在pojo对象上添加@JsonFormat注解\\n```java\\n    @JsonFormat(pattern = \\\"yyyy-MM-dd HH:mm:ss\\\", timezone = \\\"GMT+8\\\")\\n    private Date createdTime;\\n```\\n但是我在尝试了这两个方法以及相类似的方法，但是都无效，要么就是格式化无效，直接返回的时间戳，要么就是时间还是相差8个小时，但是格式化有效。\\n\\n这时我看到了另外一篇不一样的博客，随后明白了为什么我的配置没有用，原来是因为我添加拦截器时写的配置类的问题。\\n以下代码是我更改之前的配置类\\n```java\\npackage com.wsy.blog.config;\\n\\nimport com.fasterxml.jackson.databind.DeserializationFeature;\\nimport com.fasterxml.jackson.databind.ObjectMapper;\\nimport com.wsy.blog.interceptor.LoginInterceptor;\\nimport org.springframework.context.annotation.Bean;\\nimport org.springframework.context.annotation.Configuration;\\nimport org.springframework.http.converter.HttpMessageConverter;\\nimport org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;\\nimport org.springframework.web.servlet.config.annotation.InterceptorRegistry;\\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport;\\n\\nimport java.text.SimpleDateFormat;\\nimport java.util.List;\\n\\n/**\\n * @Author: wsy\\n * @Date: 2020/8/10 11:34\\n */\\n@Configuration\\npublic class InterceptorConfig extends WebMvcConfigurationSupport {\\n\\n    @Bean\\n    public LoginInterceptor getLoginInterceptor() {\\n        return new LoginInterceptor();\\n    }\\n\\n    /**\\n     * 添加拦截器\\n     * @param registry  拦截器注册\\n     */\\n    @Override\\n    protected void addInterceptors(InterceptorRegistry registry) {\\n        // TODO Auto-generated method stub\\n        registry.addInterceptor(getLoginInterceptor()).addPathPatterns(\\\"/**\\\")\\n                .excludePathPatterns(\\\"/*/login\\\");;\\n        super.addInterceptors(registry);\\n    }\\n}\\n```\\n\\n这里大家注意，看看自己的代码有没有因为添加拦截器而创建了一个配置类，该类继承了`WebMvcConfigurationSupport`，就是他！以前是用 `WebMvcConfigurerAdapter` ，springboot 2.0 建议使用 `WebMvcConfigurationSupport` 。但是在添加拦截器并继承 `WebMvcConfigurationSupport` 后会覆盖`@EnableAutoConfiguration`关于`WebMvcAutoConfiguration`的配置！从而导致所有的Date返回都变成时间戳！\\n可以采用另外一种方式，在你继承`WebMvcConfigurationSupport`的子类中添加日期转换的bean\\n以下是我更改后的代码\\n```java\\npackage com.wsy.blog.config;\\n\\nimport com.fasterxml.jackson.databind.DeserializationFeature;\\nimport com.fasterxml.jackson.databind.ObjectMapper;\\nimport com.wsy.blog.interceptor.LoginInterceptor;\\nimport org.springframework.context.annotation.Bean;\\nimport org.springframework.context.annotation.Configuration;\\nimport org.springframework.http.converter.HttpMessageConverter;\\nimport org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;\\nimport org.springframework.web.servlet.config.annotation.InterceptorRegistry;\\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport;\\n\\nimport java.text.SimpleDateFormat;\\nimport java.util.List;\\n\\n/**\\n * @Author: wsy\\n * @Date: 2020/8/10 11:34\\n */\\n@Configuration\\npublic class InterceptorConfig extends WebMvcConfigurationSupport {\\n\\n    @Bean\\n    public LoginInterceptor getLoginInterceptor() {\\n        return new LoginInterceptor();\\n    }\\n\\n    /**\\n     * 定义时间格式转换器\\n     * @return  MappingJackson2HttpMessageConverter\\n     */\\n    @Bean\\n    public MappingJackson2HttpMessageConverter jackson2HttpMessageConverter() {\\n        MappingJackson2HttpMessageConverter converter = new MappingJackson2HttpMessageConverter();\\n        ObjectMapper mapper = new ObjectMapper();\\n        mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\\n        mapper.setDateFormat(new SimpleDateFormat(\\\"yyyy-MM-dd HH:mm:ss\\\"));\\n        converter.setObjectMapper(mapper);\\n        return converter;\\n    }\\n\\n    /**\\n     * 添加转换器\\n     * @param converters    converters\\n     */\\n    @Override\\n    public void configureMessageConverters(List<HttpMessageConverter<?>> converters) {\\n        //将我们定义的时间格式转换器添加到转换器列表中,\\n        //这样jackson格式化时候但凡遇到Date类型就会转换成我们定义的格式\\n        converters.add(jackson2HttpMessageConverter());\\n    }\\n\\n    /**\\n     * 添加拦截器\\n     * @param registry  拦截器注册\\n     */\\n    @Override\\n    protected void addInterceptors(InterceptorRegistry registry) {\\n        // TODO Auto-generated method stub\\n        registry.addInterceptor(getLoginInterceptor()).addPathPatterns(\\\"/**\\\")\\n                .excludePathPatterns(\\\"/*/login\\\");;\\n        super.addInterceptors(registry);\\n    }\\n}\\n```\\n 感谢博主的分享经验   \\n参考博客：[https://blog.csdn.net/qq_34975710/article/details/84872489](https://blog.csdn.net/qq_34975710/article/details/84872489)\",\"blogGoods\":1,\"blogId\":\"1331436834413211648\",\"blogImage\":\"http://808km.top/blog/img/default.jpg\",\"blogRead\":47,\"blogTitle\":\"springboot 后端传给前端相差8小时\",\"blogType\":9,\"createdTime\":1606274253000,\"typeName\":\"Springboot\",\"updateTime\":1606975157000,\"version\":35},\"msg\":\"阅读成功\"}', '127.0.0.1', '2020-12-03 14:00:02', NULL);
INSERT INTO `bl_log` VALUES (2708, '阅读博客', '/blog/read/1331436834413211648', '[1331436834413211648]', 1, NULL, 'PUT', 443, '{\"code\":20000,\"data\":{\"blogCollection\":0,\"blogComment\":0,\"blogContent\":\" 在开发中日期最常打交道的东西之一，但是日期又会存在各式各样的格式，常见的情形就是，从数据库取出的日期往往都是时间戳（毫秒数）的形式，这个一般情况下是前端不想要的结果，需要进行处理，那在springboot中比较简单：\\n因为后端传给前端时默认使用jackson转换格式所以我们可以\\n 1. 在application.yml中设置\\n```yml\\nspring:\\n  jackson:\\n    date-format: yyyy-MM-dd HH:mm:ss\\n    time-zone: GMT+8\\n```\\n 2. 在pojo对象上添加@JsonFormat注解\\n```java\\n    @JsonFormat(pattern = \\\"yyyy-MM-dd HH:mm:ss\\\", timezone = \\\"GMT+8\\\")\\n    private Date createdTime;\\n```\\n但是我在尝试了这两个方法以及相类似的方法，但是都无效，要么就是格式化无效，直接返回的时间戳，要么就是时间还是相差8个小时，但是格式化有效。\\n\\n这时我看到了另外一篇不一样的博客，随后明白了为什么我的配置没有用，原来是因为我添加拦截器时写的配置类的问题。\\n以下代码是我更改之前的配置类\\n```java\\npackage com.wsy.blog.config;\\n\\nimport com.fasterxml.jackson.databind.DeserializationFeature;\\nimport com.fasterxml.jackson.databind.ObjectMapper;\\nimport com.wsy.blog.interceptor.LoginInterceptor;\\nimport org.springframework.context.annotation.Bean;\\nimport org.springframework.context.annotation.Configuration;\\nimport org.springframework.http.converter.HttpMessageConverter;\\nimport org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;\\nimport org.springframework.web.servlet.config.annotation.InterceptorRegistry;\\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport;\\n\\nimport java.text.SimpleDateFormat;\\nimport java.util.List;\\n\\n/**\\n * @Author: wsy\\n * @Date: 2020/8/10 11:34\\n */\\n@Configuration\\npublic class InterceptorConfig extends WebMvcConfigurationSupport {\\n\\n    @Bean\\n    public LoginInterceptor getLoginInterceptor() {\\n        return new LoginInterceptor();\\n    }\\n\\n    /**\\n     * 添加拦截器\\n     * @param registry  拦截器注册\\n     */\\n    @Override\\n    protected void addInterceptors(InterceptorRegistry registry) {\\n        // TODO Auto-generated method stub\\n        registry.addInterceptor(getLoginInterceptor()).addPathPatterns(\\\"/**\\\")\\n                .excludePathPatterns(\\\"/*/login\\\");;\\n        super.addInterceptors(registry);\\n    }\\n}\\n```\\n\\n这里大家注意，看看自己的代码有没有因为添加拦截器而创建了一个配置类，该类继承了`WebMvcConfigurationSupport`，就是他！以前是用 `WebMvcConfigurerAdapter` ，springboot 2.0 建议使用 `WebMvcConfigurationSupport` 。但是在添加拦截器并继承 `WebMvcConfigurationSupport` 后会覆盖`@EnableAutoConfiguration`关于`WebMvcAutoConfiguration`的配置！从而导致所有的Date返回都变成时间戳！\\n可以采用另外一种方式，在你继承`WebMvcConfigurationSupport`的子类中添加日期转换的bean\\n以下是我更改后的代码\\n```java\\npackage com.wsy.blog.config;\\n\\nimport com.fasterxml.jackson.databind.DeserializationFeature;\\nimport com.fasterxml.jackson.databind.ObjectMapper;\\nimport com.wsy.blog.interceptor.LoginInterceptor;\\nimport org.springframework.context.annotation.Bean;\\nimport org.springframework.context.annotation.Configuration;\\nimport org.springframework.http.converter.HttpMessageConverter;\\nimport org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;\\nimport org.springframework.web.servlet.config.annotation.InterceptorRegistry;\\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport;\\n\\nimport java.text.SimpleDateFormat;\\nimport java.util.List;\\n\\n/**\\n * @Author: wsy\\n * @Date: 2020/8/10 11:34\\n */\\n@Configuration\\npublic class InterceptorConfig extends WebMvcConfigurationSupport {\\n\\n    @Bean\\n    public LoginInterceptor getLoginInterceptor() {\\n        return new LoginInterceptor();\\n    }\\n\\n    /**\\n     * 定义时间格式转换器\\n     * @return  MappingJackson2HttpMessageConverter\\n     */\\n    @Bean\\n    public MappingJackson2HttpMessageConverter jackson2HttpMessageConverter() {\\n        MappingJackson2HttpMessageConverter converter = new MappingJackson2HttpMessageConverter();\\n        ObjectMapper mapper = new ObjectMapper();\\n        mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\\n        mapper.setDateFormat(new SimpleDateFormat(\\\"yyyy-MM-dd HH:mm:ss\\\"));\\n        converter.setObjectMapper(mapper);\\n        return converter;\\n    }\\n\\n    /**\\n     * 添加转换器\\n     * @param converters    converters\\n     */\\n    @Override\\n    public void configureMessageConverters(List<HttpMessageConverter<?>> converters) {\\n        //将我们定义的时间格式转换器添加到转换器列表中,\\n        //这样jackson格式化时候但凡遇到Date类型就会转换成我们定义的格式\\n        converters.add(jackson2HttpMessageConverter());\\n    }\\n\\n    /**\\n     * 添加拦截器\\n     * @param registry  拦截器注册\\n     */\\n    @Override\\n    protected void addInterceptors(InterceptorRegistry registry) {\\n        // TODO Auto-generated method stub\\n        registry.addInterceptor(getLoginInterceptor()).addPathPatterns(\\\"/**\\\")\\n                .excludePathPatterns(\\\"/*/login\\\");;\\n        super.addInterceptors(registry);\\n    }\\n}\\n```\\n 感谢博主的分享经验   \\n参考博客：[https://blog.csdn.net/qq_34975710/article/details/84872489](https://blog.csdn.net/qq_34975710/article/details/84872489)\",\"blogGoods\":1,\"blogId\":\"1331436834413211648\",\"blogImage\":\"http://808km.top/blog/img/default.jpg\",\"blogRead\":48,\"blogTitle\":\"springboot 后端传给前端相差8小时\",\"blogType\":9,\"createdTime\":1606274253000,\"typeName\":\"Springboot\",\"updateTime\":1606975201000,\"version\":35},\"msg\":\"阅读成功\"}', '127.0.0.1', '2020-12-03 14:00:36', NULL);
INSERT INTO `bl_log` VALUES (2709, '阅读博客', '/blog/read/1331436834413211648', '[1331436834413211648]', 1, NULL, 'PUT', 570, '{\"code\":20000,\"data\":{\"blogCollection\":0,\"blogComment\":0,\"blogContent\":\" 在开发中日期最常打交道的东西之一，但是日期又会存在各式各样的格式，常见的情形就是，从数据库取出的日期往往都是时间戳（毫秒数）的形式，这个一般情况下是前端不想要的结果，需要进行处理，那在springboot中比较简单：\\n因为后端传给前端时默认使用jackson转换格式所以我们可以\\n 1. 在application.yml中设置\\n```yml\\nspring:\\n  jackson:\\n    date-format: yyyy-MM-dd HH:mm:ss\\n    time-zone: GMT+8\\n```\\n 2. 在pojo对象上添加@JsonFormat注解\\n```java\\n    @JsonFormat(pattern = \\\"yyyy-MM-dd HH:mm:ss\\\", timezone = \\\"GMT+8\\\")\\n    private Date createdTime;\\n```\\n但是我在尝试了这两个方法以及相类似的方法，但是都无效，要么就是格式化无效，直接返回的时间戳，要么就是时间还是相差8个小时，但是格式化有效。\\n\\n这时我看到了另外一篇不一样的博客，随后明白了为什么我的配置没有用，原来是因为我添加拦截器时写的配置类的问题。\\n以下代码是我更改之前的配置类\\n```java\\npackage com.wsy.blog.config;\\n\\nimport com.fasterxml.jackson.databind.DeserializationFeature;\\nimport com.fasterxml.jackson.databind.ObjectMapper;\\nimport com.wsy.blog.interceptor.LoginInterceptor;\\nimport org.springframework.context.annotation.Bean;\\nimport org.springframework.context.annotation.Configuration;\\nimport org.springframework.http.converter.HttpMessageConverter;\\nimport org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;\\nimport org.springframework.web.servlet.config.annotation.InterceptorRegistry;\\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport;\\n\\nimport java.text.SimpleDateFormat;\\nimport java.util.List;\\n\\n/**\\n * @Author: wsy\\n * @Date: 2020/8/10 11:34\\n */\\n@Configuration\\npublic class InterceptorConfig extends WebMvcConfigurationSupport {\\n\\n    @Bean\\n    public LoginInterceptor getLoginInterceptor() {\\n        return new LoginInterceptor();\\n    }\\n\\n    /**\\n     * 添加拦截器\\n     * @param registry  拦截器注册\\n     */\\n    @Override\\n    protected void addInterceptors(InterceptorRegistry registry) {\\n        // TODO Auto-generated method stub\\n        registry.addInterceptor(getLoginInterceptor()).addPathPatterns(\\\"/**\\\")\\n                .excludePathPatterns(\\\"/*/login\\\");;\\n        super.addInterceptors(registry);\\n    }\\n}\\n```\\n\\n这里大家注意，看看自己的代码有没有因为添加拦截器而创建了一个配置类，该类继承了`WebMvcConfigurationSupport`，就是他！以前是用 `WebMvcConfigurerAdapter` ，springboot 2.0 建议使用 `WebMvcConfigurationSupport` 。但是在添加拦截器并继承 `WebMvcConfigurationSupport` 后会覆盖`@EnableAutoConfiguration`关于`WebMvcAutoConfiguration`的配置！从而导致所有的Date返回都变成时间戳！\\n可以采用另外一种方式，在你继承`WebMvcConfigurationSupport`的子类中添加日期转换的bean\\n以下是我更改后的代码\\n```java\\npackage com.wsy.blog.config;\\n\\nimport com.fasterxml.jackson.databind.DeserializationFeature;\\nimport com.fasterxml.jackson.databind.ObjectMapper;\\nimport com.wsy.blog.interceptor.LoginInterceptor;\\nimport org.springframework.context.annotation.Bean;\\nimport org.springframework.context.annotation.Configuration;\\nimport org.springframework.http.converter.HttpMessageConverter;\\nimport org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;\\nimport org.springframework.web.servlet.config.annotation.InterceptorRegistry;\\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport;\\n\\nimport java.text.SimpleDateFormat;\\nimport java.util.List;\\n\\n/**\\n * @Author: wsy\\n * @Date: 2020/8/10 11:34\\n */\\n@Configuration\\npublic class InterceptorConfig extends WebMvcConfigurationSupport {\\n\\n    @Bean\\n    public LoginInterceptor getLoginInterceptor() {\\n        return new LoginInterceptor();\\n    }\\n\\n    /**\\n     * 定义时间格式转换器\\n     * @return  MappingJackson2HttpMessageConverter\\n     */\\n    @Bean\\n    public MappingJackson2HttpMessageConverter jackson2HttpMessageConverter() {\\n        MappingJackson2HttpMessageConverter converter = new MappingJackson2HttpMessageConverter();\\n        ObjectMapper mapper = new ObjectMapper();\\n        mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\\n        mapper.setDateFormat(new SimpleDateFormat(\\\"yyyy-MM-dd HH:mm:ss\\\"));\\n        converter.setObjectMapper(mapper);\\n        return converter;\\n    }\\n\\n    /**\\n     * 添加转换器\\n     * @param converters    converters\\n     */\\n    @Override\\n    public void configureMessageConverters(List<HttpMessageConverter<?>> converters) {\\n        //将我们定义的时间格式转换器添加到转换器列表中,\\n        //这样jackson格式化时候但凡遇到Date类型就会转换成我们定义的格式\\n        converters.add(jackson2HttpMessageConverter());\\n    }\\n\\n    /**\\n     * 添加拦截器\\n     * @param registry  拦截器注册\\n     */\\n    @Override\\n    protected void addInterceptors(InterceptorRegistry registry) {\\n        // TODO Auto-generated method stub\\n        registry.addInterceptor(getLoginInterceptor()).addPathPatterns(\\\"/**\\\")\\n                .excludePathPatterns(\\\"/*/login\\\");;\\n        super.addInterceptors(registry);\\n    }\\n}\\n```\\n 感谢博主的分享经验   \\n参考博客：[https://blog.csdn.net/qq_34975710/article/details/84872489](https://blog.csdn.net/qq_34975710/article/details/84872489)\",\"blogGoods\":1,\"blogId\":\"1331436834413211648\",\"blogImage\":\"http://808km.top/blog/img/default.jpg\",\"blogRead\":49,\"blogTitle\":\"springboot 后端传给前端相差8小时\",\"blogType\":9,\"createdTime\":1606274253000,\"typeName\":\"Springboot\",\"updateTime\":1606975236000,\"version\":35},\"msg\":\"阅读成功\"}', '127.0.0.1', '2020-12-03 14:00:45', NULL);
INSERT INTO `bl_log` VALUES (2710, '阅读博客', '/blog/read/1334377734033358848', '[1334377734033358848]', 1, NULL, 'PUT', 499, '{\"code\":20000,\"data\":{\"blogCollection\":0,\"blogComment\":0,\"blogContent\":\"```java\\npublic static void main() {\\n\\tSystem.out.println(\\\"1231231\\\");\\n}\\n```\",\"blogGoods\":0,\"blogId\":\"1334377734033358848\",\"blogImage\":\"http://808km.top/blog/img/default.jpg\",\"blogRead\":0,\"blogTitle\":\"123123\",\"blogType\":9,\"createdTime\":1606975418000,\"typeName\":\"Springboot\",\"updateTime\":1606975418000,\"version\":1},\"msg\":\"阅读成功\"}', '127.0.0.1', '2020-12-03 14:03:49', NULL);
INSERT INTO `bl_log` VALUES (2711, '阅读博客', '/blog/read/1334377734033358848', '[1334377734033358848]', 1, NULL, 'PUT', 452, '{\"code\":20000,\"data\":{\"blogCollection\":0,\"blogComment\":0,\"blogContent\":\"```java\\npublic static void main() {\\n\\tSystem.out.println(\\\"1231231\\\");\\n}\\n```\",\"blogGoods\":0,\"blogId\":\"1334377734033358848\",\"blogImage\":\"http://808km.top/blog/img/default.jpg\",\"blogRead\":1,\"blogTitle\":\"123123\",\"blogType\":9,\"createdTime\":1606975418000,\"typeName\":\"Springboot\",\"updateTime\":1606975429000,\"version\":1},\"msg\":\"阅读成功\"}', '127.0.0.1', '2020-12-03 14:06:25', NULL);
INSERT INTO `bl_log` VALUES (2712, '阅读博客', '/blog/read/1334377734033358848', '[1334377734033358848]', 1, NULL, 'PUT', 520, '{\"code\":20000,\"data\":{\"blogCollection\":0,\"blogComment\":0,\"blogContent\":\"```java\\npublic static void main() {\\n\\tSystem.out.println(\\\"1231231\\\");\\n}\\n```\",\"blogGoods\":0,\"blogId\":\"1334377734033358848\",\"blogImage\":\"http://808km.top/blog/img/default.jpg\",\"blogRead\":2,\"blogTitle\":\"123123\",\"blogType\":9,\"createdTime\":1606975418000,\"typeName\":\"Springboot\",\"updateTime\":1606975584000,\"version\":1},\"msg\":\"阅读成功\"}', '127.0.0.1', '2020-12-03 14:06:30', NULL);
INSERT INTO `bl_log` VALUES (2713, '阅读博客', '/blog/read/1334380840830971904', '[1334380840830971904]', 1, NULL, 'PUT', 415, '{\"code\":20000,\"data\":{\"blogCollection\":0,\"blogComment\":0,\"blogContent\":\"<pre><div class=\\\"hljs\\\"><code class=\\\"lang-java\\\"><span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">static</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title\\\">main</span><span class=\\\"hljs-params\\\">()</span> </span>{\\n\\tSystem.out.println(<span class=\\\"hljs-number\\\">123</span>);\\n}\\n</code></div></pre>\\n<p><mark>牛逼</mark></p>\\n\",\"blogGoods\":0,\"blogId\":\"1334380840830971904\",\"blogImage\":\"http://808km.top/blog/img/default.jpg\",\"blogRead\":0,\"blogTitle\":\"22222222222\",\"blogType\":12,\"createdTime\":1606976159000,\"typeName\":\"Shiro\",\"updateTime\":1606976158000,\"version\":1},\"msg\":\"阅读成功\"}', '127.0.0.1', '2020-12-03 14:23:55', NULL);
INSERT INTO `bl_log` VALUES (2714, '阅读博客', '/blog/read/1334380840830971904', '[1334380840830971904]', 1, NULL, 'PUT', 457, '{\"code\":20000,\"data\":{\"blogCollection\":0,\"blogComment\":0,\"blogContent\":\"<pre><div class=\\\"hljs\\\"><code class=\\\"lang-java\\\"><span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">static</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title\\\">main</span><span class=\\\"hljs-params\\\">()</span> </span>{\\n\\tSystem.out.println(<span class=\\\"hljs-number\\\">123</span>);\\n}\\n</code></div></pre>\\n<p><mark>牛逼</mark></p>\\n\",\"blogGoods\":0,\"blogId\":\"1334380840830971904\",\"blogImage\":\"http://808km.top/blog/img/default.jpg\",\"blogRead\":1,\"blogTitle\":\"22222222222\",\"blogType\":12,\"createdTime\":1606976159000,\"typeName\":\"Shiro\",\"updateTime\":1606976635000,\"version\":1},\"msg\":\"阅读成功\"}', '127.0.0.1', '2020-12-03 14:24:16', NULL);
INSERT INTO `bl_log` VALUES (2715, '阅读博客', '/blog/read/1334380840830971904', '[1334380840830971904]', 1, NULL, 'PUT', 474, '{\"code\":20000,\"data\":{\"blogCollection\":0,\"blogComment\":0,\"blogContent\":\"<pre><div class=\\\"hljs\\\"><code class=\\\"lang-java\\\"><span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">static</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title\\\">main</span><span class=\\\"hljs-params\\\">()</span> </span>{\\n\\tSystem.out.println(<span class=\\\"hljs-number\\\">123</span>);\\n}\\n</code></div></pre>\\n<p><mark>牛逼</mark></p>\\n\",\"blogGoods\":0,\"blogId\":\"1334380840830971904\",\"blogImage\":\"http://808km.top/blog/img/default.jpg\",\"blogRead\":2,\"blogTitle\":\"22222222222\",\"blogType\":12,\"createdTime\":1606976159000,\"typeName\":\"Shiro\",\"updateTime\":1606976655000,\"version\":1},\"msg\":\"阅读成功\"}', '127.0.0.1', '2020-12-03 14:24:16', NULL);
INSERT INTO `bl_log` VALUES (2716, '阅读博客', '/blog/read/1334380840830971904', '[1334380840830971904]', 1, NULL, 'PUT', 452, '{\"code\":20000,\"data\":{\"blogCollection\":0,\"blogComment\":0,\"blogContent\":\"<pre><div class=\\\"hljs\\\"><code class=\\\"lang-java\\\"><span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">static</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title\\\">main</span><span class=\\\"hljs-params\\\">()</span> </span>{\\n\\tSystem.out.println(<span class=\\\"hljs-number\\\">123</span>);\\n}\\n</code></div></pre>\\n<p><mark>牛逼</mark></p>\\n\",\"blogGoods\":0,\"blogId\":\"1334380840830971904\",\"blogImage\":\"http://808km.top/blog/img/default.jpg\",\"blogRead\":3,\"blogTitle\":\"22222222222\",\"blogType\":12,\"createdTime\":1606976159000,\"typeName\":\"Shiro\",\"updateTime\":1606976656000,\"version\":1},\"msg\":\"阅读成功\"}', '127.0.0.1', '2020-12-03 14:25:00', NULL);
INSERT INTO `bl_log` VALUES (2717, '阅读博客', '/blog/read/1334380840830971904', '[1334380840830971904]', 1, NULL, 'PUT', 512, '{\"code\":20000,\"data\":{\"blogCollection\":0,\"blogComment\":0,\"blogContent\":\"<pre><div class=\\\"hljs\\\"><code class=\\\"lang-java\\\"><span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">static</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title\\\">main</span><span class=\\\"hljs-params\\\">()</span> </span>{\\n\\tSystem.out.println(<span class=\\\"hljs-number\\\">123</span>);\\n}\\n</code></div></pre>\\n<p><mark>牛逼</mark></p>\\n\",\"blogGoods\":0,\"blogId\":\"1334380840830971904\",\"blogImage\":\"http://808km.top/blog/img/default.jpg\",\"blogRead\":4,\"blogTitle\":\"22222222222\",\"blogType\":12,\"createdTime\":1606976159000,\"typeName\":\"Shiro\",\"updateTime\":1606976700000,\"version\":1},\"msg\":\"阅读成功\"}', '127.0.0.1', '2020-12-03 14:25:08', NULL);
INSERT INTO `bl_log` VALUES (2718, '阅读博客', '/blog/read/1334381108050079744', '[1334381108050079744]', 1, NULL, 'PUT', 457, '{\"code\":20000,\"data\":{\"blogCollection\":0,\"blogComment\":0,\"blogContent\":\"<h1><a id=\\\"asdasd_0\\\"></a>asdasd</h1>\\n<h2><a id=\\\"asda_1\\\"></a>asda</h2>\\n<h3><a id=\\\"12321_2\\\"></a><mark>12321</mark></h3>\\n\",\"blogGoods\":0,\"blogId\":\"1334381108050079744\",\"blogImage\":\"http://808km.top/blog/img/default.jpg\",\"blogRead\":3,\"blogTitle\":\"asdasd\",\"blogType\":12,\"createdTime\":1606976222000,\"typeName\":\"Shiro\",\"updateTime\":1606976578000,\"version\":1},\"msg\":\"阅读成功\"}', '127.0.0.1', '2020-12-03 14:25:13', NULL);
INSERT INTO `bl_log` VALUES (2719, '阅读博客', '/blog/read/1331436834413211648', '[1331436834413211648]', 1, NULL, 'PUT', 479, '{\"code\":20000,\"data\":{\"blogCollection\":0,\"blogComment\":0,\"blogContent\":\" 在开发中日期最常打交道的东西之一，但是日期又会存在各式各样的格式，常见的情形就是，从数据库取出的日期往往都是时间戳（毫秒数）的形式，这个一般情况下是前端不想要的结果，需要进行处理，那在springboot中比较简单：\\n因为后端传给前端时默认使用jackson转换格式所以我们可以\\n 1. 在application.yml中设置\\n```yml\\nspring:\\n  jackson:\\n    date-format: yyyy-MM-dd HH:mm:ss\\n    time-zone: GMT+8\\n```\\n 2. 在pojo对象上添加@JsonFormat注解\\n```java\\n    @JsonFormat(pattern = \\\"yyyy-MM-dd HH:mm:ss\\\", timezone = \\\"GMT+8\\\")\\n    private Date createdTime;\\n```\\n但是我在尝试了这两个方法以及相类似的方法，但是都无效，要么就是格式化无效，直接返回的时间戳，要么就是时间还是相差8个小时，但是格式化有效。\\n\\n这时我看到了另外一篇不一样的博客，随后明白了为什么我的配置没有用，原来是因为我添加拦截器时写的配置类的问题。\\n以下代码是我更改之前的配置类\\n```java\\npackage com.wsy.blog.config;\\n\\nimport com.fasterxml.jackson.databind.DeserializationFeature;\\nimport com.fasterxml.jackson.databind.ObjectMapper;\\nimport com.wsy.blog.interceptor.LoginInterceptor;\\nimport org.springframework.context.annotation.Bean;\\nimport org.springframework.context.annotation.Configuration;\\nimport org.springframework.http.converter.HttpMessageConverter;\\nimport org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;\\nimport org.springframework.web.servlet.config.annotation.InterceptorRegistry;\\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport;\\n\\nimport java.text.SimpleDateFormat;\\nimport java.util.List;\\n\\n/**\\n * @Author: wsy\\n * @Date: 2020/8/10 11:34\\n */\\n@Configuration\\npublic class InterceptorConfig extends WebMvcConfigurationSupport {\\n\\n    @Bean\\n    public LoginInterceptor getLoginInterceptor() {\\n        return new LoginInterceptor();\\n    }\\n\\n    /**\\n     * 添加拦截器\\n     * @param registry  拦截器注册\\n     */\\n    @Override\\n    protected void addInterceptors(InterceptorRegistry registry) {\\n        // TODO Auto-generated method stub\\n        registry.addInterceptor(getLoginInterceptor()).addPathPatterns(\\\"/**\\\")\\n                .excludePathPatterns(\\\"/*/login\\\");;\\n        super.addInterceptors(registry);\\n    }\\n}\\n```\\n\\n这里大家注意，看看自己的代码有没有因为添加拦截器而创建了一个配置类，该类继承了`WebMvcConfigurationSupport`，就是他！以前是用 `WebMvcConfigurerAdapter` ，springboot 2.0 建议使用 `WebMvcConfigurationSupport` 。但是在添加拦截器并继承 `WebMvcConfigurationSupport` 后会覆盖`@EnableAutoConfiguration`关于`WebMvcAutoConfiguration`的配置！从而导致所有的Date返回都变成时间戳！\\n可以采用另外一种方式，在你继承`WebMvcConfigurationSupport`的子类中添加日期转换的bean\\n以下是我更改后的代码\\n```java\\npackage com.wsy.blog.config;\\n\\nimport com.fasterxml.jackson.databind.DeserializationFeature;\\nimport com.fasterxml.jackson.databind.ObjectMapper;\\nimport com.wsy.blog.interceptor.LoginInterceptor;\\nimport org.springframework.context.annotation.Bean;\\nimport org.springframework.context.annotation.Configuration;\\nimport org.springframework.http.converter.HttpMessageConverter;\\nimport org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;\\nimport org.springframework.web.servlet.config.annotation.InterceptorRegistry;\\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport;\\n\\nimport java.text.SimpleDateFormat;\\nimport java.util.List;\\n\\n/**\\n * @Author: wsy\\n * @Date: 2020/8/10 11:34\\n */\\n@Configuration\\npublic class InterceptorConfig extends WebMvcConfigurationSupport {\\n\\n    @Bean\\n    public LoginInterceptor getLoginInterceptor() {\\n        return new LoginInterceptor();\\n    }\\n\\n    /**\\n     * 定义时间格式转换器\\n     * @return  MappingJackson2HttpMessageConverter\\n     */\\n    @Bean\\n    public MappingJackson2HttpMessageConverter jackson2HttpMessageConverter() {\\n        MappingJackson2HttpMessageConverter converter = new MappingJackson2HttpMessageConverter();\\n        ObjectMapper mapper = new ObjectMapper();\\n        mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\\n        mapper.setDateFormat(new SimpleDateFormat(\\\"yyyy-MM-dd HH:mm:ss\\\"));\\n        converter.setObjectMapper(mapper);\\n        return converter;\\n    }\\n\\n    /**\\n     * 添加转换器\\n     * @param converters    converters\\n     */\\n    @Override\\n    public void configureMessageConverters(List<HttpMessageConverter<?>> converters) {\\n        //将我们定义的时间格式转换器添加到转换器列表中,\\n        //这样jackson格式化时候但凡遇到Date类型就会转换成我们定义的格式\\n        converters.add(jackson2HttpMessageConverter());\\n    }\\n\\n    /**\\n     * 添加拦截器\\n     * @param registry  拦截器注册\\n     */\\n    @Override\\n    protected void addInterceptors(InterceptorRegistry registry) {\\n        // TODO Auto-generated method stub\\n        registry.addInterceptor(getLoginInterceptor()).addPathPatterns(\\\"/**\\\")\\n                .excludePathPatterns(\\\"/*/login\\\");;\\n        super.addInterceptors(registry);\\n    }\\n}\\n```\\n 感谢博主的分享经验   \\n参考博客：[https://blog.csdn.net/qq_34975710/article/details/84872489](https://blog.csdn.net/qq_34975710/article/details/84872489)\",\"blogGoods\":1,\"blogId\":\"1331436834413211648\",\"blogImage\":\"http://808km.top/blog/img/default.jpg\",\"blogRead\":50,\"blogTitle\":\"springboot 后端传给前端相差8小时\",\"blogType\":9,\"createdTime\":1606274253000,\"typeName\":\"Springboot\",\"updateTime\":1606975244000,\"version\":35},\"msg\":\"阅读成功\"}', '127.0.0.1', '2020-12-03 14:25:27', NULL);
INSERT INTO `bl_log` VALUES (2720, '阅读博客', '/blog/read/1334386161301401600', '[1334386161301401600]', 1, NULL, 'PUT', 1211, '{\"code\":20000,\"data\":{\"blogCollection\":0,\"blogComment\":0,\"blogContent\":\"<pre><div class=\\\"hljs\\\"><code class=\\\"lang-c\\\"><span class=\\\"hljs-meta\\\">#<span class=\\\"hljs-meta-keyword\\\">include</span> <span class=\\\"hljs-meta-string\\\">\\\"stdio.h\\\"</span></span>\\nmain(){\\n\\t<span class=\\\"hljs-built_in\\\">printf</span>(<span class=\\\"hljs-string\\\">\\\"13\\\"</span>);\\n}\\n</code></div></pre>\\n\",\"blogGoods\":0,\"blogId\":\"1334386161301401600\",\"blogImage\":\"http://808km.top/blog/img/default.jpg\",\"blogRead\":8,\"blogTitle\":\"asdasdzcx\",\"blogType\":10,\"createdTime\":1606977427000,\"typeName\":\"Mybatis\",\"updateTime\":1606978394000,\"version\":1},\"msg\":\"阅读成功\"}', '127.0.0.1', '2020-12-03 18:39:50', NULL);
INSERT INTO `bl_log` VALUES (2721, '阅读博客', '/blog/read/1334386161301401600', '[1334386161301401600]', 1, NULL, 'PUT', 691, '{\"code\":20000,\"data\":{\"blogCollection\":0,\"blogComment\":0,\"blogContent\":\"<pre><div class=\\\"hljs\\\"><code class=\\\"lang-c\\\"><span class=\\\"hljs-meta\\\">#<span class=\\\"hljs-meta-keyword\\\">include</span> <span class=\\\"hljs-meta-string\\\">\\\"stdio.h\\\"</span></span>\\nmain(){\\n\\t<span class=\\\"hljs-built_in\\\">printf</span>(<span class=\\\"hljs-string\\\">\\\"13\\\"</span>);\\n}\\n</code></div></pre>\\n\",\"blogGoods\":0,\"blogId\":\"1334386161301401600\",\"blogImage\":\"http://808km.top/blog/img/default.jpg\",\"blogRead\":9,\"blogTitle\":\"asdasdzcx\",\"blogType\":10,\"createdTime\":1606977427000,\"typeName\":\"Mybatis\",\"updateTime\":1606991990000,\"version\":1},\"msg\":\"阅读成功\"}', '127.0.0.1', '2020-12-03 18:39:56', NULL);
INSERT INTO `bl_log` VALUES (2722, '阅读博客', '/blog/read/1334386161301401600', '[1334386161301401600]', 1, NULL, 'PUT', 1010, '{\"code\":20000,\"data\":{\"blogCollection\":0,\"blogComment\":0,\"blogContent\":\"<pre><div class=\\\"hljs\\\"><code class=\\\"lang-c\\\"><span class=\\\"hljs-meta\\\">#<span class=\\\"hljs-meta-keyword\\\">include</span> <span class=\\\"hljs-meta-string\\\">\\\"stdio.h\\\"</span></span>\\nmain(){\\n\\t<span class=\\\"hljs-built_in\\\">printf</span>(<span class=\\\"hljs-string\\\">\\\"13\\\"</span>);\\n}\\n</code></div></pre>\\n\",\"blogGoods\":0,\"blogId\":\"1334386161301401600\",\"blogImage\":\"http://808km.top/blog/img/default.jpg\",\"blogRead\":10,\"blogTitle\":\"asdasdzcx\",\"blogType\":10,\"createdTime\":1606977427000,\"typeName\":\"Mybatis\",\"updateTime\":1606991995000,\"version\":1},\"msg\":\"阅读成功\"}', '127.0.0.1', '2020-12-03 18:43:04', NULL);
INSERT INTO `bl_log` VALUES (2723, '阅读博客', '/blog/read/1334386161301401600', '[1334386161301401600]', 1, NULL, 'PUT', 586, '{\"code\":20000,\"data\":{\"blogCollection\":0,\"blogComment\":0,\"blogContent\":\"<pre><div class=\\\"hljs\\\"><code class=\\\"lang-c\\\"><span class=\\\"hljs-meta\\\">#<span class=\\\"hljs-meta-keyword\\\">include</span> <span class=\\\"hljs-meta-string\\\">\\\"stdio.h\\\"</span></span>\\nmain(){\\n\\t<span class=\\\"hljs-built_in\\\">printf</span>(<span class=\\\"hljs-string\\\">\\\"13\\\"</span>);\\n}\\n</code></div></pre>\\n\",\"blogGoods\":0,\"blogId\":\"1334386161301401600\",\"blogImage\":\"http://808km.top/blog/img/default.jpg\",\"blogRead\":11,\"blogTitle\":\"asdasdzcx\",\"blogType\":10,\"createdTime\":1606977427000,\"typeName\":\"Mybatis\",\"updateTime\":1606992183000,\"version\":1},\"msg\":\"阅读成功\"}', '127.0.0.1', '2020-12-03 18:43:04', NULL);
INSERT INTO `bl_log` VALUES (2724, '阅读博客', '/blog/read/1334386161301401600', '[1334386161301401600]', 1, NULL, 'PUT', 565, '{\"code\":20000,\"data\":{\"blogCollection\":0,\"blogComment\":0,\"blogContent\":\"<pre><div class=\\\"hljs\\\"><code class=\\\"lang-c\\\"><span class=\\\"hljs-meta\\\">#<span class=\\\"hljs-meta-keyword\\\">include</span> <span class=\\\"hljs-meta-string\\\">\\\"stdio.h\\\"</span></span>\\nmain(){\\n\\t<span class=\\\"hljs-built_in\\\">printf</span>(<span class=\\\"hljs-string\\\">\\\"13\\\"</span>);\\n}\\n</code></div></pre>\\n\",\"blogGoods\":0,\"blogId\":\"1334386161301401600\",\"blogImage\":\"http://808km.top/blog/img/default.jpg\",\"blogRead\":12,\"blogTitle\":\"asdasdzcx\",\"blogType\":10,\"createdTime\":1606977427000,\"typeName\":\"Mybatis\",\"updateTime\":1606992183000,\"version\":1},\"msg\":\"阅读成功\"}', '127.0.0.1', '2020-12-03 18:43:06', NULL);
INSERT INTO `bl_log` VALUES (2725, '阅读博客', '/blog/read/1334386161301401600', '[1334386161301401600]', 1, NULL, 'PUT', 574, '{\"code\":20000,\"data\":{\"blogCollection\":0,\"blogComment\":0,\"blogContent\":\"<pre><div class=\\\"hljs\\\"><code class=\\\"lang-c\\\"><span class=\\\"hljs-meta\\\">#<span class=\\\"hljs-meta-keyword\\\">include</span> <span class=\\\"hljs-meta-string\\\">\\\"stdio.h\\\"</span></span>\\nmain(){\\n\\t<span class=\\\"hljs-built_in\\\">printf</span>(<span class=\\\"hljs-string\\\">\\\"13\\\"</span>);\\n}\\n</code></div></pre>\\n\",\"blogGoods\":0,\"blogId\":\"1334386161301401600\",\"blogImage\":\"http://808km.top/blog/img/default.jpg\",\"blogRead\":13,\"blogTitle\":\"asdasdzcx\",\"blogType\":10,\"createdTime\":1606977427000,\"typeName\":\"Mybatis\",\"updateTime\":1606992185000,\"version\":1},\"msg\":\"阅读成功\"}', '127.0.0.1', '2020-12-03 18:44:50', NULL);
INSERT INTO `bl_log` VALUES (2726, '阅读博客', '/blog/read/1334386161301401600', '[1334386161301401600]', 1, NULL, 'PUT', 488, '{\"code\":20000,\"data\":{\"blogCollection\":0,\"blogComment\":0,\"blogContent\":\"<pre><div class=\\\"hljs\\\"><code class=\\\"lang-c\\\"><span class=\\\"hljs-meta\\\">#<span class=\\\"hljs-meta-keyword\\\">include</span> <span class=\\\"hljs-meta-string\\\">\\\"stdio.h\\\"</span></span>\\nmain(){\\n\\t<span class=\\\"hljs-built_in\\\">printf</span>(<span class=\\\"hljs-string\\\">\\\"13\\\"</span>);\\n}\\n</code></div></pre>\\n\",\"blogGoods\":0,\"blogId\":\"1334386161301401600\",\"blogImage\":\"http://808km.top/blog/img/default.jpg\",\"blogRead\":14,\"blogTitle\":\"asdasdzcx\",\"blogType\":10,\"createdTime\":1606977427000,\"typeName\":\"Mybatis\",\"updateTime\":1606992289000,\"version\":1},\"msg\":\"阅读成功\"}', '127.0.0.1', '2020-12-03 18:44:50', NULL);
INSERT INTO `bl_log` VALUES (2727, '阅读博客', '/blog/read/1334377734033358848', '[1334377734033358848]', 1, NULL, 'PUT', 1125, '{\"code\":20000,\"data\":{\"blogCollection\":0,\"blogComment\":0,\"blogContent\":\"```java\\npublic static void main() {\\n\\tSystem.out.println(\\\"1231231\\\");\\n}\\n```\",\"blogGoods\":0,\"blogId\":\"1334377734033358848\",\"blogImage\":\"http://808km.top/blog/img/default.jpg\",\"blogRead\":7,\"blogTitle\":\"123123\",\"blogType\":9,\"createdTime\":1606975418000,\"typeName\":\"Springboot\",\"updateTime\":1606977615000,\"version\":1},\"msg\":\"阅读成功\"}', '127.0.0.1', '2020-12-03 19:14:53', NULL);
INSERT INTO `bl_log` VALUES (2728, '阅读博客', '/blog/read/1334380840830971904', '[1334380840830971904]', 1, NULL, 'PUT', 674, '{\"code\":20000,\"data\":{\"blogCollection\":0,\"blogComment\":0,\"blogContent\":\"<pre><div class=\\\"hljs\\\"><code class=\\\"lang-java\\\"><span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">static</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title\\\">main</span><span class=\\\"hljs-params\\\">()</span> </span>{\\n\\tSystem.out.println(<span class=\\\"hljs-number\\\">123</span>);\\n}\\n</code></div></pre>\\n<p><mark>牛逼</mark></p>\\n\",\"blogGoods\":0,\"blogId\":\"1334380840830971904\",\"blogImage\":\"http://808km.top/blog/img/default.jpg\",\"blogRead\":7,\"blogTitle\":\"22222222222\",\"blogType\":12,\"createdTime\":1606976159000,\"typeName\":\"Shiro\",\"updateTime\":1606977770000,\"version\":1},\"msg\":\"阅读成功\"}', '127.0.0.1', '2020-12-03 19:15:11', NULL);
INSERT INTO `bl_log` VALUES (2729, '阅读博客', '/blog/read/1334380840830971904', '[1334380840830971904]', 1, NULL, 'PUT', 1323, '{\"code\":20000,\"data\":{\"blogCollection\":0,\"blogComment\":0,\"blogContent\":\"<pre><div class=\\\"hljs\\\"><code class=\\\"lang-java\\\"><span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">static</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title\\\">main</span><span class=\\\"hljs-params\\\">()</span> </span>{\\n\\tSystem.out.println(<span class=\\\"hljs-number\\\">123</span>);\\n}\\n</code></div></pre>\\n<p><mark>牛逼</mark></p>\\n\",\"blogGoods\":0,\"blogId\":\"1334380840830971904\",\"blogImage\":\"http://808km.top/blog/img/default.jpg\",\"blogRead\":8,\"blogTitle\":\"22222222222\",\"blogType\":12,\"createdTime\":1606976159000,\"typeName\":\"Shiro\",\"updateTime\":1606994110000,\"version\":1},\"msg\":\"阅读成功\"}', '127.0.0.1', '2020-12-03 19:16:50', NULL);
INSERT INTO `bl_log` VALUES (2730, '阅读关于我的', '/about/read', '[]', 1, NULL, 'PUT', 583, '{\"code\":20000,\"data\":{\"aboutContent\":\"# 前言\\n我是一名即将大三的在校大学生，自主学习的过程中跟随讲师开发了该个人博客&ldquo;闲言博客&rdquo;，这个博客功能简单，但是为我巩固了不少的技术知识，该网站为前后端分离项目，后端:_**springboot+mybatis**_ 前端-前台：_**vue+ and design**_前端-后台: _**vue+ element-ui**_ 开发该项目花了我大概10来天时间，前台页面代码是我copy的讲师提供的静态页面（原谅我写的css自己都看不下去），后续想追加个_**redis**_写个缓存，以及加一个_**ElasticSearch**_搜索引擎，加油吧！\\n\\n## 该博客使用到的技术栈：\\nSpringBoot，Mybatis，Shiro，Maven，Vue，ElementUI，AntDesignVue，Flex布局，Linux，Nginx，Docker，FastDFS，MongoDB，SpringDataMongoDB\\n该博客由我在腾讯课堂购买课程学习开发，网址：\\n\\n[课程地址](https://ke.qq.com/course/1129309)\\n\\n-------------------------------------------------------------------------\\n\\n目前我正在修改该博客的小bug并且在集成更多的新功能，我希望能够使用这个博客项目去巩固我学习的新知识，也希望能有更多的人看到我写的这个项目。\\n\\n## 目前需要改进的地方：\\n\\n1.  使用elasticSearch 进行博客的检索\\n2.  将首页的主图片修改为轮播图\\n3.  ~~注册时上传头像~~\\n4.  ~~将富文本编辑器改为Markdown编辑器~~\\n5.  ~~更新记录日志的方式~~\\n6.  ~~首页url的问题~~\\n7.  ~~数据库时间问题~~\\n8.  ~~前台md5加密改为后台加密后再匹配~~\\n9.  ~~推荐博客下的时间~~\\n10.  ~~登录注册页面的背景图片~~\\n11.  ~~登录注册页面的卡片问题~~\\n12. 后台中写博客路由问题\\n13. 后端登录中管理员和用户混淆不清关系\\n14. ~~阅读博客时会更新version(乐观锁)这可能会导致在别人观看博客的时候导致博主无法更新博客影响博主体验~~\\n15. 在进入下一个路由之后回到顶部\\n16. 将分页功能改为加载更多\\n\\n暂时还需要学习一点其他的之后，等有时间的时候再来继续完善该博客。\\n## 更新记录\\n- 2020-11-17 09:25 add:如果添加博客不上传封面将会设置一个默认封面图片\\n\\n- 2020-11-18 21:48 update:将原本前端md5加密后再跟后端匹配改为后端进行加密后再匹配\\n\\n- 2020-11-19 22:15 fix:将页面url后面会添加publicPath问题解决\\n\\n- 2020-11-24 11:25 update:将前端静态资源使用cdn加速、日志原记录为controller层的所有方法切入改为Log注解处切入\\n\\n- 2020-11-24 21:51 fix:修复推荐博客下的时间bug\\n- 2020-11-24 21:51 add:注册时添加上传头像功能\\n\\n- 2020-11-25 11:46 fix:修复数据库时间问题，具体问题已发博客，[点我查看](http://oopsw.top:1001/info/1331436834413211648)\\n\\n- 2020-11-27 23:47 fix:登录注册页面卡片超出页面没有显示滚动条、背景图片在页面放大时会出现多个背景图片\\n\\n- 2020-11-29 00:51  update:将前后台的所有富文本编辑器更换为markdown编辑器，并用markdown的样式\\n- 2020-12-01 08:30        update:修改markdown代码块样式\\n- 2020-12-01 08:57        fix:手机访问登录注册页面时样式体验差\",\"aboutId\":\"5\",\"aboutRead\":164,\"aboutTitle\":\"关于我的 关于“闲言”\",\"createdTime\":1597816791000,\"enable\":1,\"updateTime\":1606973552000,\"version\":208},\"msg\":\"阅读成功\"}', '127.0.0.1', '2020-12-03 19:21:38', NULL);
INSERT INTO `bl_log` VALUES (2731, '阅读博客', '//blog/read/1333708609683533824', '[1333708609683533824]', 1, NULL, 'PUT', 496, '{\"code\":20000,\"data\":{\"blogCollection\":1,\"blogComment\":0,\"blogContent\":\"<h1><a id=\\\"_0\\\"></a>前言</h1>\\n<p>今天在给博客更新，将session存到redis中持久化存储，正常操作是没问题的，但是后来尝试发现，在我输入的密码是错误的时候，他也创建了session，经过我的一番从尾到头的debug。。。。<br />\\n复杂的debug过程就不贴出来了，放出问题的根源<br />\\n在登陆时，会访问到我用来记录日志的切面,而我的记录日志方法中有一个需要获取到当前登录的用户的信息，来完善日志的字段</p>\\n<blockquote>\\n<p><img src=\\\"http://808km.top/blog/img/img/blogImg/1333703986787631104\\\" alt=\\\"image.png\\\" /><br />\\n以下是工具类中的原方法：<br />\\n<img src=\\\"http://808km.top/blog/img/img/blogImg/1333704236625543168\\\" alt=\\\"image.png\\\" /><br />\\n以下是修改后的方法<br />\\n<img src=\\\"http://808km.top/blog/img/img/blogImg/1333704399599419392\\\" alt=\\\"image.png\\\" /><br />\\n这就是问题的根源，因为在我登录的时候，要记录日志，然后去调用工具类，工具类去获取session，如果没有getSession(false)的话，就会判断session是否存在，如果不存在的话就会自动创建session，这就是为什么明明密码错了还会创建session的原因</p>\\n</blockquote>\\n\",\"blogGoods\":1,\"blogId\":\"1333708609683533824\",\"blogImage\":\"http://808km.top/blog/img/default.jpg\",\"blogRead\":33,\"blogRemark\":\"shiro+redis整合实现session持久化登陆失败时也会生成session问题\",\"blogTitle\":\"shiro+redis整合实现session持久化登陆失败时也会生成session问题\",\"blogType\":6,\"createdTime\":1606815886000,\"typeName\":\"Java\",\"updateTime\":1606999845000,\"version\":3},\"msg\":\"阅读成功\"}', '218.77.40.68', '2020-12-03 22:14:35', NULL);
INSERT INTO `bl_log` VALUES (2732, '阅读博客', '//blog/read/1333411378995605504', '[1333411378995605504]', 1, NULL, 'PUT', 44, '{\"code\":20000,\"data\":{\"blogCollection\":0,\"blogComment\":0,\"blogContent\":\"<h2><a id=\\\"_0\\\"></a>预备环境准备</h2>\\n<p>Nacos 依赖 <a href=\\\"https://docs.oracle.com/cd/E19182-01/820-7851/inst_cli_jdk_javahome_t/\\\" target=\\\"_blank\\\">Java</a> 环境来运行。如果您是从代码开始构建并运行Nacos，还需要为此配置 <a href=\\\"https://maven.apache.org/index.html\\\" target=\\\"_blank\\\">Maven</a>环境，请确保是在以下版本环境中安装使用:</p>\\n<ol>\\n<li>64 bit OS，支持 Linux/Unix/Mac/Windows，推荐选用 Linux/Unix/Mac。</li>\\n<li>64 bit JDK 1.8+；<a href=\\\"http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html\\\" target=\\\"_blank\\\">下载</a> &amp; <a href=\\\"https://docs.oracle.com/cd/E19182-01/820-7851/inst_cli_jdk_javahome_t/\\\" target=\\\"_blank\\\">配置</a>。</li>\\n<li>Maven 3.2.x+；<a href=\\\"https://maven.apache.org/download.cgi\\\" target=\\\"_blank\\\">下载</a> &amp; <a href=\\\"https://maven.apache.org/settings.html\\\" target=\\\"_blank\\\">配置</a>。</li>\\n</ol>\\n<h2><a id=\\\"nacos_8\\\"></a>下载nacos安装包</h2>\\n<p>https://github.com/alibaba/nacos/releases/tag/1.4.0</p>\\n<blockquote>\\n<p><img src=\\\"https://img-blog.csdnimg.cn/20201130205557917.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ0ODU5OA==,size_16,color_FFFFFF,t_70\\\" alt=\\\"在这里插入图片描述\\\" /></p>\\n</blockquote>\\n<p>linux选择第一个</p>\\n<p>windows选择第二个</p>\\n<h2><a id=\\\"_21\\\"></a>搭建环境</h2>\\n<h3><a id=\\\"_23\\\"></a>集群模式部署</h3>\\n<p>这个快速开始手册是帮忙您快速在你的电脑上，下载安装并使用Nacos，部署生产使用的集群模式。</p>\\n<h3><a id=\\\"_27\\\"></a>集群部署架构图</h3>\\n<p><img src=\\\"https://img-blog.csdnimg.cn/20201130205609797.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ0ODU5OA==,size_16,color_FFFFFF,t_70\\\" alt=\\\"在这里插入图片描述\\\" /></p>\\n<p>VIP:虚拟ip</p>\\n<p>因此开源的时候推荐用户把所有服务列表放到一个vip下面，然后挂到一个域名下面</p>\\n<p><a href=\\\"http://ip1/\\\" target=\\\"_blank\\\">http://ip1</a>:port/openAPI 直连ip模式，机器挂则需要修改ip才可以使用。</p>\\n<p><a href=\\\"http://vip/\\\" target=\\\"_blank\\\">http://VIP</a>:port/openAPI 挂载VIP模式，直连vip即可，下面挂server真实ip，可读性不好。</p>\\n<p><a href=\\\"http://nacos.com/\\\" target=\\\"_blank\\\">http://nacos.com</a>:port/openAPI 域名 + VIP模式，可读性好，而且换ip方便，推荐模式</p>\\n<h3><a id=\\\"_42\\\"></a>创建目录</h3>\\n<p>该目录存放nacos集群</p>\\n<pre><div class=\\\"hljs\\\"><code class=\\\"lang-sh\\\">mkdir /usr/<span class=\\\"hljs-built_in\\\">local</span>/nacos\\n</code></div></pre>\\n<h3><a id=\\\"nacos_50\\\"></a>上传nacos</h3>\\n<blockquote>\\n<p><img src=\\\"https://img-blog.csdnimg.cn/20201130205630233.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ0ODU5OA==,size_16,color_FFFFFF,t_70\\\" alt=\\\"在这里插入图片描述\\\" /></p>\\n</blockquote>\\n<h3><a id=\\\"nacos_54\\\"></a>解压nacos</h3>\\n<pre><div class=\\\"hljs\\\"><code class=\\\"lang-sh\\\">tar -zxvf nacos-server-1.4.0.tar.gz\\n</code></div></pre>\\n<h3><a id=\\\"nacos_60\\\"></a>创建nacos持久化数据库</h3>\\n<p>首先使用navicat连接mysql数据库，然后创建数据库</p>\\n<p><img src=\\\"https://img-blog.csdnimg.cn/20201130205643439.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ0ODU5OA==,size_16,color_FFFFFF,t_70\\\" alt=\\\"在这里插入图片描述\\\" /></p>\\n<p>新建查询后导入SQL脚本即可</p>\\n<p><img src=\\\"https://img-blog.csdnimg.cn/20201130205705669.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ0ODU5OA==,size_16,color_FFFFFF,t_70\\\" alt=\\\"在这里插入图片描述\\\" /></p>\\n<p>红色框选那栏填写你的SQL脚本位置，SQL脚本在nacos文件夹下的conf下</p>\\n<h3><a id=\\\"nacos_73\\\"></a>nacos文件夹改名</h3>\\n<p>将文件夹名改为nacos3333代表这个nacos的端口号是3333</p>\\n<pre><div class=\\\"hljs\\\"><code class=\\\"lang-sh\\\">mv nacos nacos3333\\n</code></div></pre>\\n<h3><a id=\\\"_81\\\"></a>配置修改</h3>\\n<p>首先进入到配置目录</p>\\n<pre><div class=\\\"hljs\\\"><code class=\\\"lang-sh\\\"><span class=\\\"hljs-built_in\\\">cd</span> /usr/<span class=\\\"hljs-built_in\\\">local</span>/nacos/nacos3333/conf\\n</code></div></pre>\\n<blockquote>\\n<p><img src=\\\"https://img-blog.csdnimg.cn/2020113020572431.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ0ODU5OA==,size_16,color_FFFFFF,t_70\\\" alt=\\\"在这里插入图片描述\\\" /></p>\\n</blockquote>\\n<p>在更改配置之前先备份配置</p>\\n<pre><div class=\\\"hljs\\\"><code class=\\\"lang-sh\\\">cp application.properties application.properties.example\\n</code></div></pre>\\n<pre><div class=\\\"hljs\\\"><code class=\\\"lang-sh\\\">cp cluster.conf.example cluster.conf\\n</code></div></pre>\\n<h3><a id=\\\"_104\\\"></a>集群配置</h3>\\n<pre><div class=\\\"hljs\\\"><code class=\\\"lang-sh\\\">vim cluster.conf\\n</code></div></pre>\\n<blockquote>\\n<p><img src=\\\"https://img-blog.csdnimg.cn/20201130205739435.png\\\" alt=\\\"在这里插入图片描述\\\" /></p>\\n</blockquote>\\n<blockquote>\\n<p>注意这里不能填写localhost 或者127.0.0.1，这里如果是在本机搭建可以查看本机ip后填写</p>\\n<pre><div class=\\\"hljs\\\"><code class=\\\"lang-sh\\\">hostname -i\\n</code></div></pre>\\n<p><img src=\\\"https://img-blog.csdnimg.cn/20201130205749116.png\\\" alt=\\\"在这里插入图片描述\\\" /></p>\\n</blockquote>\\n<h3><a id=\\\"nacos_122\\\"></a>nacos配置</h3>\\n<pre><div class=\\\"hljs\\\"><code class=\\\"lang-sh\\\">vim application.properties\\n</code></div></pre>\\n<pre><code class=\\\"lang-properties\\\">\\n#*************** Spring Boot Related Configurations ***************#\\n### Default web context path:\\nserver.servlet.contextPath=/nacos\\n### Default web server port:\\nserver.port=3333\\n\\n#*************** Network Related Configurations ***************#\\n### If prefer hostname over ip for Nacos server addresses in cluster.conf:\\n# nacos.inetutils.prefer-hostname-over-ip=false\\n\\n### Specify local server\'s IP:\\n# nacos.inetutils.ip-address=\\n\\n\\n#*************** Config Module Related Configurations ***************#\\n### If use MySQL as datasource:\\n spring.datasource.platform=mysql\\n\\n### Count of DB:\\n db.num=1\\n\\n### Connect URL of DB:\\ndb.url.0=jdbc:mysql://127.0.0.1:3306/nacos_config?characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true&amp;useUnicode=true&amp;useSSL=false&amp;serverTimezone=UTC\\ndb.user=root\\ndb.password=123456\\n\\n\\n#*************** Naming Module Related Configurations ***************#\\n### Data dispatch task execution period in milliseconds:\\n# nacos.naming.distro.taskDispatchPeriod=200\\n\\n### Data count of batch sync task:\\n# nacos.naming.distro.batchSyncKeyCount=1000\\n\\n### Retry delay in milliseconds if sync task failed:\\n# nacos.naming.distro.syncRetryDelay=5000\\n\\n### If enable data warmup. If set to false, the server would accept request without local data preparation:\\n# nacos.naming.data.warmup=true\\n\\n### If enable the instance auto expiration, kind like of health check of instance:\\n# nacos.naming.expireInstance=true\\n\\nnacos.naming.empty-service.auto-clean=true\\nnacos.naming.empty-service.clean.initial-delay-ms=50000\\nnacos.naming.empty-service.clean.period-time-ms=30000\\n\\n\\n#*************** CMDB Module Related Configurations ***************#\\n### The interval to dump external CMDB in seconds:\\n# nacos.cmdb.dumpTaskInterval=3600\\n\\n### The interval of polling data change event in seconds:\\n# nacos.cmdb.eventTaskInterval=10\\n\\n### The interval of loading labels in seconds:\\n# nacos.cmdb.labelTaskInterval=300\\n\\n### If turn on data loading task:\\n# nacos.cmdb.loadDataAtStart=false\\n\\n\\n#*************** Metrics Related Configurations ***************#\\n### Metrics for prometheus\\n#management.endpoints.web.exposure.include=*\\n\\n### Metrics for elastic search\\nmanagement.metrics.export.elastic.enabled=false\\n#management.metrics.export.elastic.host=http://localhost:9200\\n\\n### Metrics for influx\\nmanagement.metrics.export.influx.enabled=false\\n#management.metrics.export.influx.db=springboot\\n#management.metrics.export.influx.uri=http://localhost:8086\\n#management.metrics.export.influx.auto-create-db=true\\n#management.metrics.export.influx.consistency=one\\n#management.metrics.export.influx.compressed=true\\n\\n\\n#*************** Access Log Related Configurations ***************#\\n### If turn on the access log:\\nserver.tomcat.accesslog.enabled=true\\n\\n### The access log pattern:\\nserver.tomcat.accesslog.pattern=%h %l %u %t &quot;%r&quot; %s %b %D %{User-Agent}i %{Request-Source}i\\n\\n### The directory of access log:\\nserver.tomcat.basedir=\\n\\n\\n#*************** Access Control Related Configurations ***************#\\n### If enable spring security, this option is deprecated in 1.2.0:\\n#spring.security.enabled=false\\n\\n### The ignore urls of auth, is deprecated in 1.2.0:\\nnacos.security.ignore.urls=/,/error,/**/*.css,/**/*.js,/**/*.html,/**/*.map,/**/*.svg,/**/*.png,/**/*.ico,/console-fe/public/**,/v1/auth/**,/v1/console/health/**,/actuator/**,/v1/console/server/**\\n\\n### The auth system to use, currently only \'nacos\' is supported:\\nnacos.core.auth.system.type=nacos\\n\\n### If turn on auth system:\\nnacos.core.auth.enabled=false\\n\\n### The token expiration in seconds:\\nnacos.core.auth.default.token.expire.seconds=18000\\n\\n### The default token:\\nnacos.core.auth.default.token.secret.key=SecretKey012345678901234567890123456789012345678901234567890123456789\\n\\n### Turn on/off caching of auth information. By turning on this switch, the update of auth information would have a 15 seconds delay.\\nnacos.core.auth.caching.enabled=true\\n\\n\\n#*************** Istio Related Configurations ***************#\\n### If turn on the MCP server:\\nnacos.istio.mcp.server.enabled=false\\n\\n\\n\\n###*************** Add from 1.3.0 ***************###\\n\\n\\n#*************** Core Related Configurations ***************#\\n\\n### set the WorkerID manually\\n# nacos.core.snowflake.worker-id=\\n\\n### Member-MetaData\\n# nacos.core.member.meta.site=\\n# nacos.core.member.meta.adweight=\\n# nacos.core.member.meta.weight=\\n\\n### MemberLookup\\n### Addressing pattern category, If set, the priority is highest\\n# nacos.core.member.lookup.type=[file,address-server]\\n## Set the cluster list with a configuration file or command-line argument\\n# nacos.member.list=192.168.16.101:8847?raft_port=8807,192.168.16.101?raft_port=8808,192.168.16.101:8849?raft_port=8809\\n## for AddressServerMemberLookup\\n# Maximum number of retries to query the address server upon initialization\\n# nacos.core.address-server.retry=5\\n## Server domain name address of [address-server] mode\\n# address.server.domain=jmenv.tbsite.net\\n## Server port of [address-server] mode\\n# address.server.port=8080\\n## Request address of [address-server] mode\\n# address.server.url=/nacos/serverlist\\n\\n#*************** JRaft Related Configurations ***************#\\n\\n### Sets the Raft cluster election timeout, default value is 5 second\\n# nacos.core.protocol.raft.data.election_timeout_ms=5000\\n### Sets the amount of time the Raft snapshot will execute periodically, default is 30 minute\\n# nacos.core.protocol.raft.data.snapshot_interval_secs=30\\n### raft internal worker threads\\n# nacos.core.protocol.raft.data.core_thread_num=8\\n### Number of threads required for raft business request processing\\n# nacos.core.protocol.raft.data.cli_service_thread_num=4\\n### raft linear read strategy. Safe linear reads are used by default, that is, the Leader tenure is confirmed by heartbeat\\n# nacos.core.protocol.raft.data.read_index_type=ReadOnlySafe\\n### rpc request timeout, default 5 seconds\\n# nacos.core.protocol.raft.data.rpc_request_timeout_ms=5000\\n\\n</code></pre>\\n<p>这是我的整个application.properties文件,其中主要修改的地方有两处</p>\\n<p>修改端口号</p>\\n<pre><code class=\\\"lang-properties\\\">### Default web server port:\\nserver.port=3333\\n</code></pre>\\n<p>修改数据库为mysql并配置mysql的url</p>\\n<pre><code class=\\\"lang-properties\\\">#*************** Config Module Related Configurations ***************#\\n### If use MySQL as datasource:\\n spring.datasource.platform=mysql\\n\\n### Count of DB:\\n db.num=1\\n\\n### Connect URL of DB:\\ndb.url.0=jdbc:mysql://127.0.0.1:3306/nacos_config?characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true&amp;useUnicode=true&amp;useSSL=false&amp;serverTimezone=UTC\\ndb.user=root\\ndb.password=123456\\n</code></pre>\\n<p>这时候配置就差不多啦可以开始启动服务了</p>\\n<pre><div class=\\\"hljs\\\"><code class=\\\"lang-sh\\\"><span class=\\\"hljs-comment\\\"># 进入到nacos3333的bin目录</span>\\n<span class=\\\"hljs-built_in\\\">cd</span> /usr/<span class=\\\"hljs-built_in\\\">local</span>/nacos/nacos3333/bin\\n<span class=\\\"hljs-comment\\\"># 执行启动脚本 因为nacos启动脚本默认就是使用集群模式所以不用更改</span>\\n./startup.sh\\n</code></div></pre>\\n<p>这时候我们可以查看nacos的启动状态</p>\\n<pre><div class=\\\"hljs\\\"><code class=\\\"lang-sh\\\">ps -ef | grep nacos\\n</code></div></pre>\\n<blockquote>\\n<p><img src=\\\"https://img-blog.csdnimg.cn/20201130205818481.png\\\" alt=\\\"在这里插入图片描述\\\" /></p>\\n</blockquote>\\n<p>这时候我们应该就可以通过 服务器ip:3333/nacos访问到nacos</p>\\n<blockquote>\\n<p><img src=\\\"https://img-blog.csdnimg.cn/20201130205828641.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ0ODU5OA==,size_16,color_FFFFFF,t_70\\\" alt=\\\"在这里插入图片描述\\\" /></p>\\n</blockquote>\\n<p>成功的访问到了nacos代表成功了。</p>\\n<h3><a id=\\\"nacos_344\\\"></a>nacos集群启动</h3>\\n<p>这时候我们就可以回到nacos目录下拷贝之前的nacos3333文件夹来启动nacos4444和nacos5555</p>\\n<pre><div class=\\\"hljs\\\"><code class=\\\"lang-sh\\\"><span class=\\\"hljs-built_in\\\">cd</span> /usr/<span class=\\\"hljs-built_in\\\">local</span>/nacos\\n<span class=\\\"hljs-comment\\\"># cp -r 代表递归拷贝</span>\\ncp -r nacos3333 nacos4444\\ncp -r nacos3333 nacos5555\\n</code></div></pre>\\n<p>这时候再分别将nacos4444和nacos5555文件夹下的conf目录中的application.properties中的server.port更改为3333、4444然后再启动，这里我就不再演示了，和之前配置一样。</p>\\n<p>随后我们再依次启动nacos4444，nacos5555</p>\\n<p>###########################################################################</p>\\n<p>启动后发现问题，nacos5555启动不起来，查看日志得到发现内存不足，nacos脚本默认给的最大内存是2G，我们可以去改小一点。</p>\\n<p><img src=\\\"https://img-blog.csdnimg.cn/20201130205845619.png\\\" alt=\\\"在这里插入图片描述\\\" /></p>\\n<p>原红框中限制的内存是2g 最小1g 适当该小一点[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传<br />\\n<img src=\\\"https://img-blog.csdnimg.cn/20201130205903628.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ0ODU5OA==,size_16,color_FFFFFF,t_70\\\" alt=\\\"在这里插入图片描述\\\" /></p>\\n<p>然后再依次启动三个服务</p>\\n<p>登录任意一个nacos可以看到如下页面即集群启动成功</p>\\n<h3><a id=\\\"nginx_373\\\"></a>nginx配置</h3>\\n<p>这配置nginx负载均衡访问nacos</p>\\n<pre><div class=\\\"hljs\\\"><code class=\\\"lang-sh\\\"><span class=\\\"hljs-built_in\\\">cd</span> /usr/<span class=\\\"hljs-built_in\\\">local</span>/nginx/conf\\nvim nginx.conf\\n</code></div></pre>\\n<pre><code class=\\\"lang-conf\\\">#user  nobody;\\nworker_processes  1;\\n\\n#error_log  logs/error.log;\\n#error_log  logs/error.log  notice;\\n#error_log  logs/error.log  info;\\n\\n#pid        logs/nginx.pid;\\n\\n\\nevents {\\n    worker_connections  1024;\\n}\\n\\n\\nhttp {\\n    include       mime.types;\\n    default_type  application/octet-stream;\\n\\n    #log_format  main  \'$remote_addr - $remote_user [$time_local] &quot;$request&quot; \'\\n    #                  \'$status $body_bytes_sent &quot;$http_referer&quot; \'\\n    #                  \'&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;\';\\n\\n    #access_log  logs/access.log  main;\\n\\n    sendfile        on;\\n    #tcp_nopush     on;\\n\\n    #keepalive_timeout  0;\\n    keepalive_timeout  65;\\n\\n    #gzip  on;\\n\\n    #配置刚刚搭建好的nacos集群\\n    upstream cluster{                                                        \\n\\t    server 127.0.0.1:3333;\\n\\t    server 127.0.0.1:4444;\\n\\t    server 127.0.0.1:5555;\\n\\t}\\n\\n    server {\\n        listen       1111;\\n        server_name  nacos_cluster;\\n\\n        #charset koi8-r;\\n\\n        #access_log  logs/host.access.log  main;\\n\\n        location / {\\n            #root   html;\\n            #index  index.html index.htm;\\n            #将所有访问/的都映射到配置好的集群\\n            proxy_pass http://cluster;\\n        }\\n\\n        #error_page  404              /404.html;\\n\\n        # redirect server error pages to the static page /50x.html\\n        #\\n        error_page   500 502 503 504  /50x.html;\\n        location = /50x.html {\\n            root   html;\\n        }\\n\\n        # proxy the PHP scripts to Apache listening on 127.0.0.1:80\\n        #\\n        #location ~ \\\\.php$ {\\n        #    proxy_pass   http://127.0.0.1;\\n        #}\\n\\n        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000\\n        #\\n        #location ~ \\\\.php$ {\\n        #    root           html;\\n        #    fastcgi_pass   127.0.0.1:9000;\\n        #    fastcgi_index  index.php;\\n        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;\\n        #    include        fastcgi_params;\\n        #}\\n\\n        # deny access to .htaccess files, if Apache\'s document root\\n        # concurs with nginx\'s one\\n        #\\n        #location ~ /\\\\.ht {\\n        #    deny  all;\\n        #}\\n    }\\n\\n\\n    # another virtual host using mix of IP-, name-, and port-based configuration\\n    #\\n    #server {\\n    #    listen       8000;\\n    #    listen       somename:8080;\\n    #    server_name  somename  alias  another.alias;\\n\\n    #    location / {\\n    #        root   html;\\n    #        index  index.html index.htm;\\n    #    }\\n    #}\\n\\n\\n    # HTTPS server\\n    #\\n    #server {\\n    #    listen       443 ssl;\\n    #    server_name  localhost;\\n\\n    #    ssl_certificate      cert.pem;\\n    #    ssl_certificate_key  cert.key;\\n\\n    #    ssl_session_cache    shared:SSL:1m;\\n    #    ssl_session_timeout  5m;\\n\\n    #    ssl_ciphers  HIGH:!aNULL:!MD5;\\n    #    ssl_prefer_server_ciphers  on;\\n\\n    #    location / {\\n    #        root   html;\\n    #        index  index.html index.htm;\\n    #    }\\n    #}\\n}\\n</code></pre>\\n<h3><a id=\\\"nginx_509\\\"></a>nginx启动</h3>\\n<pre><div class=\\\"hljs\\\"><code class=\\\"lang-sh\\\"><span class=\\\"hljs-built_in\\\">cd</span> /usr/<span class=\\\"hljs-built_in\\\">local</span>/nginx/sbin\\n./nginx\\n</code></div></pre>\\n<p>这时候我们就可以通过服务器ip地址:1111/nacos 来访问nacos集群了</p>\\n<p><img src=\\\"https://img-blog.csdnimg.cn/20201130205927229.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ0ODU5OA==,size_16,color_FFFFFF,t_70\\\" alt=\\\"在这里插入图片描述\\\" /></p>\\n<p>关于使用NACOS集群遇到问题 – CODE:503 MSG: SERVER IS STARTING NOW, PLEASE TRY AGAIN LATER!</p>\\n<p>这时又出现了问题……在服务提供者注册服务时会报错</p>\\n<pre><code class=\\\"lang-text\\\">2020-11-30 00:36:59.492 ERROR 13140 --- [  restartedMain] c.a.c.n.registry.NacosServiceRegistry    : nacos registry, nacos-payment-provider register failed...NacosRegistration{nacosDiscoveryProperties=NacosDiscoveryProperties{serverAddr=\'wsy.oopsw.top:1111\', endpoint=\'\', namespace=\'\', watchDelay=30000, logName=\'\', service=\'nacos-payment-provider\', weight=1.0, clusterName=\'DEFAULT\', namingLoadCacheAtStart=\'false\', metadata={preserved.register.source=SPRING_CLOUD}, registerEnabled=true, ip=\'10.175.6.100\', networkInterface=\'\', port=9002, secure=false, accessKey=\'\', secretKey=\'\'}},\\n\\njava.lang.IllegalStateException: failed to req API:/nacos/v1/ns/instance after all servers([wsy.oopsw.top:1111]) tried: failed to req API:wsy.oopsw.top:1111/nacos/v1/ns/instance. code:503 msg: server is DOWN now, please try again later!\\n\\tat com.alibaba.nacos.client.naming.net.NamingProxy.reqAPI(NamingProxy.java:464) ~[nacos-client-1.1.1.jar:na]\\n\\tat com.alibaba.nacos.client.naming.net.NamingProxy.reqAPI(NamingProxy.java:386) ~[nacos-client-1.1.1.jar:na]\\n\\tat com.alibaba.nacos.client.naming.net.NamingProxy.registerService(NamingProxy.java:188) ~[nacos-client-1.1.1.jar:na]\\n\\tat com.alibaba.nacos.client.naming.NacosNamingService.registerInstance(NacosNamingService.java:205) ~[nacos-client-1.1.1.jar:na]\\n\\tat com.alibaba.nacos.client.naming.NacosNamingService.registerInstance(NacosNamingService.java:184) ~[nacos-client-1.1.1.jar:na]\\n\\tat com.alibaba.cloud.nacos.registry.NacosServiceRegistry.register(NacosServiceRegistry.java:61) ~[spring-cloud-alibaba-nacos-discovery-2.1.0.RELEASE.jar:2.1.0.RELEASE]\\n\\tat org.springframework.cloud.client.serviceregistry.AbstractAutoServiceRegistration.register(AbstractAutoServiceRegistration.java:239) [spring-cloud-commons-2.2.1.RELEASE.jar:2.2.1.RELEASE]\\n\\tat com.alibaba.cloud.nacos.registry.NacosAutoServiceRegistration.register(NacosAutoServiceRegistration.java:74) [spring-cloud-alibaba-nacos-discovery-2.1.0.RELEASE.jar:2.1.0.RELEASE]\\n\\tat org.springframework.cloud.client.serviceregistry.AbstractAutoServiceRegistration.start(AbstractAutoServiceRegistration.java:138) [spring-cloud-commons-2.2.1.RELEASE.jar:2.2.1.RELEASE]\\n\\tat org.springframework.cloud.client.serviceregistry.AbstractAutoServiceRegistration.bind(AbstractAutoServiceRegistration.java:101) [spring-cloud-commons-2.2.1.RELEASE.jar:2.2.1.RELEASE]\\n\\tat org.springframework.cloud.client.serviceregistry.AbstractAutoServiceRegistration.onApplicationEvent(AbstractAutoServiceRegistration.java:88) [spring-cloud-commons-2.2.1.RELEASE.jar:2.2.1.RELEASE]\\n\\tat org.springframework.cloud.client.serviceregistry.AbstractAutoServiceRegistration.onApplicationEvent(AbstractAutoServiceRegistration.java:47) [spring-cloud-commons-2.2.1.RELEASE.jar:2.2.1.RELEASE]\\n\\tat org.springframework.context.event.SimpleApplicationEventMulticaster.doInvokeListener(SimpleApplicationEventMulticaster.java:172) [spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]\\n\\tat org.springframework.context.event.SimpleApplicationEventMulticaster.invokeListener(SimpleApplicationEventMulticaster.java:165) [spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]\\n\\tat org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:139) [spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]\\n\\tat org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:403) [spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]\\n\\tat org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:360) [spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]\\n\\tat org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.finishRefresh(ServletWebServerApplicationContext.java:165) [spring-boot-2.2.2.RELEASE.jar:2.2.2.RELEASE]\\n\\tat org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:553) [spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]\\n\\tat org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:141) [spring-boot-2.2.2.RELEASE.jar:2.2.2.RELEASE]\\n\\tat org.springframework.boot.SpringApplication.refresh(SpringApplication.java:747) [spring-boot-2.2.2.RELEASE.jar:2.2.2.RELEASE]\\n\\tat org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:397) [spring-boot-2.2.2.RELEASE.jar:2.2.2.RELEASE]\\n\\tat org.springframework.boot.SpringApplication.run(SpringApplication.java:315) [spring-boot-2.2.2.RELEASE.jar:2.2.2.RELEASE]\\n\\tat org.springframework.boot.SpringApplication.run(SpringApplication.java:1226) [spring-boot-2.2.2.RELEASE.jar:2.2.2.RELEASE]\\n\\tat org.springframework.boot.SpringApplication.run(SpringApplication.java:1215) [spring-boot-2.2.2.RELEASE.jar:2.2.2.RELEASE]\\n\\tat com.wsy.springcloud.AlibabaProviderApplication.main(AlibabaProviderApplication.java:15) [classes/:na]\\n\\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_73]\\n\\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_73]\\n\\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_73]\\n\\tat java.lang.reflect.Method.invoke(Method.java:497) ~[na:1.8.0_73]\\n\\tat org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49) [spring-boot-devtools-2.2.2.RELEASE.jar:2.2.2.RELEASE]\\n</code></pre>\\n<p>像阿里云、腾讯云这种云服务器, 会提供一个外网ip和内网ip, 访问外网ip时会指向对应的内网ip来访问到该服务器, 由于nacos集群内部是指定的使用网卡ip地址来进行通信,但是由于三台服务器各自的内网ip不在同一网段, 所以造成无法通信, 也会造成以下问题</p>\\n<p>注册服务:</p>\\n<pre><code class=\\\"lang-\\\">code:503 msg: server is STARTING now, please try again later!\\n</code></pre>\\n<p>naming-raft.log 日志:</p>\\n<pre><code class=\\\"lang-\\\">2019-05-15 00:02:00,000 WARN [IS LEADER] no leader is available now!\\n</code></pre>\\n<p>这时只要修改启动参数, 设置本机ip地址就可以了<br />\\n修改 nacos/bin/startup.sh 文件<br />\\n找到 JVM Configuration 这部分, 在集群参数里增加 -Dnacos.server.ip=xx</p>\\n<pre><div class=\\\"hljs\\\"><code class=\\\"lang-sh\\\"><span class=\\\"hljs-comment\\\">#===========================================================================================</span>\\n<span class=\\\"hljs-comment\\\"># JVM Configuration</span>\\n<span class=\\\"hljs-comment\\\">#===========================================================================================</span>\\n\\n<span class=\\\"hljs-comment\\\"># 单机模式对应的启动参数</span>\\n<span class=\\\"hljs-keyword\\\">if</span> [[ <span class=\\\"hljs-string\\\">\\\"<span class=\\\"hljs-variable\\\">${MODE}</span>\\\"</span> == <span class=\\\"hljs-string\\\">\\\"standalone\\\"</span> ]]; <span class=\\\"hljs-keyword\\\">then</span>\\n    JAVA_OPT=<span class=\\\"hljs-string\\\">\\\"<span class=\\\"hljs-variable\\\">${JAVA_OPT}</span> -Xms512m -Xmx512m -Xmn256m\\\"</span>\\n    JAVA_OPT=<span class=\\\"hljs-string\\\">\\\"<span class=\\\"hljs-variable\\\">${JAVA_OPT}</span> -Dnacos.standalone=true\\\"</span>\\n<span class=\\\"hljs-keyword\\\">else</span>\\n<span class=\\\"hljs-comment\\\"># 集群模式对应的启动参数</span>\\n    JAVA_OPT=<span class=\\\"hljs-string\\\">\\\"<span class=\\\"hljs-variable\\\">${JAVA_OPT}</span> -server -Xms2g -Xmx2g -Xmn1g -XX:MetaspaceSize=128m -XX:MaxMetaspaceSize=320m\\\"</span>\\n    JAVA_OPT=<span class=\\\"hljs-string\\\">\\\"<span class=\\\"hljs-variable\\\">${JAVA_OPT}</span> -XX:-OmitStackTraceInFastThrow -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=<span class=\\\"hljs-variable\\\">${BASE_DIR}</span>/logs/java_heapdump.hprof\\\"</span>\\n    JAVA_OPT=<span class=\\\"hljs-string\\\">\\\"<span class=\\\"hljs-variable\\\">${JAVA_OPT}</span> -XX:-UseLargePages\\\"</span>\\n    \\n    <span class=\\\"hljs-comment\\\"># *新增以下参数设置本机ip地址*</span>\\n    JAVA_OPT=<span class=\\\"hljs-string\\\">\\\"<span class=\\\"hljs-variable\\\">${JAVA_OPT}</span> -Dnacos.server.ip=本机ip\\\"</span>\\n\\n<span class=\\\"hljs-keyword\\\">fi</span>\\n\\n<span class=\\\"hljs-keyword\\\">if</span> [[ <span class=\\\"hljs-string\\\">\\\"<span class=\\\"hljs-variable\\\">${FUNCTION_MODE}</span>\\\"</span> == <span class=\\\"hljs-string\\\">\\\"config\\\"</span> ]]; <span class=\\\"hljs-keyword\\\">then</span>\\n    JAVA_OPT=<span class=\\\"hljs-string\\\">\\\"<span class=\\\"hljs-variable\\\">${JAVA_OPT}</span> -Dnacos.functionMode=config\\\"</span>\\n<span class=\\\"hljs-keyword\\\">elif</span> [[ <span class=\\\"hljs-string\\\">\\\"<span class=\\\"hljs-variable\\\">${FUNCTION_MODE}</span>\\\"</span> == <span class=\\\"hljs-string\\\">\\\"naming\\\"</span> ]]; <span class=\\\"hljs-keyword\\\">then</span>\\n    JAVA_OPT=<span class=\\\"hljs-string\\\">\\\"<span class=\\\"hljs-variable\\\">${JAVA_OPT}</span> -Dnacos.functionMode=naming\\\"</span>\\n<span class=\\\"hljs-keyword\\\">fi</span>\\n\\n</code></div></pre>\\n<p>参考博客：https://www.freesion.com/article/33101142210/</p>\\n<p>服务注册时报BadRequest400 问题暂时还未解决</p>\\n<pre><code class=\\\"lang-text\\\">com.alibaba.nacos.api.exception.NacosException: failed to req API:/nacos/v1/ns/instance after all servers([wsy.oopsw.top:1111]) tried: ErrCode:400, ErrMsg:&lt;html&gt;&lt;body&gt;&lt;h1&gt;Whitelabel Error Page&lt;/h1&gt;&lt;p&gt;This application has no explicit mapping for /error, so you are seeing this as a fallback.&lt;/p&gt;&lt;div id=\'created\'&gt;Mon Nov 30 01:33:45 CST 2020&lt;/div&gt;&lt;div&gt;There was an unexpected error (type=Bad Request, status=400).&lt;/div&gt;&lt;div&gt;receive invalid redirect request from peer 172.20.9.153&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;\\n</code></pre>\\n<p>#############################################################</p>\\n<p>问题已解决，是nacos版本的问题，据群里老哥解释说是nacos需要使用与之对应的SpringCloudAlibaba的版本，不然就会报错，我更换版本到1.3.2问题解决服务注册正常</p>\\n\",\"blogGoods\":0,\"blogId\":\"1333411378995605504\",\"blogImage\":\"http://808km.top/blog/img/img/default/1333411206555185152\",\"blogRead\":48,\"blogRemark\":\"nacos集群环境搭建\",\"blogTitle\":\"nacos集群环境搭建\",\"blogType\":20,\"createdTime\":1606745021000,\"typeName\":\"nacos\",\"updateTime\":1606996299000,\"version\":39},\"msg\":\"阅读成功\"}', '218.77.40.68', '2020-12-03 22:14:38', NULL);
INSERT INTO `bl_log` VALUES (2733, '阅读关于我的', '//about/read', '[]', 1, NULL, 'PUT', 112, '{\"code\":20000,\"data\":{\"aboutContent\":\"<h1><a id=\\\"_0\\\"></a>前言</h1>\\n<p>我是一名即将大三的在校大学生，自主学习的过程中跟随讲师开发了该个人博客“闲言博客”，这个博客功能简单，但是为我巩固了不少的技术知识，该网站为前后端分离项目，后端:<em><strong>springboot+mybatis</strong></em> 前端-前台：_<strong>vue+ and design</strong><em>前端-后台: <em><strong>vue+ element-ui</strong></em> 开发该项目花了我大概10来天时间，前台页面代码是我copy的讲师提供的静态页面（原谅我写的css自己都看不下去），后续想追加个</em><strong>redis</strong><em>写个缓存，以及加一个</em><strong>ElasticSearch</strong>_搜索引擎，加油吧！</p>\\n<h2><a id=\\\"_3\\\"></a>该博客使用到的技术栈：</h2>\\n<p>SpringBoot，Mybatis，Shiro，Maven，Vue，ElementUI，AntDesignVue，Flex布局，Linux，Nginx，Docker，FastDFS，MongoDB，SpringDataMongoDB<br />\\n该博客由我在腾讯课堂购买课程学习开发，网址：</p>\\n<p><a href=\\\"https://ke.qq.com/course/1129309\\\" target=\\\"_blank\\\">课程地址</a></p>\\n<hr />\\n<p>目前我正在修改该博客的小bug并且在集成更多的新功能，我希望能够使用这个博客项目去巩固我学习的新知识，也希望能有更多的人看到我写的这个项目。</p>\\n<h2><a id=\\\"_13\\\"></a>目前需要改进的地方：</h2>\\n<ol>\\n<li>使用elasticSearch 进行博客的检索</li>\\n<li>将首页的主图片修改为轮播图</li>\\n<li><s>注册时上传头像</s></li>\\n<li><s>将富文本编辑器改为Markdown编辑器</s></li>\\n<li><s>更新记录日志的方式</s></li>\\n<li><s>首页url的问题</s></li>\\n<li><s>数据库时间问题</s></li>\\n<li><s>前台md5加密改为后台加密后再匹配</s></li>\\n<li><s>推荐博客下的时间</s></li>\\n<li><s>登录注册页面的背景图片</s></li>\\n<li><s>登录注册页面的卡片问题</s></li>\\n<li>后台中写博客路由问题</li>\\n<li>后端登录中管理员和用户混淆不清关系</li>\\n<li><s>阅读博客时会更新version(乐观锁)这可能会导致在别人观看博客的时候导致博主无法更新博客影响博主体验</s></li>\\n<li>在进入下一个路由之后回到顶部</li>\\n<li>将分页功能改为加载更多</li>\\n</ol>\\n<p>暂时还需要学习一点其他的之后，等有时间的时候再来继续完善该博客。</p>\\n<h2><a id=\\\"_33\\\"></a>更新记录</h2>\\n<ul>\\n<li>\\n<p>2020-11-17 09:25 add:如果添加博客不上传封面将会设置一个默认封面图片</p>\\n</li>\\n<li>\\n<p>2020-11-18 21:48 update:将原本前端md5加密后再跟后端匹配改为后端进行加密后再匹配</p>\\n</li>\\n<li>\\n<p>2020-11-19 22:15 fix:将页面url后面会添加publicPath问题解决</p>\\n</li>\\n<li>\\n<p>2020-11-24 11:25 update:将前端静态资源使用cdn加速、日志原记录为controller层的所有方法切入改为Log注解处切入</p>\\n</li>\\n<li>\\n<p>2020-11-24 21:51 fix:修复推荐博客下的时间bug</p>\\n</li>\\n<li>\\n<p>2020-11-24 21:51 add:注册时添加上传头像功能</p>\\n</li>\\n<li>\\n<p>2020-11-25 11:46 fix:修复数据库时间问题，具体问题已发博客，<a href=\\\"http://oopsw.top:1001/info/1331436834413211648\\\" target=\\\"_blank\\\">点我查看</a></p>\\n</li>\\n<li>\\n<p>2020-11-27 23:47 fix:登录注册页面卡片超出页面没有显示滚动条、背景图片在页面放大时会出现多个背景图片</p>\\n</li>\\n<li>\\n<p>2020-11-29 00:51  update:将前后台的所有富文本编辑器更换为markdown编辑器，并用markdown的样式</p>\\n</li>\\n<li>\\n<p>2020-12-01 08:30        update:修改markdown代码块样式</p>\\n</li>\\n<li>\\n<p>2020-12-01 08:57        fix:手机访问登录注册页面时样式体验差</p>\\n</li>\\n</ul>\\n\",\"aboutId\":\"5\",\"aboutRead\":168,\"aboutTitle\":\"关于我的 关于“闲言”\",\"createdTime\":1597816791000,\"enable\":1,\"updateTime\":1606998982000,\"version\":216},\"msg\":\"阅读成功\"}', '218.77.40.68', '2020-12-03 22:14:49', NULL);
INSERT INTO `bl_log` VALUES (2734, '阅读博客', '//blog/read/1333708609683533824', '[1333708609683533824]', 1, NULL, 'PUT', 52, '{\"code\":20000,\"data\":{\"blogCollection\":1,\"blogComment\":0,\"blogContent\":\"<h1><a id=\\\"_0\\\"></a>前言</h1>\\n<p>今天在给博客更新，将session存到redis中持久化存储，正常操作是没问题的，但是后来尝试发现，在我输入的密码是错误的时候，他也创建了session，经过我的一番从尾到头的debug。。。。<br />\\n复杂的debug过程就不贴出来了，放出问题的根源<br />\\n在登陆时，会访问到我用来记录日志的切面,而我的记录日志方法中有一个需要获取到当前登录的用户的信息，来完善日志的字段</p>\\n<blockquote>\\n<p><img src=\\\"http://808km.top/blog/img/img/blogImg/1333703986787631104\\\" alt=\\\"image.png\\\" /><br />\\n以下是工具类中的原方法：<br />\\n<img src=\\\"http://808km.top/blog/img/img/blogImg/1333704236625543168\\\" alt=\\\"image.png\\\" /><br />\\n以下是修改后的方法<br />\\n<img src=\\\"http://808km.top/blog/img/img/blogImg/1333704399599419392\\\" alt=\\\"image.png\\\" /><br />\\n这就是问题的根源，因为在我登录的时候，要记录日志，然后去调用工具类，工具类去获取session，如果没有getSession(false)的话，就会判断session是否存在，如果不存在的话就会自动创建session，这就是为什么明明密码错了还会创建session的原因</p>\\n</blockquote>\\n\",\"blogGoods\":1,\"blogId\":\"1333708609683533824\",\"blogImage\":\"http://808km.top/blog/img/default.jpg\",\"blogRead\":34,\"blogRemark\":\"shiro+redis整合实现session持久化登陆失败时也会生成session问题\",\"blogTitle\":\"shiro+redis整合实现session持久化登陆失败时也会生成session问题\",\"blogType\":6,\"createdTime\":1606815886000,\"typeName\":\"Java\",\"updateTime\":1607004874000,\"version\":3},\"msg\":\"阅读成功\"}', '218.77.40.68', '2020-12-04 01:28:11', NULL);
INSERT INTO `bl_log` VALUES (2735, '阅读关于我的', '//about/read', '[]', 1, NULL, 'PUT', 24, '{\"code\":20000,\"data\":{\"aboutContent\":\"<h1><a id=\\\"_0\\\"></a>前言</h1>\\n<p>我是一名即将大三的在校大学生，自主学习的过程中跟随讲师开发了该个人博客“闲言博客”，这个博客功能简单，但是为我巩固了不少的技术知识，该网站为前后端分离项目，后端:<em><strong>springboot+mybatis</strong></em> 前端-前台：_<strong>vue+ and design</strong><em>前端-后台: <em><strong>vue+ element-ui</strong></em> 开发该项目花了我大概10来天时间，前台页面代码是我copy的讲师提供的静态页面（原谅我写的css自己都看不下去），后续想追加个</em><strong>redis</strong><em>写个缓存，以及加一个</em><strong>ElasticSearch</strong>_搜索引擎，加油吧！</p>\\n<h2><a id=\\\"_4\\\"></a>该博客使用到的技术栈：</h2>\\n<p>SpringBoot，Mybatis，Shiro，Maven，Vue，ElementUI，AntDesignVue，Flex布局，Linux，Nginx，Docker，FastDFS，MongoDB，SpringDataMongoDB<br />\\n该博客由我在腾讯课堂购买课程学习开发，网址：</p>\\n<p><a href=\\\"https://ke.qq.com/course/1129309\\\" target=\\\"_blank\\\">课程地址</a></p>\\n<hr />\\n<p>目前我正在修改该博客的小bug并且在集成更多的新功能，我希望能够使用这个博客项目去巩固我学习的新知识，也希望能有更多的人看到我写的这个项目。</p>\\n<h2><a id=\\\"_15\\\"></a>目前需要改进的地方：</h2>\\n<ol>\\n<li>使用elasticSearch 进行博客的检索</li>\\n<li>将首页的主图片修改为轮播图</li>\\n<li><s>注册时上传头像</s></li>\\n<li><s>将富文本编辑器改为Markdown编辑器</s></li>\\n<li><s>更新记录日志的方式</s></li>\\n<li><s>首页url的问题</s></li>\\n<li><s>数据库时间问题</s></li>\\n<li><s>前台md5加密改为后台加密后再匹配</s></li>\\n<li><s>推荐博客下的时间</s></li>\\n<li><s>登录注册页面的背景图片</s></li>\\n<li><s>登录注册页面的卡片问题</s></li>\\n<li>后台中写博客路由问题</li>\\n<li>后端登录中管理员和用户混淆不清关系</li>\\n<li><s>阅读博客时会更新version(乐观锁)这可能会导致在别人观看博客的时候导致博主无法更新博客影响博主体验</s></li>\\n<li>在进入下一个路由之后回到顶部</li>\\n<li>将分页功能改为加载更多</li>\\n</ol>\\n<p>暂时还需要学习一点其他的之后，等有时间的时候再来继续完善该博客。</p>\\n<h2><a id=\\\"_36\\\"></a>更新记录</h2>\\n<ul>\\n<li>\\n<p>2020-11-17 09:25 add:如果添加博客不上传封面将会设置一个默认封面图片</p>\\n</li>\\n<li>\\n<p>2020-11-18 21:48 update:将原本前端md5加密后再跟后端匹配改为后端进行加密后再匹配</p>\\n</li>\\n<li>\\n<p>2020-11-19 22:15 fix:将页面url后面会添加publicPath问题解决</p>\\n</li>\\n<li>\\n<p>2020-11-24 11:25 update:将前端静态资源使用cdn加速、日志原记录为controller层的所有方法切入改为Log注解处切入</p>\\n</li>\\n<li>\\n<p>2020-11-24 21:51 fix:修复推荐博客下的时间bug</p>\\n</li>\\n<li>\\n<p>2020-11-24 21:51 add:注册时添加上传头像功能</p>\\n</li>\\n<li>\\n<p>2020-11-25 11:46 fix:修复数据库时间问题，具体问题已发博客，<a href=\\\"http://oopsw.top:1001/info/1331436834413211648\\\" target=\\\"_blank\\\">点我查看</a></p>\\n</li>\\n<li>\\n<p>2020-11-27 23:47 fix:登录注册页面卡片超出页面没有显示滚动条、背景图片在页面放大时会出现多个背景图片</p>\\n</li>\\n<li>\\n<p>2020-11-29 00:51 update:将前后台的所有富文本编辑器更换为markdown编辑器，并用markdown的样式</p>\\n</li>\\n<li>\\n<p>2020-12-01 08:30 update:修改markdown代码块样式</p>\\n</li>\\n<li>\\n<p>2020-12-01 08:57 fix:手机访问登录注册页面时样式体验差</p>\\n</li>\\n<li>\\n<p>2020-12-03 22:18 update:更换markdown存储方式，从存储markdown源码改为存储HTML源码</p>\\n</li>\\n</ul>\\n\",\"aboutId\":\"5\",\"aboutRead\":169,\"aboutTitle\":\"关于我的 关于“闲言”\",\"createdTime\":1597816791000,\"enable\":1,\"updateTime\":1607005124000,\"version\":218},\"msg\":\"阅读成功\"}', '218.77.40.68', '2020-12-04 01:28:34', NULL);
INSERT INTO `bl_log` VALUES (2736, '查询时间轴', '//blog/getTimeLine', '[]', 1, NULL, 'GET', 16, '{\"code\":20000,\"data\":[{\"list\":[{\"blogId\":\"1333708609683533824\",\"blogMonth\":\"2020-12\",\"blogTitle\":\"shiro+redis整合实现session持久化登陆失败时也会生成session问题\",\"createdTime\":1606815886000}],\"month\":\"2020-12\"},{\"list\":[{\"blogId\":\"1333411378995605504\",\"blogMonth\":\"2020-11\",\"blogTitle\":\"nacos集群环境搭建\",\"createdTime\":1606745021000},{\"blogId\":\"1332742588649615360\",\"blogMonth\":\"2020-11\",\"blogTitle\":\"vue项目引入markdown\",\"createdTime\":1606585569000},{\"blogId\":\"1331436834413211648\",\"blogMonth\":\"2020-11\",\"blogTitle\":\"springboot 后端传给前端相差8小时\",\"createdTime\":1606274253000}],\"month\":\"2020-11\"},{\"list\":[{\"blogId\":\"1322169187161767936\",\"blogMonth\":\"2020-10\",\"blogTitle\":\"Dubbo超时问题\",\"createdTime\":1604064673000}],\"month\":\"2020-10\"},{\"list\":[{\"blogId\":\"1311375132718956544\",\"blogMonth\":\"2020-09\",\"blogTitle\":\"docker中使用fastdfs问题\",\"createdTime\":1601462370000},{\"blogId\":\"1305852969815642112\",\"blogMonth\":\"2020-09\",\"blogTitle\":\"dubbo-admin登录问题\",\"createdTime\":1600174584000}],\"month\":\"2020-09\"},{\"list\":[{\"blogId\":\"1294647161643978752\",\"blogMonth\":\"2020-08\",\"blogTitle\":\"shiroFilter踩坑\",\"createdTime\":1597474112000},{\"blogId\":\"1293808631053139968\",\"blogMonth\":\"2020-08\",\"blogTitle\":\"docker 安装 mysql5.7\",\"createdTime\":1597274190000}],\"month\":\"2020-08\"},{\"list\":[{\"blogId\":\"1293850784802377728\",\"blogMonth\":\"2020-07\",\"blogTitle\":\"mybatis <if>标签踩坑\",\"createdTime\":1594605840000}],\"month\":\"2020-07\"}],\"msg\":\"操作成功！\"}', '218.77.40.68', '2020-12-04 01:28:36', NULL);
INSERT INTO `bl_log` VALUES (2737, '阅读关于我的', '//about/read', '[]', 1, NULL, 'PUT', 43, '{\"code\":20000,\"data\":{\"aboutContent\":\"<h1><a id=\\\"_0\\\"></a>前言</h1>\\n<p>我是一名即将大三的在校大学生，自主学习的过程中跟随讲师开发了该个人博客“闲言博客”，这个博客功能简单，但是为我巩固了不少的技术知识，该网站为前后端分离项目，后端:<em><strong>springboot+mybatis</strong></em> 前端-前台：_<strong>vue+ and design</strong><em>前端-后台: <em><strong>vue+ element-ui</strong></em> 开发该项目花了我大概10来天时间，前台页面代码是我copy的讲师提供的静态页面（原谅我写的css自己都看不下去），后续想追加个</em><strong>redis</strong><em>写个缓存，以及加一个</em><strong>ElasticSearch</strong>_搜索引擎，加油吧！</p>\\n<h2><a id=\\\"_4\\\"></a>该博客使用到的技术栈：</h2>\\n<p>SpringBoot，Mybatis，Shiro，Maven，Vue，ElementUI，AntDesignVue，Flex布局，Linux，Nginx，Docker，FastDFS，MongoDB，SpringDataMongoDB<br />\\n该博客由我在腾讯课堂购买课程学习开发，网址：</p>\\n<p><a href=\\\"https://ke.qq.com/course/1129309\\\" target=\\\"_blank\\\">课程地址</a></p>\\n<hr />\\n<p>目前我正在修改该博客的小bug并且在集成更多的新功能，我希望能够使用这个博客项目去巩固我学习的新知识，也希望能有更多的人看到我写的这个项目。</p>\\n<h2><a id=\\\"_15\\\"></a>目前需要改进的地方：</h2>\\n<ol>\\n<li>使用elasticSearch 进行博客的检索</li>\\n<li>将首页的主图片修改为轮播图</li>\\n<li><s>注册时上传头像</s></li>\\n<li><s>将富文本编辑器改为Markdown编辑器</s></li>\\n<li><s>更新记录日志的方式</s></li>\\n<li><s>首页url的问题</s></li>\\n<li><s>数据库时间问题</s></li>\\n<li><s>前台md5加密改为后台加密后再匹配</s></li>\\n<li><s>推荐博客下的时间</s></li>\\n<li><s>登录注册页面的背景图片</s></li>\\n<li><s>登录注册页面的卡片问题</s></li>\\n<li>后台中写博客路由问题</li>\\n<li>后端登录中管理员和用户混淆不清关系</li>\\n<li><s>阅读博客时会更新version(乐观锁)这可能会导致在别人观看博客的时候导致博主无法更新博客影响博主体验</s></li>\\n<li>在进入下一个路由之后回到顶部</li>\\n<li>将分页功能改为加载更多</li>\\n</ol>\\n<p>暂时还需要学习一点其他的之后，等有时间的时候再来继续完善该博客。</p>\\n<h2><a id=\\\"_36\\\"></a>更新记录</h2>\\n<ul>\\n<li>\\n<p>2020-11-17 09:25 add:如果添加博客不上传封面将会设置一个默认封面图片</p>\\n</li>\\n<li>\\n<p>2020-11-18 21:48 update:将原本前端md5加密后再跟后端匹配改为后端进行加密后再匹配</p>\\n</li>\\n<li>\\n<p>2020-11-19 22:15 fix:将页面url后面会添加publicPath问题解决</p>\\n</li>\\n<li>\\n<p>2020-11-24 11:25 update:将前端静态资源使用cdn加速、日志原记录为controller层的所有方法切入改为Log注解处切入</p>\\n</li>\\n<li>\\n<p>2020-11-24 21:51 fix:修复推荐博客下的时间bug</p>\\n</li>\\n<li>\\n<p>2020-11-24 21:51 add:注册时添加上传头像功能</p>\\n</li>\\n<li>\\n<p>2020-11-25 11:46 fix:修复数据库时间问题，具体问题已发博客，<a href=\\\"http://oopsw.top:1001/info/1331436834413211648\\\" target=\\\"_blank\\\">点我查看</a></p>\\n</li>\\n<li>\\n<p>2020-11-27 23:47 fix:登录注册页面卡片超出页面没有显示滚动条、背景图片在页面放大时会出现多个背景图片</p>\\n</li>\\n<li>\\n<p>2020-11-29 00:51 update:将前后台的所有富文本编辑器更换为markdown编辑器，并用markdown的样式</p>\\n</li>\\n<li>\\n<p>2020-12-01 08:30 update:修改markdown代码块样式</p>\\n</li>\\n<li>\\n<p>2020-12-01 08:57 fix:手机访问登录注册页面时样式体验差</p>\\n</li>\\n<li>\\n<p>2020-12-03 22:18 update:更换markdown存储方式，从存储markdown源码改为存储HTML源码</p>\\n</li>\\n</ul>\\n\",\"aboutId\":\"5\",\"aboutRead\":170,\"aboutTitle\":\"关于我的 关于“闲言”\",\"createdTime\":1597816791000,\"enable\":1,\"updateTime\":1607016513000,\"version\":219},\"msg\":\"阅读成功\"}', '218.77.40.68', '2020-12-04 01:28:45', NULL);
INSERT INTO `bl_log` VALUES (2738, '阅读博客', '//blog/read/1331436834413211648', '[1331436834413211648]', 1, NULL, 'PUT', 34, '{\"code\":20000,\"data\":{\"blogCollection\":0,\"blogComment\":0,\"blogContent\":\"<p>在开发中日期最常打交道的东西之一，但是日期又会存在各式各样的格式，常见的情形就是，从数据库取出的日期往往都是时间戳（毫秒数）的形式，这个一般情况下是前端不想要的结果，需要进行处理，那在springboot中比较简单：<br />\\n因为后端传给前端时默认使用jackson转换格式所以我们可以</p>\\n<ol>\\n<li>在application.yml中设置</li>\\n</ol>\\n<pre><div class=\\\"hljs\\\"><code class=\\\"lang-yml\\\"><span class=\\\"hljs-attr\\\">spring:</span>\\n<span class=\\\"hljs-attr\\\">  jackson:</span>\\n<span class=\\\"hljs-attr\\\">    date-format:</span> <span class=\\\"hljs-string\\\">yyyy-MM-dd</span> <span class=\\\"hljs-attr\\\">HH:mm:ss</span>\\n<span class=\\\"hljs-attr\\\">    time-zone:</span> <span class=\\\"hljs-string\\\">GMT+8</span>\\n</code></div></pre>\\n<ol start=\\\"2\\\">\\n<li>在pojo对象上添加@JsonFormat注解</li>\\n</ol>\\n<pre><div class=\\\"hljs\\\"><code class=\\\"lang-java\\\">    <span class=\\\"hljs-meta\\\">@JsonFormat</span>(pattern = <span class=\\\"hljs-string\\\">\\\"yyyy-MM-dd HH:mm:ss\\\"</span>, timezone = <span class=\\\"hljs-string\\\">\\\"GMT+8\\\"</span>)\\n    <span class=\\\"hljs-keyword\\\">private</span> Date createdTime;\\n</code></div></pre>\\n<p>但是我在尝试了这两个方法以及相类似的方法，但是都无效，要么就是格式化无效，直接返回的时间戳，要么就是时间还是相差8个小时，但是格式化有效。</p>\\n<p>这时我看到了另外一篇不一样的博客，随后明白了为什么我的配置没有用，原来是因为我添加拦截器时写的配置类的问题。<br />\\n以下代码是我更改之前的配置类</p>\\n<pre><div class=\\\"hljs\\\"><code class=\\\"lang-java\\\"><span class=\\\"hljs-keyword\\\">package</span> com.wsy.blog.config;\\n\\n<span class=\\\"hljs-keyword\\\">import</span> com.fasterxml.jackson.databind.DeserializationFeature;\\n<span class=\\\"hljs-keyword\\\">import</span> com.fasterxml.jackson.databind.ObjectMapper;\\n<span class=\\\"hljs-keyword\\\">import</span> com.wsy.blog.interceptor.LoginInterceptor;\\n<span class=\\\"hljs-keyword\\\">import</span> org.springframework.context.annotation.Bean;\\n<span class=\\\"hljs-keyword\\\">import</span> org.springframework.context.annotation.Configuration;\\n<span class=\\\"hljs-keyword\\\">import</span> org.springframework.http.converter.HttpMessageConverter;\\n<span class=\\\"hljs-keyword\\\">import</span> org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;\\n<span class=\\\"hljs-keyword\\\">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistry;\\n<span class=\\\"hljs-keyword\\\">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport;\\n\\n<span class=\\\"hljs-keyword\\\">import</span> java.text.SimpleDateFormat;\\n<span class=\\\"hljs-keyword\\\">import</span> java.util.List;\\n\\n<span class=\\\"hljs-comment\\\">/**\\n * <span class=\\\"hljs-doctag\\\">@Author</span>: wsy\\n * <span class=\\\"hljs-doctag\\\">@Date</span>: 2020/8/10 11:34\\n */</span>\\n<span class=\\\"hljs-meta\\\">@Configuration</span>\\n<span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-class\\\"><span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title\\\">InterceptorConfig</span> <span class=\\\"hljs-keyword\\\">extends</span> <span class=\\\"hljs-title\\\">WebMvcConfigurationSupport</span> </span>{\\n\\n    <span class=\\\"hljs-meta\\\">@Bean</span>\\n    <span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">public</span> LoginInterceptor <span class=\\\"hljs-title\\\">getLoginInterceptor</span><span class=\\\"hljs-params\\\">()</span> </span>{\\n        <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-keyword\\\">new</span> LoginInterceptor();\\n    }\\n\\n    <span class=\\\"hljs-comment\\\">/**\\n     * 添加拦截器\\n     * <span class=\\\"hljs-doctag\\\">@param</span> registry  拦截器注册\\n     */</span>\\n    <span class=\\\"hljs-meta\\\">@Override</span>\\n    <span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">protected</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title\\\">addInterceptors</span><span class=\\\"hljs-params\\\">(InterceptorRegistry registry)</span> </span>{\\n        <span class=\\\"hljs-comment\\\">// TODO Auto-generated method stub</span>\\n        registry.addInterceptor(getLoginInterceptor()).addPathPatterns(<span class=\\\"hljs-string\\\">\\\"/**\\\"</span>)\\n                .excludePathPatterns(<span class=\\\"hljs-string\\\">\\\"/*/login\\\"</span>);;\\n        <span class=\\\"hljs-keyword\\\">super</span>.addInterceptors(registry);\\n    }\\n}\\n</code></div></pre>\\n<p>这里大家注意，看看自己的代码有没有因为添加拦截器而创建了一个配置类，该类继承了<code>WebMvcConfigurationSupport</code>，就是他！以前是用 <code>WebMvcConfigurerAdapter</code> ，springboot 2.0 建议使用 <code>WebMvcConfigurationSupport</code> 。但是在添加拦截器并继承 <code>WebMvcConfigurationSupport</code> 后会覆盖<code>@EnableAutoConfiguration</code>关于<code>WebMvcAutoConfiguration</code>的配置！从而导致所有的Date返回都变成时间戳！<br />\\n可以采用另外一种方式，在你继承<code>WebMvcConfigurationSupport</code>的子类中添加日期转换的bean<br />\\n以下是我更改后的代码</p>\\n<pre><div class=\\\"hljs\\\"><code class=\\\"lang-java\\\"><span class=\\\"hljs-keyword\\\">package</span> com.wsy.blog.config;\\n\\n<span class=\\\"hljs-keyword\\\">import</span> com.fasterxml.jackson.databind.DeserializationFeature;\\n<span class=\\\"hljs-keyword\\\">import</span> com.fasterxml.jackson.databind.ObjectMapper;\\n<span class=\\\"hljs-keyword\\\">import</span> com.wsy.blog.interceptor.LoginInterceptor;\\n<span class=\\\"hljs-keyword\\\">import</span> org.springframework.context.annotation.Bean;\\n<span class=\\\"hljs-keyword\\\">import</span> org.springframework.context.annotation.Configuration;\\n<span class=\\\"hljs-keyword\\\">import</span> org.springframework.http.converter.HttpMessageConverter;\\n<span class=\\\"hljs-keyword\\\">import</span> org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;\\n<span class=\\\"hljs-keyword\\\">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistry;\\n<span class=\\\"hljs-keyword\\\">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport;\\n\\n<span class=\\\"hljs-keyword\\\">import</span> java.text.SimpleDateFormat;\\n<span class=\\\"hljs-keyword\\\">import</span> java.util.List;\\n\\n<span class=\\\"hljs-comment\\\">/**\\n * <span class=\\\"hljs-doctag\\\">@Author</span>: wsy\\n * <span class=\\\"hljs-doctag\\\">@Date</span>: 2020/8/10 11:34\\n */</span>\\n<span class=\\\"hljs-meta\\\">@Configuration</span>\\n<span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-class\\\"><span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title\\\">InterceptorConfig</span> <span class=\\\"hljs-keyword\\\">extends</span> <span class=\\\"hljs-title\\\">WebMvcConfigurationSupport</span> </span>{\\n\\n    <span class=\\\"hljs-meta\\\">@Bean</span>\\n    <span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">public</span> LoginInterceptor <span class=\\\"hljs-title\\\">getLoginInterceptor</span><span class=\\\"hljs-params\\\">()</span> </span>{\\n        <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-keyword\\\">new</span> LoginInterceptor();\\n    }\\n\\n    <span class=\\\"hljs-comment\\\">/**\\n     * 定义时间格式转换器\\n     * <span class=\\\"hljs-doctag\\\">@return</span>  MappingJackson2HttpMessageConverter\\n     */</span>\\n    <span class=\\\"hljs-meta\\\">@Bean</span>\\n    <span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">public</span> MappingJackson2HttpMessageConverter <span class=\\\"hljs-title\\\">jackson2HttpMessageConverter</span><span class=\\\"hljs-params\\\">()</span> </span>{\\n        MappingJackson2HttpMessageConverter converter = <span class=\\\"hljs-keyword\\\">new</span> MappingJackson2HttpMessageConverter();\\n        ObjectMapper mapper = <span class=\\\"hljs-keyword\\\">new</span> ObjectMapper();\\n        mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, <span class=\\\"hljs-keyword\\\">false</span>);\\n        mapper.setDateFormat(<span class=\\\"hljs-keyword\\\">new</span> SimpleDateFormat(<span class=\\\"hljs-string\\\">\\\"yyyy-MM-dd HH:mm:ss\\\"</span>));\\n        converter.setObjectMapper(mapper);\\n        <span class=\\\"hljs-keyword\\\">return</span> converter;\\n    }\\n\\n    <span class=\\\"hljs-comment\\\">/**\\n     * 添加转换器\\n     * <span class=\\\"hljs-doctag\\\">@param</span> converters    converters\\n     */</span>\\n    <span class=\\\"hljs-meta\\\">@Override</span>\\n    <span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title\\\">configureMessageConverters</span><span class=\\\"hljs-params\\\">(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters)</span> </span>{\\n        <span class=\\\"hljs-comment\\\">//将我们定义的时间格式转换器添加到转换器列表中,</span>\\n        <span class=\\\"hljs-comment\\\">//这样jackson格式化时候但凡遇到Date类型就会转换成我们定义的格式</span>\\n        converters.add(jackson2HttpMessageConverter());\\n    }\\n\\n    <span class=\\\"hljs-comment\\\">/**\\n     * 添加拦截器\\n     * <span class=\\\"hljs-doctag\\\">@param</span> registry  拦截器注册\\n     */</span>\\n    <span class=\\\"hljs-meta\\\">@Override</span>\\n    <span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">protected</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title\\\">addInterceptors</span><span class=\\\"hljs-params\\\">(InterceptorRegistry registry)</span> </span>{\\n        <span class=\\\"hljs-comment\\\">// TODO Auto-generated method stub</span>\\n        registry.addInterceptor(getLoginInterceptor()).addPathPatterns(<span class=\\\"hljs-string\\\">\\\"/**\\\"</span>)\\n                .excludePathPatterns(<span class=\\\"hljs-string\\\">\\\"/*/login\\\"</span>);;\\n        <span class=\\\"hljs-keyword\\\">super</span>.addInterceptors(registry);\\n    }\\n}\\n</code></div></pre>\\n<p>感谢博主的分享经验<br />\\n参考博客：<a href=\\\"https://blog.csdn.net/qq_34975710/article/details/84872489\\\" target=\\\"_blank\\\">https://blog.csdn.net/qq_34975710/article/details/84872489</a></p>\\n\",\"blogGoods\":1,\"blogId\":\"1331436834413211648\",\"blogImage\":\"http://808km.top/blog/img/default.jpg\",\"blogRead\":67,\"blogTitle\":\"springboot 后端传给前端相差8小时\",\"blogType\":9,\"createdTime\":1606274253000,\"typeName\":\"Springboot\",\"updateTime\":1606999845000,\"version\":37},\"msg\":\"阅读成功\"}', '220.202.152.6', '2020-12-04 13:16:47', NULL);
INSERT INTO `bl_log` VALUES (2739, '阅读关于我的', '//about/read', '[]', 1, NULL, 'PUT', 28, '{\"code\":20000,\"data\":{\"aboutContent\":\"<h1><a id=\\\"_0\\\"></a>前言</h1>\\n<p>我是一名即将大三的在校大学生，自主学习的过程中跟随讲师开发了该个人博客“闲言博客”，这个博客功能简单，但是为我巩固了不少的技术知识，该网站为前后端分离项目，后端:<em><strong>springboot+mybatis</strong></em> 前端-前台：_<strong>vue+ and design</strong><em>前端-后台: <em><strong>vue+ element-ui</strong></em> 开发该项目花了我大概10来天时间，前台页面代码是我copy的讲师提供的静态页面（原谅我写的css自己都看不下去），后续想追加个</em><strong>redis</strong><em>写个缓存，以及加一个</em><strong>ElasticSearch</strong>_搜索引擎，加油吧！</p>\\n<h2><a id=\\\"_4\\\"></a>该博客使用到的技术栈：</h2>\\n<p>SpringBoot，Mybatis，Shiro，Maven，Vue，ElementUI，AntDesignVue，Flex布局，Linux，Nginx，Docker，FastDFS，MongoDB，SpringDataMongoDB<br />\\n该博客由我在腾讯课堂购买课程学习开发，网址：</p>\\n<p><a href=\\\"https://ke.qq.com/course/1129309\\\" target=\\\"_blank\\\">课程地址</a></p>\\n<hr />\\n<p>目前我正在修改该博客的小bug并且在集成更多的新功能，我希望能够使用这个博客项目去巩固我学习的新知识，也希望能有更多的人看到我写的这个项目。</p>\\n<h2><a id=\\\"_15\\\"></a>目前需要改进的地方：</h2>\\n<ol>\\n<li>使用elasticSearch 进行博客的检索</li>\\n<li>将首页的主图片修改为轮播图</li>\\n<li><s>注册时上传头像</s></li>\\n<li><s>将富文本编辑器改为Markdown编辑器</s></li>\\n<li><s>更新记录日志的方式</s></li>\\n<li><s>首页url的问题</s></li>\\n<li><s>数据库时间问题</s></li>\\n<li><s>前台md5加密改为后台加密后再匹配</s></li>\\n<li><s>推荐博客下的时间</s></li>\\n<li><s>登录注册页面的背景图片</s></li>\\n<li><s>登录注册页面的卡片问题</s></li>\\n<li>后台中写博客路由问题</li>\\n<li>后端登录中管理员和用户混淆不清关系</li>\\n<li><s>阅读博客时会更新version(乐观锁)这可能会导致在别人观看博客的时候导致博主无法更新博客影响博主体验</s></li>\\n<li>在进入下一个路由之后回到顶部</li>\\n<li>将分页功能改为加载更多</li>\\n</ol>\\n<p>暂时还需要学习一点其他的之后，等有时间的时候再来继续完善该博客。</p>\\n<h2><a id=\\\"_36\\\"></a>更新记录</h2>\\n<ul>\\n<li>\\n<p>2020-11-17 09:25 add:如果添加博客不上传封面将会设置一个默认封面图片</p>\\n</li>\\n<li>\\n<p>2020-11-18 21:48 update:将原本前端md5加密后再跟后端匹配改为后端进行加密后再匹配</p>\\n</li>\\n<li>\\n<p>2020-11-19 22:15 fix:将页面url后面会添加publicPath问题解决</p>\\n</li>\\n<li>\\n<p>2020-11-24 11:25 update:将前端静态资源使用cdn加速、日志原记录为controller层的所有方法切入改为Log注解处切入</p>\\n</li>\\n<li>\\n<p>2020-11-24 21:51 fix:修复推荐博客下的时间bug</p>\\n</li>\\n<li>\\n<p>2020-11-24 21:51 add:注册时添加上传头像功能</p>\\n</li>\\n<li>\\n<p>2020-11-25 11:46 fix:修复数据库时间问题，具体问题已发博客，<a href=\\\"http://oopsw.top:1001/info/1331436834413211648\\\" target=\\\"_blank\\\">点我查看</a></p>\\n</li>\\n<li>\\n<p>2020-11-27 23:47 fix:登录注册页面卡片超出页面没有显示滚动条、背景图片在页面放大时会出现多个背景图片</p>\\n</li>\\n<li>\\n<p>2020-11-29 00:51 update:将前后台的所有富文本编辑器更换为markdown编辑器，并用markdown的样式</p>\\n</li>\\n<li>\\n<p>2020-12-01 08:30 update:修改markdown代码块样式</p>\\n</li>\\n<li>\\n<p>2020-12-01 08:57 fix:手机访问登录注册页面时样式体验差</p>\\n</li>\\n<li>\\n<p>2020-12-03 22:18 update:更换markdown存储方式，从存储markdown源码改为存储HTML源码</p>\\n</li>\\n</ul>\\n\",\"aboutId\":\"5\",\"aboutRead\":172,\"aboutTitle\":\"关于我的 关于“闲言”\",\"createdTime\":1597816791000,\"enable\":1,\"updateTime\":1607089033000,\"version\":221},\"msg\":\"阅读成功\"}', '218.77.40.68', '2020-12-05 00:01:13', NULL);
INSERT INTO `bl_log` VALUES (2740, '查询时间轴', '//blog/getTimeLine', '[]', 1, NULL, 'GET', 11, '{\"code\":20000,\"data\":[{\"list\":[{\"blogId\":\"1333708609683533824\",\"blogMonth\":\"2020-12\",\"blogTitle\":\"shiro+redis整合实现session持久化登陆失败时也会生成session问题\",\"createdTime\":1606815886000}],\"month\":\"2020-12\"},{\"list\":[{\"blogId\":\"1333411378995605504\",\"blogMonth\":\"2020-11\",\"blogTitle\":\"nacos集群环境搭建\",\"createdTime\":1606745021000},{\"blogId\":\"1332742588649615360\",\"blogMonth\":\"2020-11\",\"blogTitle\":\"vue项目引入markdown\",\"createdTime\":1606585569000},{\"blogId\":\"1331436834413211648\",\"blogMonth\":\"2020-11\",\"blogTitle\":\"springboot 后端传给前端相差8小时\",\"createdTime\":1606274253000}],\"month\":\"2020-11\"},{\"list\":[{\"blogId\":\"1322169187161767936\",\"blogMonth\":\"2020-10\",\"blogTitle\":\"Dubbo超时问题\",\"createdTime\":1604064673000}],\"month\":\"2020-10\"},{\"list\":[{\"blogId\":\"1311375132718956544\",\"blogMonth\":\"2020-09\",\"blogTitle\":\"docker中使用fastdfs问题\",\"createdTime\":1601462370000},{\"blogId\":\"1305852969815642112\",\"blogMonth\":\"2020-09\",\"blogTitle\":\"dubbo-admin登录问题\",\"createdTime\":1600174584000}],\"month\":\"2020-09\"},{\"list\":[{\"blogId\":\"1294647161643978752\",\"blogMonth\":\"2020-08\",\"blogTitle\":\"shiroFilter踩坑\",\"createdTime\":1597474112000},{\"blogId\":\"1293808631053139968\",\"blogMonth\":\"2020-08\",\"blogTitle\":\"docker 安装 mysql5.7\",\"createdTime\":1597274190000}],\"month\":\"2020-08\"},{\"list\":[{\"blogId\":\"1293850784802377728\",\"blogMonth\":\"2020-07\",\"blogTitle\":\"mybatis <if>标签踩坑\",\"createdTime\":1594605840000}],\"month\":\"2020-07\"}],\"msg\":\"操作成功！\"}', '218.77.40.68', '2020-12-05 00:13:40', NULL);
INSERT INTO `bl_log` VALUES (2741, '阅读关于我的', '//about/read', '[]', 1, NULL, 'PUT', 27, '{\"code\":20000,\"data\":{\"aboutContent\":\"<h1><a id=\\\"_0\\\"></a>前言</h1>\\n<p>我是一名即将大三的在校大学生，自主学习的过程中跟随讲师开发了该个人博客“闲言博客”，这个博客功能简单，但是为我巩固了不少的技术知识，该网站为前后端分离项目，后端:<em><strong>springboot+mybatis</strong></em> 前端-前台：_<strong>vue+ and design</strong><em>前端-后台: <em><strong>vue+ element-ui</strong></em> 开发该项目花了我大概10来天时间，前台页面代码是我copy的讲师提供的静态页面（原谅我写的css自己都看不下去），后续想追加个</em><strong>redis</strong><em>写个缓存，以及加一个</em><strong>ElasticSearch</strong>_搜索引擎，加油吧！</p>\\n<h2><a id=\\\"_4\\\"></a>该博客使用到的技术栈：</h2>\\n<p>SpringBoot，Mybatis，Shiro，Maven，Vue，ElementUI，AntDesignVue，Flex布局，Linux，Nginx，Docker，FastDFS，MongoDB，SpringDataMongoDB<br />\\n该博客由我在腾讯课堂购买课程学习开发，网址：</p>\\n<p><a href=\\\"https://ke.qq.com/course/1129309\\\" target=\\\"_blank\\\">课程地址</a></p>\\n<hr />\\n<p>目前我正在修改该博客的小bug并且在集成更多的新功能，我希望能够使用这个博客项目去巩固我学习的新知识，也希望能有更多的人看到我写的这个项目。</p>\\n<h2><a id=\\\"_15\\\"></a>目前需要改进的地方：</h2>\\n<ol>\\n<li>使用elasticSearch 进行博客的检索</li>\\n<li>将首页的主图片修改为轮播图</li>\\n<li><s>注册时上传头像</s></li>\\n<li><s>将富文本编辑器改为Markdown编辑器</s></li>\\n<li><s>更新记录日志的方式</s></li>\\n<li><s>首页url的问题</s></li>\\n<li><s>数据库时间问题</s></li>\\n<li><s>前台md5加密改为后台加密后再匹配</s></li>\\n<li><s>推荐博客下的时间</s></li>\\n<li><s>登录注册页面的背景图片</s></li>\\n<li><s>登录注册页面的卡片问题</s></li>\\n<li>后台中写博客路由问题</li>\\n<li>后端登录中管理员和用户混淆不清关系</li>\\n<li><s>阅读博客时会更新version(乐观锁)这可能会导致在别人观看博客的时候导致博主无法更新博客影响博主体验</s></li>\\n<li>在进入下一个路由之后回到顶部</li>\\n<li>将分页功能改为加载更多</li>\\n</ol>\\n<p>暂时还需要学习一点其他的之后，等有时间的时候再来继续完善该博客。</p>\\n<h2><a id=\\\"_36\\\"></a>更新记录</h2>\\n<ul>\\n<li>\\n<p>2020-11-17 09:25 add:如果添加博客不上传封面将会设置一个默认封面图片</p>\\n</li>\\n<li>\\n<p>2020-11-18 21:48 update:将原本前端md5加密后再跟后端匹配改为后端进行加密后再匹配</p>\\n</li>\\n<li>\\n<p>2020-11-19 22:15 fix:将页面url后面会添加publicPath问题解决</p>\\n</li>\\n<li>\\n<p>2020-11-24 11:25 update:将前端静态资源使用cdn加速、日志原记录为controller层的所有方法切入改为Log注解处切入</p>\\n</li>\\n<li>\\n<p>2020-11-24 21:51 fix:修复推荐博客下的时间bug</p>\\n</li>\\n<li>\\n<p>2020-11-24 21:51 add:注册时添加上传头像功能</p>\\n</li>\\n<li>\\n<p>2020-11-25 11:46 fix:修复数据库时间问题，具体问题已发博客，<a href=\\\"http://oopsw.top:1001/info/1331436834413211648\\\" target=\\\"_blank\\\">点我查看</a></p>\\n</li>\\n<li>\\n<p>2020-11-27 23:47 fix:登录注册页面卡片超出页面没有显示滚动条、背景图片在页面放大时会出现多个背景图片</p>\\n</li>\\n<li>\\n<p>2020-11-29 00:51 update:将前后台的所有富文本编辑器更换为markdown编辑器，并用markdown的样式</p>\\n</li>\\n<li>\\n<p>2020-12-01 08:30 update:修改markdown代码块样式</p>\\n</li>\\n<li>\\n<p>2020-12-01 08:57 fix:手机访问登录注册页面时样式体验差</p>\\n</li>\\n<li>\\n<p>2020-12-03 22:18 update:更换markdown存储方式，从存储markdown源码改为存储HTML源码</p>\\n</li>\\n</ul>\\n\",\"aboutId\":\"5\",\"aboutRead\":173,\"aboutTitle\":\"关于我的 关于“闲言”\",\"createdTime\":1597816791000,\"enable\":1,\"updateTime\":1607097673000,\"version\":222},\"msg\":\"阅读成功\"}', '218.77.40.111', '2020-12-06 00:32:50', NULL);
INSERT INTO `bl_log` VALUES (2742, '阅读关于我的', '//about/read', '[]', 1, NULL, 'PUT', 19, '{\"code\":20000,\"data\":{\"aboutContent\":\"<h1><a id=\\\"_0\\\"></a>前言</h1>\\n<p>我是一名即将大三的在校大学生，自主学习的过程中跟随讲师开发了该个人博客“闲言博客”，这个博客功能简单，但是为我巩固了不少的技术知识，该网站为前后端分离项目，后端:<em><strong>springboot+mybatis</strong></em> 前端-前台：_<strong>vue+ and design</strong><em>前端-后台: <em><strong>vue+ element-ui</strong></em> 开发该项目花了我大概10来天时间，前台页面代码是我copy的讲师提供的静态页面（原谅我写的css自己都看不下去），后续想追加个</em><strong>redis</strong><em>写个缓存，以及加一个</em><strong>ElasticSearch</strong>_搜索引擎，加油吧！</p>\\n<h2><a id=\\\"_4\\\"></a>该博客使用到的技术栈：</h2>\\n<p>SpringBoot，Mybatis，Shiro，Maven，Vue，ElementUI，AntDesignVue，Flex布局，Linux，Nginx，Docker，FastDFS，MongoDB，SpringDataMongoDB<br />\\n该博客由我在腾讯课堂购买课程学习开发，网址：</p>\\n<p><a href=\\\"https://ke.qq.com/course/1129309\\\" target=\\\"_blank\\\">课程地址</a></p>\\n<hr />\\n<p>目前我正在修改该博客的小bug并且在集成更多的新功能，我希望能够使用这个博客项目去巩固我学习的新知识，也希望能有更多的人看到我写的这个项目。</p>\\n<h2><a id=\\\"_15\\\"></a>目前需要改进的地方：</h2>\\n<ol>\\n<li>使用elasticSearch 进行博客的检索</li>\\n<li>将首页的主图片修改为轮播图</li>\\n<li><s>注册时上传头像</s></li>\\n<li><s>将富文本编辑器改为Markdown编辑器</s></li>\\n<li><s>更新记录日志的方式</s></li>\\n<li><s>首页url的问题</s></li>\\n<li><s>数据库时间问题</s></li>\\n<li><s>前台md5加密改为后台加密后再匹配</s></li>\\n<li><s>推荐博客下的时间</s></li>\\n<li><s>登录注册页面的背景图片</s></li>\\n<li><s>登录注册页面的卡片问题</s></li>\\n<li>后台中写博客路由问题</li>\\n<li>后端登录中管理员和用户混淆不清关系</li>\\n<li><s>阅读博客时会更新version(乐观锁)这可能会导致在别人观看博客的时候导致博主无法更新博客影响博主体验</s></li>\\n<li>在进入下一个路由之后回到顶部</li>\\n<li>将分页功能改为加载更多</li>\\n</ol>\\n<p>暂时还需要学习一点其他的之后，等有时间的时候再来继续完善该博客。</p>\\n<h2><a id=\\\"_36\\\"></a>更新记录</h2>\\n<ul>\\n<li>\\n<p>2020-11-17 09:25 add:如果添加博客不上传封面将会设置一个默认封面图片</p>\\n</li>\\n<li>\\n<p>2020-11-18 21:48 update:将原本前端md5加密后再跟后端匹配改为后端进行加密后再匹配</p>\\n</li>\\n<li>\\n<p>2020-11-19 22:15 fix:将页面url后面会添加publicPath问题解决</p>\\n</li>\\n<li>\\n<p>2020-11-24 11:25 update:将前端静态资源使用cdn加速、日志原记录为controller层的所有方法切入改为Log注解处切入</p>\\n</li>\\n<li>\\n<p>2020-11-24 21:51 fix:修复推荐博客下的时间bug</p>\\n</li>\\n<li>\\n<p>2020-11-24 21:51 add:注册时添加上传头像功能</p>\\n</li>\\n<li>\\n<p>2020-11-25 11:46 fix:修复数据库时间问题，具体问题已发博客，<a href=\\\"http://oopsw.top:1001/info/1331436834413211648\\\" target=\\\"_blank\\\">点我查看</a></p>\\n</li>\\n<li>\\n<p>2020-11-27 23:47 fix:登录注册页面卡片超出页面没有显示滚动条、背景图片在页面放大时会出现多个背景图片</p>\\n</li>\\n<li>\\n<p>2020-11-29 00:51 update:将前后台的所有富文本编辑器更换为markdown编辑器，并用markdown的样式</p>\\n</li>\\n<li>\\n<p>2020-12-01 08:30 update:修改markdown代码块样式</p>\\n</li>\\n<li>\\n<p>2020-12-01 08:57 fix:手机访问登录注册页面时样式体验差</p>\\n</li>\\n<li>\\n<p>2020-12-03 22:18 update:更换markdown存储方式，从存储markdown源码改为存储HTML源码</p>\\n</li>\\n</ul>\\n\",\"aboutId\":\"5\",\"aboutRead\":174,\"aboutTitle\":\"关于我的 关于“闲言”\",\"createdTime\":1597816791000,\"enable\":1,\"updateTime\":1607185969000,\"version\":223},\"msg\":\"阅读成功\"}', '218.77.40.82', '2020-12-06 00:57:43', NULL);
INSERT INTO `bl_log` VALUES (2743, '查询时间轴', '//blog/getTimeLine', '[]', 1, NULL, 'GET', 8, '{\"code\":20000,\"data\":[{\"list\":[{\"blogId\":\"1333708609683533824\",\"blogMonth\":\"2020-12\",\"blogTitle\":\"shiro+redis整合实现session持久化登陆失败时也会生成session问题\",\"createdTime\":1606815886000}],\"month\":\"2020-12\"},{\"list\":[{\"blogId\":\"1333411378995605504\",\"blogMonth\":\"2020-11\",\"blogTitle\":\"nacos集群环境搭建\",\"createdTime\":1606745021000},{\"blogId\":\"1332742588649615360\",\"blogMonth\":\"2020-11\",\"blogTitle\":\"vue项目引入markdown\",\"createdTime\":1606585569000},{\"blogId\":\"1331436834413211648\",\"blogMonth\":\"2020-11\",\"blogTitle\":\"springboot 后端传给前端相差8小时\",\"createdTime\":1606274253000}],\"month\":\"2020-11\"},{\"list\":[{\"blogId\":\"1322169187161767936\",\"blogMonth\":\"2020-10\",\"blogTitle\":\"Dubbo超时问题\",\"createdTime\":1604064673000}],\"month\":\"2020-10\"},{\"list\":[{\"blogId\":\"1311375132718956544\",\"blogMonth\":\"2020-09\",\"blogTitle\":\"docker中使用fastdfs问题\",\"createdTime\":1601462370000},{\"blogId\":\"1305852969815642112\",\"blogMonth\":\"2020-09\",\"blogTitle\":\"dubbo-admin登录问题\",\"createdTime\":1600174584000}],\"month\":\"2020-09\"},{\"list\":[{\"blogId\":\"1294647161643978752\",\"blogMonth\":\"2020-08\",\"blogTitle\":\"shiroFilter踩坑\",\"createdTime\":1597474112000},{\"blogId\":\"1293808631053139968\",\"blogMonth\":\"2020-08\",\"blogTitle\":\"docker 安装 mysql5.7\",\"createdTime\":1597274190000}],\"month\":\"2020-08\"},{\"list\":[{\"blogId\":\"1293850784802377728\",\"blogMonth\":\"2020-07\",\"blogTitle\":\"mybatis <if>标签踩坑\",\"createdTime\":1594605840000}],\"month\":\"2020-07\"}],\"msg\":\"操作成功！\"}', '218.77.40.82', '2020-12-06 01:15:50', NULL);
INSERT INTO `bl_log` VALUES (2744, '阅读博客', '//blog/read/1333708609683533824', '[1333708609683533824]', 1, NULL, 'PUT', 31, '{\"code\":20000,\"data\":{\"blogCollection\":1,\"blogComment\":0,\"blogContent\":\"<h1><a id=\\\"_0\\\"></a>前言</h1>\\n<p>今天在给博客更新，将session存到redis中持久化存储，正常操作是没问题的，但是后来尝试发现，在我输入的密码是错误的时候，他也创建了session，经过我的一番从尾到头的debug。。。。<br />\\n复杂的debug过程就不贴出来了，放出问题的根源<br />\\n在登陆时，会访问到我用来记录日志的切面,而我的记录日志方法中有一个需要获取到当前登录的用户的信息，来完善日志的字段</p>\\n<blockquote>\\n<p><img src=\\\"http://808km.top/blog/img/img/blogImg/1333703986787631104\\\" alt=\\\"image.png\\\" /><br />\\n以下是工具类中的原方法：<br />\\n<img src=\\\"http://808km.top/blog/img/img/blogImg/1333704236625543168\\\" alt=\\\"image.png\\\" /><br />\\n以下是修改后的方法<br />\\n<img src=\\\"http://808km.top/blog/img/img/blogImg/1333704399599419392\\\" alt=\\\"image.png\\\" /><br />\\n这就是问题的根源，因为在我登录的时候，要记录日志，然后去调用工具类，工具类去获取session，如果没有getSession(false)的话，就会判断session是否存在，如果不存在的话就会自动创建session，这就是为什么明明密码错了还会创建session的原因</p>\\n</blockquote>\\n\",\"blogGoods\":1,\"blogId\":\"1333708609683533824\",\"blogImage\":\"http://808km.top/blog/img/default.jpg\",\"blogRead\":35,\"blogRemark\":\"shiro+redis整合实现session持久化登陆失败时也会生成session问题\",\"blogTitle\":\"shiro+redis整合实现session持久化登陆失败时也会生成session问题\",\"blogType\":6,\"createdTime\":1606815886000,\"typeName\":\"Java\",\"updateTime\":1607016490000,\"version\":3},\"msg\":\"阅读成功\"}', '218.77.40.82', '2020-12-06 01:15:53', NULL);
INSERT INTO `bl_log` VALUES (2745, '阅读关于我的', '//about/read', '[]', 1, NULL, 'PUT', 20, '{\"code\":20000,\"data\":{\"aboutContent\":\"<h1><a id=\\\"_0\\\"></a>前言</h1>\\n<p>我是一名即将大三的在校大学生，自主学习的过程中跟随讲师开发了该个人博客“闲言博客”，这个博客功能简单，但是为我巩固了不少的技术知识，该网站为前后端分离项目，后端:<em><strong>springboot+mybatis</strong></em> 前端-前台：_<strong>vue+ and design</strong><em>前端-后台: <em><strong>vue+ element-ui</strong></em> 开发该项目花了我大概10来天时间，前台页面代码是我copy的讲师提供的静态页面（原谅我写的css自己都看不下去），后续想追加个</em><strong>redis</strong><em>写个缓存，以及加一个</em><strong>ElasticSearch</strong>_搜索引擎，加油吧！</p>\\n<h2><a id=\\\"_4\\\"></a>该博客使用到的技术栈：</h2>\\n<p>SpringBoot，Mybatis，Shiro，Maven，Vue，ElementUI，AntDesignVue，Flex布局，Linux，Nginx，Docker，FastDFS，MongoDB，SpringDataMongoDB<br />\\n该博客由我在腾讯课堂购买课程学习开发，网址：</p>\\n<p><a href=\\\"https://ke.qq.com/course/1129309\\\" target=\\\"_blank\\\">课程地址</a></p>\\n<hr />\\n<p>目前我正在修改该博客的小bug并且在集成更多的新功能，我希望能够使用这个博客项目去巩固我学习的新知识，也希望能有更多的人看到我写的这个项目。</p>\\n<h2><a id=\\\"_15\\\"></a>目前需要改进的地方：</h2>\\n<ol>\\n<li>使用elasticSearch 进行博客的检索</li>\\n<li>将首页的主图片修改为轮播图</li>\\n<li><s>注册时上传头像</s></li>\\n<li><s>将富文本编辑器改为Markdown编辑器</s></li>\\n<li><s>更新记录日志的方式</s></li>\\n<li><s>首页url的问题</s></li>\\n<li><s>数据库时间问题</s></li>\\n<li><s>前台md5加密改为后台加密后再匹配</s></li>\\n<li><s>推荐博客下的时间</s></li>\\n<li><s>登录注册页面的背景图片</s></li>\\n<li><s>登录注册页面的卡片问题</s></li>\\n<li>后台中写博客路由问题</li>\\n<li>后端登录中管理员和用户混淆不清关系</li>\\n<li><s>阅读博客时会更新version(乐观锁)这可能会导致在别人观看博客的时候导致博主无法更新博客影响博主体验</s></li>\\n<li>在进入下一个路由之后回到顶部</li>\\n<li>将分页功能改为加载更多</li>\\n</ol>\\n<p>暂时还需要学习一点其他的之后，等有时间的时候再来继续完善该博客。</p>\\n<h2><a id=\\\"_36\\\"></a>更新记录</h2>\\n<ul>\\n<li>\\n<p>2020-11-17 09:25 add:如果添加博客不上传封面将会设置一个默认封面图片</p>\\n</li>\\n<li>\\n<p>2020-11-18 21:48 update:将原本前端md5加密后再跟后端匹配改为后端进行加密后再匹配</p>\\n</li>\\n<li>\\n<p>2020-11-19 22:15 fix:将页面url后面会添加publicPath问题解决</p>\\n</li>\\n<li>\\n<p>2020-11-24 11:25 update:将前端静态资源使用cdn加速、日志原记录为controller层的所有方法切入改为Log注解处切入</p>\\n</li>\\n<li>\\n<p>2020-11-24 21:51 fix:修复推荐博客下的时间bug</p>\\n</li>\\n<li>\\n<p>2020-11-24 21:51 add:注册时添加上传头像功能</p>\\n</li>\\n<li>\\n<p>2020-11-25 11:46 fix:修复数据库时间问题，具体问题已发博客，<a href=\\\"http://oopsw.top:1001/info/1331436834413211648\\\" target=\\\"_blank\\\">点我查看</a></p>\\n</li>\\n<li>\\n<p>2020-11-27 23:47 fix:登录注册页面卡片超出页面没有显示滚动条、背景图片在页面放大时会出现多个背景图片</p>\\n</li>\\n<li>\\n<p>2020-11-29 00:51 update:将前后台的所有富文本编辑器更换为markdown编辑器，并用markdown的样式</p>\\n</li>\\n<li>\\n<p>2020-12-01 08:30 update:修改markdown代码块样式</p>\\n</li>\\n<li>\\n<p>2020-12-01 08:57 fix:手机访问登录注册页面时样式体验差</p>\\n</li>\\n<li>\\n<p>2020-12-03 22:18 update:更换markdown存储方式，从存储markdown源码改为存储HTML源码</p>\\n</li>\\n</ul>\\n\",\"aboutId\":\"5\",\"aboutRead\":175,\"aboutTitle\":\"关于我的 关于“闲言”\",\"createdTime\":1597816791000,\"enable\":1,\"updateTime\":1607187463000,\"version\":224},\"msg\":\"阅读成功\"}', '218.77.40.111', '2020-12-06 01:28:19', NULL);
INSERT INTO `bl_log` VALUES (2746, '阅读博客', '//blog/read/1331436834413211648', '[1331436834413211648]', 1, NULL, 'PUT', 78, '{\"code\":20000,\"data\":{\"blogCollection\":0,\"blogComment\":0,\"blogContent\":\"<p>在开发中日期最常打交道的东西之一，但是日期又会存在各式各样的格式，常见的情形就是，从数据库取出的日期往往都是时间戳（毫秒数）的形式，这个一般情况下是前端不想要的结果，需要进行处理，那在springboot中比较简单：<br />\\n因为后端传给前端时默认使用jackson转换格式所以我们可以</p>\\n<ol>\\n<li>在application.yml中设置</li>\\n</ol>\\n<pre><div class=\\\"hljs\\\"><code class=\\\"lang-yml\\\"><span class=\\\"hljs-attr\\\">spring:</span>\\n<span class=\\\"hljs-attr\\\">  jackson:</span>\\n<span class=\\\"hljs-attr\\\">    date-format:</span> <span class=\\\"hljs-string\\\">yyyy-MM-dd</span> <span class=\\\"hljs-attr\\\">HH:mm:ss</span>\\n<span class=\\\"hljs-attr\\\">    time-zone:</span> <span class=\\\"hljs-string\\\">GMT+8</span>\\n</code></div></pre>\\n<ol start=\\\"2\\\">\\n<li>在pojo对象上添加@JsonFormat注解</li>\\n</ol>\\n<pre><div class=\\\"hljs\\\"><code class=\\\"lang-java\\\">    <span class=\\\"hljs-meta\\\">@JsonFormat</span>(pattern = <span class=\\\"hljs-string\\\">\\\"yyyy-MM-dd HH:mm:ss\\\"</span>, timezone = <span class=\\\"hljs-string\\\">\\\"GMT+8\\\"</span>)\\n    <span class=\\\"hljs-keyword\\\">private</span> Date createdTime;\\n</code></div></pre>\\n<p>但是我在尝试了这两个方法以及相类似的方法，但是都无效，要么就是格式化无效，直接返回的时间戳，要么就是时间还是相差8个小时，但是格式化有效。</p>\\n<p>这时我看到了另外一篇不一样的博客，随后明白了为什么我的配置没有用，原来是因为我添加拦截器时写的配置类的问题。<br />\\n以下代码是我更改之前的配置类</p>\\n<pre><div class=\\\"hljs\\\"><code class=\\\"lang-java\\\"><span class=\\\"hljs-keyword\\\">package</span> com.wsy.blog.config;\\n\\n<span class=\\\"hljs-keyword\\\">import</span> com.fasterxml.jackson.databind.DeserializationFeature;\\n<span class=\\\"hljs-keyword\\\">import</span> com.fasterxml.jackson.databind.ObjectMapper;\\n<span class=\\\"hljs-keyword\\\">import</span> com.wsy.blog.interceptor.LoginInterceptor;\\n<span class=\\\"hljs-keyword\\\">import</span> org.springframework.context.annotation.Bean;\\n<span class=\\\"hljs-keyword\\\">import</span> org.springframework.context.annotation.Configuration;\\n<span class=\\\"hljs-keyword\\\">import</span> org.springframework.http.converter.HttpMessageConverter;\\n<span class=\\\"hljs-keyword\\\">import</span> org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;\\n<span class=\\\"hljs-keyword\\\">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistry;\\n<span class=\\\"hljs-keyword\\\">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport;\\n\\n<span class=\\\"hljs-keyword\\\">import</span> java.text.SimpleDateFormat;\\n<span class=\\\"hljs-keyword\\\">import</span> java.util.List;\\n\\n<span class=\\\"hljs-comment\\\">/**\\n * <span class=\\\"hljs-doctag\\\">@Author</span>: wsy\\n * <span class=\\\"hljs-doctag\\\">@Date</span>: 2020/8/10 11:34\\n */</span>\\n<span class=\\\"hljs-meta\\\">@Configuration</span>\\n<span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-class\\\"><span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title\\\">InterceptorConfig</span> <span class=\\\"hljs-keyword\\\">extends</span> <span class=\\\"hljs-title\\\">WebMvcConfigurationSupport</span> </span>{\\n\\n    <span class=\\\"hljs-meta\\\">@Bean</span>\\n    <span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">public</span> LoginInterceptor <span class=\\\"hljs-title\\\">getLoginInterceptor</span><span class=\\\"hljs-params\\\">()</span> </span>{\\n        <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-keyword\\\">new</span> LoginInterceptor();\\n    }\\n\\n    <span class=\\\"hljs-comment\\\">/**\\n     * 添加拦截器\\n     * <span class=\\\"hljs-doctag\\\">@param</span> registry  拦截器注册\\n     */</span>\\n    <span class=\\\"hljs-meta\\\">@Override</span>\\n    <span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">protected</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title\\\">addInterceptors</span><span class=\\\"hljs-params\\\">(InterceptorRegistry registry)</span> </span>{\\n        <span class=\\\"hljs-comment\\\">// TODO Auto-generated method stub</span>\\n        registry.addInterceptor(getLoginInterceptor()).addPathPatterns(<span class=\\\"hljs-string\\\">\\\"/**\\\"</span>)\\n                .excludePathPatterns(<span class=\\\"hljs-string\\\">\\\"/*/login\\\"</span>);;\\n        <span class=\\\"hljs-keyword\\\">super</span>.addInterceptors(registry);\\n    }\\n}\\n</code></div></pre>\\n<p>这里大家注意，看看自己的代码有没有因为添加拦截器而创建了一个配置类，该类继承了<code>WebMvcConfigurationSupport</code>，就是他！以前是用 <code>WebMvcConfigurerAdapter</code> ，springboot 2.0 建议使用 <code>WebMvcConfigurationSupport</code> 。但是在添加拦截器并继承 <code>WebMvcConfigurationSupport</code> 后会覆盖<code>@EnableAutoConfiguration</code>关于<code>WebMvcAutoConfiguration</code>的配置！从而导致所有的Date返回都变成时间戳！<br />\\n可以采用另外一种方式，在你继承<code>WebMvcConfigurationSupport</code>的子类中添加日期转换的bean<br />\\n以下是我更改后的代码</p>\\n<pre><div class=\\\"hljs\\\"><code class=\\\"lang-java\\\"><span class=\\\"hljs-keyword\\\">package</span> com.wsy.blog.config;\\n\\n<span class=\\\"hljs-keyword\\\">import</span> com.fasterxml.jackson.databind.DeserializationFeature;\\n<span class=\\\"hljs-keyword\\\">import</span> com.fasterxml.jackson.databind.ObjectMapper;\\n<span class=\\\"hljs-keyword\\\">import</span> com.wsy.blog.interceptor.LoginInterceptor;\\n<span class=\\\"hljs-keyword\\\">import</span> org.springframework.context.annotation.Bean;\\n<span class=\\\"hljs-keyword\\\">import</span> org.springframework.context.annotation.Configuration;\\n<span class=\\\"hljs-keyword\\\">import</span> org.springframework.http.converter.HttpMessageConverter;\\n<span class=\\\"hljs-keyword\\\">import</span> org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;\\n<span class=\\\"hljs-keyword\\\">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistry;\\n<span class=\\\"hljs-keyword\\\">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport;\\n\\n<span class=\\\"hljs-keyword\\\">import</span> java.text.SimpleDateFormat;\\n<span class=\\\"hljs-keyword\\\">import</span> java.util.List;\\n\\n<span class=\\\"hljs-comment\\\">/**\\n * <span class=\\\"hljs-doctag\\\">@Author</span>: wsy\\n * <span class=\\\"hljs-doctag\\\">@Date</span>: 2020/8/10 11:34\\n */</span>\\n<span class=\\\"hljs-meta\\\">@Configuration</span>\\n<span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-class\\\"><span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title\\\">InterceptorConfig</span> <span class=\\\"hljs-keyword\\\">extends</span> <span class=\\\"hljs-title\\\">WebMvcConfigurationSupport</span> </span>{\\n\\n    <span class=\\\"hljs-meta\\\">@Bean</span>\\n    <span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">public</span> LoginInterceptor <span class=\\\"hljs-title\\\">getLoginInterceptor</span><span class=\\\"hljs-params\\\">()</span> </span>{\\n        <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-keyword\\\">new</span> LoginInterceptor();\\n    }\\n\\n    <span class=\\\"hljs-comment\\\">/**\\n     * 定义时间格式转换器\\n     * <span class=\\\"hljs-doctag\\\">@return</span>  MappingJackson2HttpMessageConverter\\n     */</span>\\n    <span class=\\\"hljs-meta\\\">@Bean</span>\\n    <span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">public</span> MappingJackson2HttpMessageConverter <span class=\\\"hljs-title\\\">jackson2HttpMessageConverter</span><span class=\\\"hljs-params\\\">()</span> </span>{\\n        MappingJackson2HttpMessageConverter converter = <span class=\\\"hljs-keyword\\\">new</span> MappingJackson2HttpMessageConverter();\\n        ObjectMapper mapper = <span class=\\\"hljs-keyword\\\">new</span> ObjectMapper();\\n        mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, <span class=\\\"hljs-keyword\\\">false</span>);\\n        mapper.setDateFormat(<span class=\\\"hljs-keyword\\\">new</span> SimpleDateFormat(<span class=\\\"hljs-string\\\">\\\"yyyy-MM-dd HH:mm:ss\\\"</span>));\\n        converter.setObjectMapper(mapper);\\n        <span class=\\\"hljs-keyword\\\">return</span> converter;\\n    }\\n\\n    <span class=\\\"hljs-comment\\\">/**\\n     * 添加转换器\\n     * <span class=\\\"hljs-doctag\\\">@param</span> converters    converters\\n     */</span>\\n    <span class=\\\"hljs-meta\\\">@Override</span>\\n    <span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title\\\">configureMessageConverters</span><span class=\\\"hljs-params\\\">(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters)</span> </span>{\\n        <span class=\\\"hljs-comment\\\">//将我们定义的时间格式转换器添加到转换器列表中,</span>\\n        <span class=\\\"hljs-comment\\\">//这样jackson格式化时候但凡遇到Date类型就会转换成我们定义的格式</span>\\n        converters.add(jackson2HttpMessageConverter());\\n    }\\n\\n    <span class=\\\"hljs-comment\\\">/**\\n     * 添加拦截器\\n     * <span class=\\\"hljs-doctag\\\">@param</span> registry  拦截器注册\\n     */</span>\\n    <span class=\\\"hljs-meta\\\">@Override</span>\\n    <span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">protected</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title\\\">addInterceptors</span><span class=\\\"hljs-params\\\">(InterceptorRegistry registry)</span> </span>{\\n        <span class=\\\"hljs-comment\\\">// TODO Auto-generated method stub</span>\\n        registry.addInterceptor(getLoginInterceptor()).addPathPatterns(<span class=\\\"hljs-string\\\">\\\"/**\\\"</span>)\\n                .excludePathPatterns(<span class=\\\"hljs-string\\\">\\\"/*/login\\\"</span>);;\\n        <span class=\\\"hljs-keyword\\\">super</span>.addInterceptors(registry);\\n    }\\n}\\n</code></div></pre>\\n<p>感谢博主的分享经验<br />\\n参考博客：<a href=\\\"https://blog.csdn.net/qq_34975710/article/details/84872489\\\" target=\\\"_blank\\\">https://blog.csdn.net/qq_34975710/article/details/84872489</a></p>\\n\",\"blogGoods\":1,\"blogId\":\"1331436834413211648\",\"blogImage\":\"http://808km.top/blog/img/default.jpg\",\"blogRead\":68,\"blogTitle\":\"springboot 后端传给前端相差8小时\",\"blogType\":9,\"createdTime\":1606274253000,\"typeName\":\"Springboot\",\"updateTime\":1607059007000,\"version\":37},\"msg\":\"阅读成功\"}', '119.165.191.132', '2020-12-07 16:41:04', NULL);
INSERT INTO `bl_log` VALUES (2747, '阅读博客', '//blog/read/1333411378995605504', '[1333411378995605504]', 1, NULL, 'PUT', 26, '{\"code\":20000,\"data\":{\"blogCollection\":0,\"blogComment\":0,\"blogContent\":\"<h2><a id=\\\"_0\\\"></a>预备环境准备</h2>\\n<p>Nacos 依赖 <a href=\\\"https://docs.oracle.com/cd/E19182-01/820-7851/inst_cli_jdk_javahome_t/\\\" target=\\\"_blank\\\">Java</a> 环境来运行。如果您是从代码开始构建并运行Nacos，还需要为此配置 <a href=\\\"https://maven.apache.org/index.html\\\" target=\\\"_blank\\\">Maven</a>环境，请确保是在以下版本环境中安装使用:</p>\\n<ol>\\n<li>64 bit OS，支持 Linux/Unix/Mac/Windows，推荐选用 Linux/Unix/Mac。</li>\\n<li>64 bit JDK 1.8+；<a href=\\\"http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html\\\" target=\\\"_blank\\\">下载</a> &amp; <a href=\\\"https://docs.oracle.com/cd/E19182-01/820-7851/inst_cli_jdk_javahome_t/\\\" target=\\\"_blank\\\">配置</a>。</li>\\n<li>Maven 3.2.x+；<a href=\\\"https://maven.apache.org/download.cgi\\\" target=\\\"_blank\\\">下载</a> &amp; <a href=\\\"https://maven.apache.org/settings.html\\\" target=\\\"_blank\\\">配置</a>。</li>\\n</ol>\\n<h2><a id=\\\"nacos_8\\\"></a>下载nacos安装包</h2>\\n<p>https://github.com/alibaba/nacos/releases/tag/1.4.0</p>\\n<blockquote>\\n<p><img src=\\\"https://img-blog.csdnimg.cn/20201130205557917.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ0ODU5OA==,size_16,color_FFFFFF,t_70\\\" alt=\\\"在这里插入图片描述\\\" /></p>\\n</blockquote>\\n<p>linux选择第一个</p>\\n<p>windows选择第二个</p>\\n<h2><a id=\\\"_21\\\"></a>搭建环境</h2>\\n<h3><a id=\\\"_23\\\"></a>集群模式部署</h3>\\n<p>这个快速开始手册是帮忙您快速在你的电脑上，下载安装并使用Nacos，部署生产使用的集群模式。</p>\\n<h3><a id=\\\"_27\\\"></a>集群部署架构图</h3>\\n<p><img src=\\\"https://img-blog.csdnimg.cn/20201130205609797.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ0ODU5OA==,size_16,color_FFFFFF,t_70\\\" alt=\\\"在这里插入图片描述\\\" /></p>\\n<p>VIP:虚拟ip</p>\\n<p>因此开源的时候推荐用户把所有服务列表放到一个vip下面，然后挂到一个域名下面</p>\\n<p><a href=\\\"http://ip1/\\\" target=\\\"_blank\\\">http://ip1</a>:port/openAPI 直连ip模式，机器挂则需要修改ip才可以使用。</p>\\n<p><a href=\\\"http://vip/\\\" target=\\\"_blank\\\">http://VIP</a>:port/openAPI 挂载VIP模式，直连vip即可，下面挂server真实ip，可读性不好。</p>\\n<p><a href=\\\"http://nacos.com/\\\" target=\\\"_blank\\\">http://nacos.com</a>:port/openAPI 域名 + VIP模式，可读性好，而且换ip方便，推荐模式</p>\\n<h3><a id=\\\"_42\\\"></a>创建目录</h3>\\n<p>该目录存放nacos集群</p>\\n<pre><div class=\\\"hljs\\\"><code class=\\\"lang-sh\\\">mkdir /usr/<span class=\\\"hljs-built_in\\\">local</span>/nacos\\n</code></div></pre>\\n<h3><a id=\\\"nacos_50\\\"></a>上传nacos</h3>\\n<blockquote>\\n<p><img src=\\\"https://img-blog.csdnimg.cn/20201130205630233.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ0ODU5OA==,size_16,color_FFFFFF,t_70\\\" alt=\\\"在这里插入图片描述\\\" /></p>\\n</blockquote>\\n<h3><a id=\\\"nacos_54\\\"></a>解压nacos</h3>\\n<pre><div class=\\\"hljs\\\"><code class=\\\"lang-sh\\\">tar -zxvf nacos-server-1.4.0.tar.gz\\n</code></div></pre>\\n<h3><a id=\\\"nacos_60\\\"></a>创建nacos持久化数据库</h3>\\n<p>首先使用navicat连接mysql数据库，然后创建数据库</p>\\n<p><img src=\\\"https://img-blog.csdnimg.cn/20201130205643439.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ0ODU5OA==,size_16,color_FFFFFF,t_70\\\" alt=\\\"在这里插入图片描述\\\" /></p>\\n<p>新建查询后导入SQL脚本即可</p>\\n<p><img src=\\\"https://img-blog.csdnimg.cn/20201130205705669.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ0ODU5OA==,size_16,color_FFFFFF,t_70\\\" alt=\\\"在这里插入图片描述\\\" /></p>\\n<p>红色框选那栏填写你的SQL脚本位置，SQL脚本在nacos文件夹下的conf下</p>\\n<h3><a id=\\\"nacos_73\\\"></a>nacos文件夹改名</h3>\\n<p>将文件夹名改为nacos3333代表这个nacos的端口号是3333</p>\\n<pre><div class=\\\"hljs\\\"><code class=\\\"lang-sh\\\">mv nacos nacos3333\\n</code></div></pre>\\n<h3><a id=\\\"_81\\\"></a>配置修改</h3>\\n<p>首先进入到配置目录</p>\\n<pre><div class=\\\"hljs\\\"><code class=\\\"lang-sh\\\"><span class=\\\"hljs-built_in\\\">cd</span> /usr/<span class=\\\"hljs-built_in\\\">local</span>/nacos/nacos3333/conf\\n</code></div></pre>\\n<blockquote>\\n<p><img src=\\\"https://img-blog.csdnimg.cn/2020113020572431.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ0ODU5OA==,size_16,color_FFFFFF,t_70\\\" alt=\\\"在这里插入图片描述\\\" /></p>\\n</blockquote>\\n<p>在更改配置之前先备份配置</p>\\n<pre><div class=\\\"hljs\\\"><code class=\\\"lang-sh\\\">cp application.properties application.properties.example\\n</code></div></pre>\\n<pre><div class=\\\"hljs\\\"><code class=\\\"lang-sh\\\">cp cluster.conf.example cluster.conf\\n</code></div></pre>\\n<h3><a id=\\\"_104\\\"></a>集群配置</h3>\\n<pre><div class=\\\"hljs\\\"><code class=\\\"lang-sh\\\">vim cluster.conf\\n</code></div></pre>\\n<blockquote>\\n<p><img src=\\\"https://img-blog.csdnimg.cn/20201130205739435.png\\\" alt=\\\"在这里插入图片描述\\\" /></p>\\n</blockquote>\\n<blockquote>\\n<p>注意这里不能填写localhost 或者127.0.0.1，这里如果是在本机搭建可以查看本机ip后填写</p>\\n<pre><div class=\\\"hljs\\\"><code class=\\\"lang-sh\\\">hostname -i\\n</code></div></pre>\\n<p><img src=\\\"https://img-blog.csdnimg.cn/20201130205749116.png\\\" alt=\\\"在这里插入图片描述\\\" /></p>\\n</blockquote>\\n<h3><a id=\\\"nacos_122\\\"></a>nacos配置</h3>\\n<pre><div class=\\\"hljs\\\"><code class=\\\"lang-sh\\\">vim application.properties\\n</code></div></pre>\\n<pre><code class=\\\"lang-properties\\\">\\n#*************** Spring Boot Related Configurations ***************#\\n### Default web context path:\\nserver.servlet.contextPath=/nacos\\n### Default web server port:\\nserver.port=3333\\n\\n#*************** Network Related Configurations ***************#\\n### If prefer hostname over ip for Nacos server addresses in cluster.conf:\\n# nacos.inetutils.prefer-hostname-over-ip=false\\n\\n### Specify local server\'s IP:\\n# nacos.inetutils.ip-address=\\n\\n\\n#*************** Config Module Related Configurations ***************#\\n### If use MySQL as datasource:\\n spring.datasource.platform=mysql\\n\\n### Count of DB:\\n db.num=1\\n\\n### Connect URL of DB:\\ndb.url.0=jdbc:mysql://127.0.0.1:3306/nacos_config?characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true&amp;useUnicode=true&amp;useSSL=false&amp;serverTimezone=UTC\\ndb.user=root\\ndb.password=123456\\n\\n\\n#*************** Naming Module Related Configurations ***************#\\n### Data dispatch task execution period in milliseconds:\\n# nacos.naming.distro.taskDispatchPeriod=200\\n\\n### Data count of batch sync task:\\n# nacos.naming.distro.batchSyncKeyCount=1000\\n\\n### Retry delay in milliseconds if sync task failed:\\n# nacos.naming.distro.syncRetryDelay=5000\\n\\n### If enable data warmup. If set to false, the server would accept request without local data preparation:\\n# nacos.naming.data.warmup=true\\n\\n### If enable the instance auto expiration, kind like of health check of instance:\\n# nacos.naming.expireInstance=true\\n\\nnacos.naming.empty-service.auto-clean=true\\nnacos.naming.empty-service.clean.initial-delay-ms=50000\\nnacos.naming.empty-service.clean.period-time-ms=30000\\n\\n\\n#*************** CMDB Module Related Configurations ***************#\\n### The interval to dump external CMDB in seconds:\\n# nacos.cmdb.dumpTaskInterval=3600\\n\\n### The interval of polling data change event in seconds:\\n# nacos.cmdb.eventTaskInterval=10\\n\\n### The interval of loading labels in seconds:\\n# nacos.cmdb.labelTaskInterval=300\\n\\n### If turn on data loading task:\\n# nacos.cmdb.loadDataAtStart=false\\n\\n\\n#*************** Metrics Related Configurations ***************#\\n### Metrics for prometheus\\n#management.endpoints.web.exposure.include=*\\n\\n### Metrics for elastic search\\nmanagement.metrics.export.elastic.enabled=false\\n#management.metrics.export.elastic.host=http://localhost:9200\\n\\n### Metrics for influx\\nmanagement.metrics.export.influx.enabled=false\\n#management.metrics.export.influx.db=springboot\\n#management.metrics.export.influx.uri=http://localhost:8086\\n#management.metrics.export.influx.auto-create-db=true\\n#management.metrics.export.influx.consistency=one\\n#management.metrics.export.influx.compressed=true\\n\\n\\n#*************** Access Log Related Configurations ***************#\\n### If turn on the access log:\\nserver.tomcat.accesslog.enabled=true\\n\\n### The access log pattern:\\nserver.tomcat.accesslog.pattern=%h %l %u %t &quot;%r&quot; %s %b %D %{User-Agent}i %{Request-Source}i\\n\\n### The directory of access log:\\nserver.tomcat.basedir=\\n\\n\\n#*************** Access Control Related Configurations ***************#\\n### If enable spring security, this option is deprecated in 1.2.0:\\n#spring.security.enabled=false\\n\\n### The ignore urls of auth, is deprecated in 1.2.0:\\nnacos.security.ignore.urls=/,/error,/**/*.css,/**/*.js,/**/*.html,/**/*.map,/**/*.svg,/**/*.png,/**/*.ico,/console-fe/public/**,/v1/auth/**,/v1/console/health/**,/actuator/**,/v1/console/server/**\\n\\n### The auth system to use, currently only \'nacos\' is supported:\\nnacos.core.auth.system.type=nacos\\n\\n### If turn on auth system:\\nnacos.core.auth.enabled=false\\n\\n### The token expiration in seconds:\\nnacos.core.auth.default.token.expire.seconds=18000\\n\\n### The default token:\\nnacos.core.auth.default.token.secret.key=SecretKey012345678901234567890123456789012345678901234567890123456789\\n\\n### Turn on/off caching of auth information. By turning on this switch, the update of auth information would have a 15 seconds delay.\\nnacos.core.auth.caching.enabled=true\\n\\n\\n#*************** Istio Related Configurations ***************#\\n### If turn on the MCP server:\\nnacos.istio.mcp.server.enabled=false\\n\\n\\n\\n###*************** Add from 1.3.0 ***************###\\n\\n\\n#*************** Core Related Configurations ***************#\\n\\n### set the WorkerID manually\\n# nacos.core.snowflake.worker-id=\\n\\n### Member-MetaData\\n# nacos.core.member.meta.site=\\n# nacos.core.member.meta.adweight=\\n# nacos.core.member.meta.weight=\\n\\n### MemberLookup\\n### Addressing pattern category, If set, the priority is highest\\n# nacos.core.member.lookup.type=[file,address-server]\\n## Set the cluster list with a configuration file or command-line argument\\n# nacos.member.list=192.168.16.101:8847?raft_port=8807,192.168.16.101?raft_port=8808,192.168.16.101:8849?raft_port=8809\\n## for AddressServerMemberLookup\\n# Maximum number of retries to query the address server upon initialization\\n# nacos.core.address-server.retry=5\\n## Server domain name address of [address-server] mode\\n# address.server.domain=jmenv.tbsite.net\\n## Server port of [address-server] mode\\n# address.server.port=8080\\n## Request address of [address-server] mode\\n# address.server.url=/nacos/serverlist\\n\\n#*************** JRaft Related Configurations ***************#\\n\\n### Sets the Raft cluster election timeout, default value is 5 second\\n# nacos.core.protocol.raft.data.election_timeout_ms=5000\\n### Sets the amount of time the Raft snapshot will execute periodically, default is 30 minute\\n# nacos.core.protocol.raft.data.snapshot_interval_secs=30\\n### raft internal worker threads\\n# nacos.core.protocol.raft.data.core_thread_num=8\\n### Number of threads required for raft business request processing\\n# nacos.core.protocol.raft.data.cli_service_thread_num=4\\n### raft linear read strategy. Safe linear reads are used by default, that is, the Leader tenure is confirmed by heartbeat\\n# nacos.core.protocol.raft.data.read_index_type=ReadOnlySafe\\n### rpc request timeout, default 5 seconds\\n# nacos.core.protocol.raft.data.rpc_request_timeout_ms=5000\\n\\n</code></pre>\\n<p>这是我的整个application.properties文件,其中主要修改的地方有两处</p>\\n<p>修改端口号</p>\\n<pre><code class=\\\"lang-properties\\\">### Default web server port:\\nserver.port=3333\\n</code></pre>\\n<p>修改数据库为mysql并配置mysql的url</p>\\n<pre><code class=\\\"lang-properties\\\">#*************** Config Module Related Configurations ***************#\\n### If use MySQL as datasource:\\n spring.datasource.platform=mysql\\n\\n### Count of DB:\\n db.num=1\\n\\n### Connect URL of DB:\\ndb.url.0=jdbc:mysql://127.0.0.1:3306/nacos_config?characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true&amp;useUnicode=true&amp;useSSL=false&amp;serverTimezone=UTC\\ndb.user=root\\ndb.password=123456\\n</code></pre>\\n<p>这时候配置就差不多啦可以开始启动服务了</p>\\n<pre><div class=\\\"hljs\\\"><code class=\\\"lang-sh\\\"><span class=\\\"hljs-comment\\\"># 进入到nacos3333的bin目录</span>\\n<span class=\\\"hljs-built_in\\\">cd</span> /usr/<span class=\\\"hljs-built_in\\\">local</span>/nacos/nacos3333/bin\\n<span class=\\\"hljs-comment\\\"># 执行启动脚本 因为nacos启动脚本默认就是使用集群模式所以不用更改</span>\\n./startup.sh\\n</code></div></pre>\\n<p>这时候我们可以查看nacos的启动状态</p>\\n<pre><div class=\\\"hljs\\\"><code class=\\\"lang-sh\\\">ps -ef | grep nacos\\n</code></div></pre>\\n<blockquote>\\n<p><img src=\\\"https://img-blog.csdnimg.cn/20201130205818481.png\\\" alt=\\\"在这里插入图片描述\\\" /></p>\\n</blockquote>\\n<p>这时候我们应该就可以通过 服务器ip:3333/nacos访问到nacos</p>\\n<blockquote>\\n<p><img src=\\\"https://img-blog.csdnimg.cn/20201130205828641.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ0ODU5OA==,size_16,color_FFFFFF,t_70\\\" alt=\\\"在这里插入图片描述\\\" /></p>\\n</blockquote>\\n<p>成功的访问到了nacos代表成功了。</p>\\n<h3><a id=\\\"nacos_344\\\"></a>nacos集群启动</h3>\\n<p>这时候我们就可以回到nacos目录下拷贝之前的nacos3333文件夹来启动nacos4444和nacos5555</p>\\n<pre><div class=\\\"hljs\\\"><code class=\\\"lang-sh\\\"><span class=\\\"hljs-built_in\\\">cd</span> /usr/<span class=\\\"hljs-built_in\\\">local</span>/nacos\\n<span class=\\\"hljs-comment\\\"># cp -r 代表递归拷贝</span>\\ncp -r nacos3333 nacos4444\\ncp -r nacos3333 nacos5555\\n</code></div></pre>\\n<p>这时候再分别将nacos4444和nacos5555文件夹下的conf目录中的application.properties中的server.port更改为3333、4444然后再启动，这里我就不再演示了，和之前配置一样。</p>\\n<p>随后我们再依次启动nacos4444，nacos5555</p>\\n<p>###########################################################################</p>\\n<p>启动后发现问题，nacos5555启动不起来，查看日志得到发现内存不足，nacos脚本默认给的最大内存是2G，我们可以去改小一点。</p>\\n<p><img src=\\\"https://img-blog.csdnimg.cn/20201130205845619.png\\\" alt=\\\"在这里插入图片描述\\\" /></p>\\n<p>原红框中限制的内存是2g 最小1g 适当该小一点[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传<br />\\n<img src=\\\"https://img-blog.csdnimg.cn/20201130205903628.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ0ODU5OA==,size_16,color_FFFFFF,t_70\\\" alt=\\\"在这里插入图片描述\\\" /></p>\\n<p>然后再依次启动三个服务</p>\\n<p>登录任意一个nacos可以看到如下页面即集群启动成功</p>\\n<h3><a id=\\\"nginx_373\\\"></a>nginx配置</h3>\\n<p>这配置nginx负载均衡访问nacos</p>\\n<pre><div class=\\\"hljs\\\"><code class=\\\"lang-sh\\\"><span class=\\\"hljs-built_in\\\">cd</span> /usr/<span class=\\\"hljs-built_in\\\">local</span>/nginx/conf\\nvim nginx.conf\\n</code></div></pre>\\n<pre><code class=\\\"lang-conf\\\">#user  nobody;\\nworker_processes  1;\\n\\n#error_log  logs/error.log;\\n#error_log  logs/error.log  notice;\\n#error_log  logs/error.log  info;\\n\\n#pid        logs/nginx.pid;\\n\\n\\nevents {\\n    worker_connections  1024;\\n}\\n\\n\\nhttp {\\n    include       mime.types;\\n    default_type  application/octet-stream;\\n\\n    #log_format  main  \'$remote_addr - $remote_user [$time_local] &quot;$request&quot; \'\\n    #                  \'$status $body_bytes_sent &quot;$http_referer&quot; \'\\n    #                  \'&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;\';\\n\\n    #access_log  logs/access.log  main;\\n\\n    sendfile        on;\\n    #tcp_nopush     on;\\n\\n    #keepalive_timeout  0;\\n    keepalive_timeout  65;\\n\\n    #gzip  on;\\n\\n    #配置刚刚搭建好的nacos集群\\n    upstream cluster{                                                        \\n\\t    server 127.0.0.1:3333;\\n\\t    server 127.0.0.1:4444;\\n\\t    server 127.0.0.1:5555;\\n\\t}\\n\\n    server {\\n        listen       1111;\\n        server_name  nacos_cluster;\\n\\n        #charset koi8-r;\\n\\n        #access_log  logs/host.access.log  main;\\n\\n        location / {\\n            #root   html;\\n            #index  index.html index.htm;\\n            #将所有访问/的都映射到配置好的集群\\n            proxy_pass http://cluster;\\n        }\\n\\n        #error_page  404              /404.html;\\n\\n        # redirect server error pages to the static page /50x.html\\n        #\\n        error_page   500 502 503 504  /50x.html;\\n        location = /50x.html {\\n            root   html;\\n        }\\n\\n        # proxy the PHP scripts to Apache listening on 127.0.0.1:80\\n        #\\n        #location ~ \\\\.php$ {\\n        #    proxy_pass   http://127.0.0.1;\\n        #}\\n\\n        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000\\n        #\\n        #location ~ \\\\.php$ {\\n        #    root           html;\\n        #    fastcgi_pass   127.0.0.1:9000;\\n        #    fastcgi_index  index.php;\\n        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;\\n        #    include        fastcgi_params;\\n        #}\\n\\n        # deny access to .htaccess files, if Apache\'s document root\\n        # concurs with nginx\'s one\\n        #\\n        #location ~ /\\\\.ht {\\n        #    deny  all;\\n        #}\\n    }\\n\\n\\n    # another virtual host using mix of IP-, name-, and port-based configuration\\n    #\\n    #server {\\n    #    listen       8000;\\n    #    listen       somename:8080;\\n    #    server_name  somename  alias  another.alias;\\n\\n    #    location / {\\n    #        root   html;\\n    #        index  index.html index.htm;\\n    #    }\\n    #}\\n\\n\\n    # HTTPS server\\n    #\\n    #server {\\n    #    listen       443 ssl;\\n    #    server_name  localhost;\\n\\n    #    ssl_certificate      cert.pem;\\n    #    ssl_certificate_key  cert.key;\\n\\n    #    ssl_session_cache    shared:SSL:1m;\\n    #    ssl_session_timeout  5m;\\n\\n    #    ssl_ciphers  HIGH:!aNULL:!MD5;\\n    #    ssl_prefer_server_ciphers  on;\\n\\n    #    location / {\\n    #        root   html;\\n    #        index  index.html index.htm;\\n    #    }\\n    #}\\n}\\n</code></pre>\\n<h3><a id=\\\"nginx_509\\\"></a>nginx启动</h3>\\n<pre><div class=\\\"hljs\\\"><code class=\\\"lang-sh\\\"><span class=\\\"hljs-built_in\\\">cd</span> /usr/<span class=\\\"hljs-built_in\\\">local</span>/nginx/sbin\\n./nginx\\n</code></div></pre>\\n<p>这时候我们就可以通过服务器ip地址:1111/nacos 来访问nacos集群了</p>\\n<p><img src=\\\"https://img-blog.csdnimg.cn/20201130205927229.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ0ODU5OA==,size_16,color_FFFFFF,t_70\\\" alt=\\\"在这里插入图片描述\\\" /></p>\\n<p>关于使用NACOS集群遇到问题 – CODE:503 MSG: SERVER IS STARTING NOW, PLEASE TRY AGAIN LATER!</p>\\n<p>这时又出现了问题……在服务提供者注册服务时会报错</p>\\n<pre><code class=\\\"lang-text\\\">2020-11-30 00:36:59.492 ERROR 13140 --- [  restartedMain] c.a.c.n.registry.NacosServiceRegistry    : nacos registry, nacos-payment-provider register failed...NacosRegistration{nacosDiscoveryProperties=NacosDiscoveryProperties{serverAddr=\'wsy.oopsw.top:1111\', endpoint=\'\', namespace=\'\', watchDelay=30000, logName=\'\', service=\'nacos-payment-provider\', weight=1.0, clusterName=\'DEFAULT\', namingLoadCacheAtStart=\'false\', metadata={preserved.register.source=SPRING_CLOUD}, registerEnabled=true, ip=\'10.175.6.100\', networkInterface=\'\', port=9002, secure=false, accessKey=\'\', secretKey=\'\'}},\\n\\njava.lang.IllegalStateException: failed to req API:/nacos/v1/ns/instance after all servers([wsy.oopsw.top:1111]) tried: failed to req API:wsy.oopsw.top:1111/nacos/v1/ns/instance. code:503 msg: server is DOWN now, please try again later!\\n\\tat com.alibaba.nacos.client.naming.net.NamingProxy.reqAPI(NamingProxy.java:464) ~[nacos-client-1.1.1.jar:na]\\n\\tat com.alibaba.nacos.client.naming.net.NamingProxy.reqAPI(NamingProxy.java:386) ~[nacos-client-1.1.1.jar:na]\\n\\tat com.alibaba.nacos.client.naming.net.NamingProxy.registerService(NamingProxy.java:188) ~[nacos-client-1.1.1.jar:na]\\n\\tat com.alibaba.nacos.client.naming.NacosNamingService.registerInstance(NacosNamingService.java:205) ~[nacos-client-1.1.1.jar:na]\\n\\tat com.alibaba.nacos.client.naming.NacosNamingService.registerInstance(NacosNamingService.java:184) ~[nacos-client-1.1.1.jar:na]\\n\\tat com.alibaba.cloud.nacos.registry.NacosServiceRegistry.register(NacosServiceRegistry.java:61) ~[spring-cloud-alibaba-nacos-discovery-2.1.0.RELEASE.jar:2.1.0.RELEASE]\\n\\tat org.springframework.cloud.client.serviceregistry.AbstractAutoServiceRegistration.register(AbstractAutoServiceRegistration.java:239) [spring-cloud-commons-2.2.1.RELEASE.jar:2.2.1.RELEASE]\\n\\tat com.alibaba.cloud.nacos.registry.NacosAutoServiceRegistration.register(NacosAutoServiceRegistration.java:74) [spring-cloud-alibaba-nacos-discovery-2.1.0.RELEASE.jar:2.1.0.RELEASE]\\n\\tat org.springframework.cloud.client.serviceregistry.AbstractAutoServiceRegistration.start(AbstractAutoServiceRegistration.java:138) [spring-cloud-commons-2.2.1.RELEASE.jar:2.2.1.RELEASE]\\n\\tat org.springframework.cloud.client.serviceregistry.AbstractAutoServiceRegistration.bind(AbstractAutoServiceRegistration.java:101) [spring-cloud-commons-2.2.1.RELEASE.jar:2.2.1.RELEASE]\\n\\tat org.springframework.cloud.client.serviceregistry.AbstractAutoServiceRegistration.onApplicationEvent(AbstractAutoServiceRegistration.java:88) [spring-cloud-commons-2.2.1.RELEASE.jar:2.2.1.RELEASE]\\n\\tat org.springframework.cloud.client.serviceregistry.AbstractAutoServiceRegistration.onApplicationEvent(AbstractAutoServiceRegistration.java:47) [spring-cloud-commons-2.2.1.RELEASE.jar:2.2.1.RELEASE]\\n\\tat org.springframework.context.event.SimpleApplicationEventMulticaster.doInvokeListener(SimpleApplicationEventMulticaster.java:172) [spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]\\n\\tat org.springframework.context.event.SimpleApplicationEventMulticaster.invokeListener(SimpleApplicationEventMulticaster.java:165) [spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]\\n\\tat org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:139) [spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]\\n\\tat org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:403) [spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]\\n\\tat org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:360) [spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]\\n\\tat org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.finishRefresh(ServletWebServerApplicationContext.java:165) [spring-boot-2.2.2.RELEASE.jar:2.2.2.RELEASE]\\n\\tat org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:553) [spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]\\n\\tat org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:141) [spring-boot-2.2.2.RELEASE.jar:2.2.2.RELEASE]\\n\\tat org.springframework.boot.SpringApplication.refresh(SpringApplication.java:747) [spring-boot-2.2.2.RELEASE.jar:2.2.2.RELEASE]\\n\\tat org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:397) [spring-boot-2.2.2.RELEASE.jar:2.2.2.RELEASE]\\n\\tat org.springframework.boot.SpringApplication.run(SpringApplication.java:315) [spring-boot-2.2.2.RELEASE.jar:2.2.2.RELEASE]\\n\\tat org.springframework.boot.SpringApplication.run(SpringApplication.java:1226) [spring-boot-2.2.2.RELEASE.jar:2.2.2.RELEASE]\\n\\tat org.springframework.boot.SpringApplication.run(SpringApplication.java:1215) [spring-boot-2.2.2.RELEASE.jar:2.2.2.RELEASE]\\n\\tat com.wsy.springcloud.AlibabaProviderApplication.main(AlibabaProviderApplication.java:15) [classes/:na]\\n\\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_73]\\n\\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_73]\\n\\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_73]\\n\\tat java.lang.reflect.Method.invoke(Method.java:497) ~[na:1.8.0_73]\\n\\tat org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49) [spring-boot-devtools-2.2.2.RELEASE.jar:2.2.2.RELEASE]\\n</code></pre>\\n<p>像阿里云、腾讯云这种云服务器, 会提供一个外网ip和内网ip, 访问外网ip时会指向对应的内网ip来访问到该服务器, 由于nacos集群内部是指定的使用网卡ip地址来进行通信,但是由于三台服务器各自的内网ip不在同一网段, 所以造成无法通信, 也会造成以下问题</p>\\n<p>注册服务:</p>\\n<pre><code class=\\\"lang-\\\">code:503 msg: server is STARTING now, please try again later!\\n</code></pre>\\n<p>naming-raft.log 日志:</p>\\n<pre><code class=\\\"lang-\\\">2019-05-15 00:02:00,000 WARN [IS LEADER] no leader is available now!\\n</code></pre>\\n<p>这时只要修改启动参数, 设置本机ip地址就可以了<br />\\n修改 nacos/bin/startup.sh 文件<br />\\n找到 JVM Configuration 这部分, 在集群参数里增加 -Dnacos.server.ip=xx</p>\\n<pre><div class=\\\"hljs\\\"><code class=\\\"lang-sh\\\"><span class=\\\"hljs-comment\\\">#===========================================================================================</span>\\n<span class=\\\"hljs-comment\\\"># JVM Configuration</span>\\n<span class=\\\"hljs-comment\\\">#===========================================================================================</span>\\n\\n<span class=\\\"hljs-comment\\\"># 单机模式对应的启动参数</span>\\n<span class=\\\"hljs-keyword\\\">if</span> [[ <span class=\\\"hljs-string\\\">\\\"<span class=\\\"hljs-variable\\\">${MODE}</span>\\\"</span> == <span class=\\\"hljs-string\\\">\\\"standalone\\\"</span> ]]; <span class=\\\"hljs-keyword\\\">then</span>\\n    JAVA_OPT=<span class=\\\"hljs-string\\\">\\\"<span class=\\\"hljs-variable\\\">${JAVA_OPT}</span> -Xms512m -Xmx512m -Xmn256m\\\"</span>\\n    JAVA_OPT=<span class=\\\"hljs-string\\\">\\\"<span class=\\\"hljs-variable\\\">${JAVA_OPT}</span> -Dnacos.standalone=true\\\"</span>\\n<span class=\\\"hljs-keyword\\\">else</span>\\n<span class=\\\"hljs-comment\\\"># 集群模式对应的启动参数</span>\\n    JAVA_OPT=<span class=\\\"hljs-string\\\">\\\"<span class=\\\"hljs-variable\\\">${JAVA_OPT}</span> -server -Xms2g -Xmx2g -Xmn1g -XX:MetaspaceSize=128m -XX:MaxMetaspaceSize=320m\\\"</span>\\n    JAVA_OPT=<span class=\\\"hljs-string\\\">\\\"<span class=\\\"hljs-variable\\\">${JAVA_OPT}</span> -XX:-OmitStackTraceInFastThrow -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=<span class=\\\"hljs-variable\\\">${BASE_DIR}</span>/logs/java_heapdump.hprof\\\"</span>\\n    JAVA_OPT=<span class=\\\"hljs-string\\\">\\\"<span class=\\\"hljs-variable\\\">${JAVA_OPT}</span> -XX:-UseLargePages\\\"</span>\\n    \\n    <span class=\\\"hljs-comment\\\"># *新增以下参数设置本机ip地址*</span>\\n    JAVA_OPT=<span class=\\\"hljs-string\\\">\\\"<span class=\\\"hljs-variable\\\">${JAVA_OPT}</span> -Dnacos.server.ip=本机ip\\\"</span>\\n\\n<span class=\\\"hljs-keyword\\\">fi</span>\\n\\n<span class=\\\"hljs-keyword\\\">if</span> [[ <span class=\\\"hljs-string\\\">\\\"<span class=\\\"hljs-variable\\\">${FUNCTION_MODE}</span>\\\"</span> == <span class=\\\"hljs-string\\\">\\\"config\\\"</span> ]]; <span class=\\\"hljs-keyword\\\">then</span>\\n    JAVA_OPT=<span class=\\\"hljs-string\\\">\\\"<span class=\\\"hljs-variable\\\">${JAVA_OPT}</span> -Dnacos.functionMode=config\\\"</span>\\n<span class=\\\"hljs-keyword\\\">elif</span> [[ <span class=\\\"hljs-string\\\">\\\"<span class=\\\"hljs-variable\\\">${FUNCTION_MODE}</span>\\\"</span> == <span class=\\\"hljs-string\\\">\\\"naming\\\"</span> ]]; <span class=\\\"hljs-keyword\\\">then</span>\\n    JAVA_OPT=<span class=\\\"hljs-string\\\">\\\"<span class=\\\"hljs-variable\\\">${JAVA_OPT}</span> -Dnacos.functionMode=naming\\\"</span>\\n<span class=\\\"hljs-keyword\\\">fi</span>\\n\\n</code></div></pre>\\n<p>参考博客：https://www.freesion.com/article/33101142210/</p>\\n<p>服务注册时报BadRequest400 问题暂时还未解决</p>\\n<pre><code class=\\\"lang-text\\\">com.alibaba.nacos.api.exception.NacosException: failed to req API:/nacos/v1/ns/instance after all servers([wsy.oopsw.top:1111]) tried: ErrCode:400, ErrMsg:&lt;html&gt;&lt;body&gt;&lt;h1&gt;Whitelabel Error Page&lt;/h1&gt;&lt;p&gt;This application has no explicit mapping for /error, so you are seeing this as a fallback.&lt;/p&gt;&lt;div id=\'created\'&gt;Mon Nov 30 01:33:45 CST 2020&lt;/div&gt;&lt;div&gt;There was an unexpected error (type=Bad Request, status=400).&lt;/div&gt;&lt;div&gt;receive invalid redirect request from peer 172.20.9.153&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;\\n</code></pre>\\n<p>#############################################################</p>\\n<p>问题已解决，是nacos版本的问题，据群里老哥解释说是nacos需要使用与之对应的SpringCloudAlibaba的版本，不然就会报错，我更换版本到1.3.2问题解决服务注册正常</p>\\n\",\"blogGoods\":0,\"blogId\":\"1333411378995605504\",\"blogImage\":\"http://808km.top/blog/img/img/default/1333411206555185152\",\"blogRead\":50,\"blogRemark\":\"nacos集群环境搭建\",\"blogTitle\":\"nacos集群环境搭建\",\"blogType\":20,\"createdTime\":1606745021000,\"typeName\":\"nacos\",\"updateTime\":1607089028000,\"version\":39},\"msg\":\"阅读成功\"}', '119.165.191.132', '2020-12-07 16:42:14', NULL);
INSERT INTO `bl_log` VALUES (2748, '阅读博客', '//blog/read/1332742588649615360', '[1332742588649615360]', 1, NULL, 'PUT', 48, '{\"code\":20000,\"data\":{\"blogCollection\":0,\"blogComment\":0,\"blogContent\":\"<h2><a id=\\\"_0\\\"></a>前言</h2>\\n<p>咳咳，终于终于终于将我的博客项目引入了<strong>markdown</strong>了，之前博客使用的是富文本编辑器，因为最近我都是使用的<strong>markdown</strong>做笔记和写博客，而自己的项目博客是个富文本编辑器这让我很不舒服，所以花了一整个晚上的时间把我的博客项目换成了<strong>markdown</strong>编辑器，让我先用这个<strong>markdown</strong>编辑器写一个博客试试哈哈哈哈！</p>\\n<h2><a id=\\\"_2\\\"></a>操作步骤</h2>\\n<h3><a id=\\\"markdown_3\\\"></a>引入markdown相关插件</h3>\\n<h4><a id=\\\"mavonEditor_4\\\"></a>mavonEditor</h4>\\n<p>我现在博客使用的markdown编辑器是使用的是mavonEditor<br />\\n我们需要使用它的话首先需要安装</p>\\n<pre><code class=\\\"lang-\\\">npm install mavon-editor --save\\n</code></pre>\\n<p>然后我们在main.js中全局引用它</p>\\n<pre><div class=\\\"hljs\\\"><code class=\\\"lang-javascript\\\"><span class=\\\"hljs-comment\\\">// 引入markdown组件</span>\\n<span class=\\\"hljs-keyword\\\">import</span> Vue <span class=\\\"hljs-keyword\\\">from</span> <span class=\\\"hljs-string\\\">\'vue\'</span>\\n<span class=\\\"hljs-keyword\\\">import</span> mavonEditor <span class=\\\"hljs-keyword\\\">from</span> <span class=\\\"hljs-string\\\">\'mavon-editor\'</span>\\n<span class=\\\"hljs-keyword\\\">import</span> <span class=\\\"hljs-string\\\">\'mavon-editor/dist/css/index.css\'</span>\\n\\nVue.use(mavonEditor)\\n\\n<span class=\\\"hljs-keyword\\\">new</span> Vue({\\n  <span class=\\\"hljs-attr\\\">el</span>: <span class=\\\"hljs-string\\\">\'#app\'</span>,\\n  router,\\n  store,\\n  <span class=\\\"hljs-attr\\\">render</span>: <span class=\\\"hljs-function\\\"><span class=\\\"hljs-params\\\">h</span> =&gt;</span> h(App)\\n})\\n</code></div></pre>\\n<p>随后我们便可以在项目中引用该组件,value绑定的是markdown的源内容</p>\\n<pre><div class=\\\"hljs\\\"><code class=\\\"lang-html\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span> <span class=\\\"hljs-attr\\\">id</span>=<span class=\\\"hljs-string\\\">\\\"main\\\"</span>&gt;</span>\\n    <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">mavon-editor</span> <span class=\\\"hljs-attr\\\">v-model</span>=<span class=\\\"hljs-string\\\">\\\"value\\\"</span>/&gt;</span>\\n<span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n</code></div></pre>\\n<p>markdown中的图片上传</p>\\n<pre><div class=\\\"hljs\\\"><code class=\\\"lang-javascript\\\"><span class=\\\"hljs-comment\\\">// 图片上传</span>\\n    uploadImg(pos, $file) {\\n      <span class=\\\"hljs-comment\\\">// 定义上传uri</span>\\n      <span class=\\\"hljs-keyword\\\">const</span> uploadUri = <span class=\\\"hljs-string\\\">\'img/blogImg/\'</span>\\n      <span class=\\\"hljs-comment\\\">// 定义上传对象</span>\\n      <span class=\\\"hljs-keyword\\\">var</span> formData = <span class=\\\"hljs-keyword\\\">new</span> FormData()\\n      formData.append(<span class=\\\"hljs-string\\\">\'file\'</span>, $file)\\n      formData.append(<span class=\\\"hljs-string\\\">\'uploadUri\'</span>, uploadUri)\\n      uploadImage(formData).then(<span class=\\\"hljs-function\\\"><span class=\\\"hljs-params\\\">res</span> =&gt;</span> {\\n        <span class=\\\"hljs-comment\\\">// 将markdown插入的图片url更换为返回的ul</span>\\n        <span class=\\\"hljs-keyword\\\">this</span>.$refs.md.$img2Url(pos, res.data)\\n      })\\n    }\\n</code></div></pre>\\n<table>\\n<thead>\\n<tr>\\n<th>pos</th>\\n<th>$file</th>\\n<th>this.<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math><semantics><mrow><mi>r</mi><mi>e</mi><mi>f</mi><mi>s</mi><mi mathvariant=\\\"normal\\\">.</mi><mi>m</mi><mi>d</mi><mi mathvariant=\\\"normal\\\">.</mi></mrow><annotation encoding=\\\"application/x-tex\\\">refs.md.</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"strut\\\" style=\\\"height:0.69444em;\\\"></span><span class=\\\"strut bottom\\\" style=\\\"height:0.8888799999999999em;vertical-align:-0.19444em;\\\"></span><span class=\\\"base\\\"><span class=\\\"mord mathit\\\" style=\\\"margin-right:0.02778em;\\\">r</span><span class=\\\"mord mathit\\\">e</span><span class=\\\"mord mathit\\\" style=\\\"margin-right:0.10764em;\\\">f</span><span class=\\\"mord mathit\\\">s</span><span class=\\\"mord mathrm\\\">.</span><span class=\\\"mord mathit\\\">m</span><span class=\\\"mord mathit\\\">d</span><span class=\\\"mord mathrm\\\">.</span></span></span></span>img2Url</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>当前有插入了几张图片</td>\\n<td>文件对象</td>\\n<td>修改markdown源连接为新设置的值</td>\\n</tr>\\n</tbody>\\n</table>\\n<p>更多api文档请自行查看官方文档：<a href=\\\"https://github.com/hinesboy/mavonEditor\\\" target=\\\"_blank\\\">https://github.com/hinesboy/mavonEditor</a></p>\\n<h4><a id=\\\"marked_54\\\"></a>marked</h4>\\n<p>在引入了mavonEditor之后，确实是可以使用markdown编辑器写博客了，但是发现上传上去的是markdown的源代码，那得到的也只是markdown的源内容，那……谁又喜欢看这种东西呢，然后又去百度找解决的办法，发现了marked，该插件能够将markdown的内容转换为HTML格式渲染出来。<br />\\n照例先安装</p>\\n<pre><code class=\\\"lang-\\\">npm install --save marked\\n</code></pre>\\n<p>安装完后在需要使用到的页面引用该插件</p>\\n<pre><div class=\\\"hljs\\\"><code class=\\\"lang-javascript\\\"><span class=\\\"hljs-keyword\\\">import</span> marked <span class=\\\"hljs-keyword\\\">from</span> <span class=\\\"hljs-string\\\">\'marked\'</span>\\n</code></div></pre>\\n<p>然后就可以使用啦，直接调用一个方法即可转换</p>\\n<pre><div class=\\\"hljs\\\"><code class=\\\"lang-javascript\\\"><span class=\\\"hljs-comment\\\">//  将Markdown源内容转换为HTML</span>\\n<span class=\\\"hljs-keyword\\\">this</span>.content = marked(source)\\n</code></div></pre>\\n<p>具体使用方法可以参考<br />\\n官网：<a href=\\\"https://marked.js.org/\\\" target=\\\"_blank\\\">https://marked.js.org/</a><br />\\nGitHub：<a href=\\\"https://github.com/markedjs/marked\\\" target=\\\"_blank\\\">https://github.com/markedjs/marked</a></p>\\n<h4><a id=\\\"highlight_72\\\"></a>highlight</h4>\\n<p>这是已经可以从Markdown转换为HTML来渲染了，但是郁闷的又来了，发现代码没有高亮显示，而且Markdown没有一点样式，非常的难看，这时又只能打开百度去找解决办法咯，就找到了highlight这个插件，这是专门用来给Markdown添加代码高亮的插件，与之相似的还有highlightjs-line-numbers.js这是用来显示行数的，但是我尝试了，好像需要JQuery才能够使用我就放弃了。<br />\\n首先照例先安装</p>\\n<pre><code class=\\\"lang-\\\">npm install --save highlight\\n</code></pre>\\n<p>然后在需要使用到的页面引用</p>\\n<pre><div class=\\\"hljs\\\"><code class=\\\"lang-javascript\\\"><span class=\\\"hljs-comment\\\">// 引入代码高亮插件</span>\\n<span class=\\\"hljs-keyword\\\">import</span> hljs <span class=\\\"hljs-keyword\\\">from</span> <span class=\\\"hljs-string\\\">\'highlight.js\'</span>\\n<span class=\\\"hljs-keyword\\\">import</span> <span class=\\\"hljs-string\\\">\'highlight.js/styles/atom-one-dark.css\'</span>\\n<span class=\\\"hljs-comment\\\">// 导入本地markdown样式</span>\\n<span class=\\\"hljs-keyword\\\">import</span> <span class=\\\"hljs-string\\\">\'../../styles/markdown.css\'</span>\\n</code></div></pre>\\n<p>然后在marked转换格式之前执行一个方法</p>\\n<pre><div class=\\\"hljs\\\"><code class=\\\"lang-javascript\\\"> <span class=\\\"hljs-comment\\\">// 展现经过markdown渲染后的html</span>\\n        marked.setOptions({\\n          <span class=\\\"hljs-attr\\\">renderer</span>: <span class=\\\"hljs-keyword\\\">new</span> marked.Renderer(),\\n          <span class=\\\"hljs-attr\\\">highlight</span>: <span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function</span>(<span class=\\\"hljs-params\\\">code</span>) </span>{\\n            <span class=\\\"hljs-keyword\\\">return</span> hljs.highlightAuto(code).value\\n          },\\n          <span class=\\\"hljs-attr\\\">pedantic</span>: <span class=\\\"hljs-literal\\\">false</span>,\\n          <span class=\\\"hljs-attr\\\">gfm</span>: <span class=\\\"hljs-literal\\\">true</span>,\\n          <span class=\\\"hljs-attr\\\">tables</span>: <span class=\\\"hljs-literal\\\">true</span>,\\n          <span class=\\\"hljs-attr\\\">breaks</span>: <span class=\\\"hljs-literal\\\">false</span>,\\n          <span class=\\\"hljs-attr\\\">sanitize</span>: <span class=\\\"hljs-literal\\\">false</span>,\\n          <span class=\\\"hljs-attr\\\">smartLists</span>: <span class=\\\"hljs-literal\\\">true</span>,\\n          <span class=\\\"hljs-attr\\\">smartypants</span>: <span class=\\\"hljs-literal\\\">false</span>,\\n          <span class=\\\"hljs-attr\\\">xhtml</span>: <span class=\\\"hljs-literal\\\">false</span>\\n        })\\n        <span class=\\\"hljs-keyword\\\">this</span>.blogContent = marked(res.data.blogContent)\\n</code></div></pre>\\n<p>当然我也只用到了这一个地方如果有想了解更多的可以到GitHub上查看源代码<br />\\n<a href=\\\"https://github.com/highlightjs/highlight.js/\\\" target=\\\"_blank\\\">https://github.com/highlightjs/highlight.js/</a></p>\\n<h2><a id=\\\"_107\\\"></a>总结</h2>\\n<p>更换这个Markdown编辑器真的花了我不少时间，确实感觉前端对我来说好难好难，每次出一点小问题就需要好久才能够解决，当然自己做出来了也还是很有成就感的，毕竟是自己做出来的东西。<br />\\n我的个人博客:<a href=\\\"http://oopsw.top:1001\\\" target=\\\"_blank\\\">http://oopsw.top:1001</a></p>\\n\",\"blogGoods\":0,\"blogId\":\"1332742588649615360\",\"blogImage\":\"http://808km.top/blog/img/img/default/1332742519359713280\",\"blogRead\":20,\"blogRemark\":\"更换这个Markdown编辑器真的花了我不少时间，确实感觉前端对我来说好难好难，每次出一点小问题就需要好久才能够解决，当然自己做出来了也还是很有成就感的，毕竟是自己做出来的东西。\",\"blogTitle\":\"vue项目引入markdown\",\"blogType\":15,\"createdTime\":1606585569000,\"typeName\":\"Vue\",\"updateTime\":1606994834000,\"version\":23},\"msg\":\"阅读成功\"}', '119.165.191.132', '2020-12-07 16:42:19', NULL);
INSERT INTO `bl_log` VALUES (2749, '查询时间轴', '//blog/getTimeLine', '[]', 1, NULL, 'GET', 9, '{\"code\":20000,\"data\":[{\"list\":[{\"blogId\":\"1333708609683533824\",\"blogMonth\":\"2020-12\",\"blogTitle\":\"shiro+redis整合实现session持久化登陆失败时也会生成session问题\",\"createdTime\":1606815886000}],\"month\":\"2020-12\"},{\"list\":[{\"blogId\":\"1333411378995605504\",\"blogMonth\":\"2020-11\",\"blogTitle\":\"nacos集群环境搭建\",\"createdTime\":1606745021000},{\"blogId\":\"1332742588649615360\",\"blogMonth\":\"2020-11\",\"blogTitle\":\"vue项目引入markdown\",\"createdTime\":1606585569000},{\"blogId\":\"1331436834413211648\",\"blogMonth\":\"2020-11\",\"blogTitle\":\"springboot 后端传给前端相差8小时\",\"createdTime\":1606274253000}],\"month\":\"2020-11\"},{\"list\":[{\"blogId\":\"1322169187161767936\",\"blogMonth\":\"2020-10\",\"blogTitle\":\"Dubbo超时问题\",\"createdTime\":1604064673000}],\"month\":\"2020-10\"},{\"list\":[{\"blogId\":\"1311375132718956544\",\"blogMonth\":\"2020-09\",\"blogTitle\":\"docker中使用fastdfs问题\",\"createdTime\":1601462370000},{\"blogId\":\"1305852969815642112\",\"blogMonth\":\"2020-09\",\"blogTitle\":\"dubbo-admin登录问题\",\"createdTime\":1600174584000}],\"month\":\"2020-09\"},{\"list\":[{\"blogId\":\"1294647161643978752\",\"blogMonth\":\"2020-08\",\"blogTitle\":\"shiroFilter踩坑\",\"createdTime\":1597474112000},{\"blogId\":\"1293808631053139968\",\"blogMonth\":\"2020-08\",\"blogTitle\":\"docker 安装 mysql5.7\",\"createdTime\":1597274190000}],\"month\":\"2020-08\"},{\"list\":[{\"blogId\":\"1293850784802377728\",\"blogMonth\":\"2020-07\",\"blogTitle\":\"mybatis <if>标签踩坑\",\"createdTime\":1594605840000}],\"month\":\"2020-07\"}],\"msg\":\"操作成功！\"}', '119.165.191.132', '2020-12-07 17:22:58', NULL);
INSERT INTO `bl_log` VALUES (2750, '阅读博客', '//blog/read/1332742588649615360', '[1332742588649615360]', 1, NULL, 'PUT', 23, '{\"code\":20000,\"data\":{\"blogCollection\":0,\"blogComment\":0,\"blogContent\":\"<h2><a id=\\\"_0\\\"></a>前言</h2>\\n<p>咳咳，终于终于终于将我的博客项目引入了<strong>markdown</strong>了，之前博客使用的是富文本编辑器，因为最近我都是使用的<strong>markdown</strong>做笔记和写博客，而自己的项目博客是个富文本编辑器这让我很不舒服，所以花了一整个晚上的时间把我的博客项目换成了<strong>markdown</strong>编辑器，让我先用这个<strong>markdown</strong>编辑器写一个博客试试哈哈哈哈！</p>\\n<h2><a id=\\\"_2\\\"></a>操作步骤</h2>\\n<h3><a id=\\\"markdown_3\\\"></a>引入markdown相关插件</h3>\\n<h4><a id=\\\"mavonEditor_4\\\"></a>mavonEditor</h4>\\n<p>我现在博客使用的markdown编辑器是使用的是mavonEditor<br />\\n我们需要使用它的话首先需要安装</p>\\n<pre><code class=\\\"lang-\\\">npm install mavon-editor --save\\n</code></pre>\\n<p>然后我们在main.js中全局引用它</p>\\n<pre><div class=\\\"hljs\\\"><code class=\\\"lang-javascript\\\"><span class=\\\"hljs-comment\\\">// 引入markdown组件</span>\\n<span class=\\\"hljs-keyword\\\">import</span> Vue <span class=\\\"hljs-keyword\\\">from</span> <span class=\\\"hljs-string\\\">\'vue\'</span>\\n<span class=\\\"hljs-keyword\\\">import</span> mavonEditor <span class=\\\"hljs-keyword\\\">from</span> <span class=\\\"hljs-string\\\">\'mavon-editor\'</span>\\n<span class=\\\"hljs-keyword\\\">import</span> <span class=\\\"hljs-string\\\">\'mavon-editor/dist/css/index.css\'</span>\\n\\nVue.use(mavonEditor)\\n\\n<span class=\\\"hljs-keyword\\\">new</span> Vue({\\n  <span class=\\\"hljs-attr\\\">el</span>: <span class=\\\"hljs-string\\\">\'#app\'</span>,\\n  router,\\n  store,\\n  <span class=\\\"hljs-attr\\\">render</span>: <span class=\\\"hljs-function\\\"><span class=\\\"hljs-params\\\">h</span> =&gt;</span> h(App)\\n})\\n</code></div></pre>\\n<p>随后我们便可以在项目中引用该组件,value绑定的是markdown的源内容</p>\\n<pre><div class=\\\"hljs\\\"><code class=\\\"lang-html\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span> <span class=\\\"hljs-attr\\\">id</span>=<span class=\\\"hljs-string\\\">\\\"main\\\"</span>&gt;</span>\\n    <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">mavon-editor</span> <span class=\\\"hljs-attr\\\">v-model</span>=<span class=\\\"hljs-string\\\">\\\"value\\\"</span>/&gt;</span>\\n<span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n</code></div></pre>\\n<p>markdown中的图片上传</p>\\n<pre><div class=\\\"hljs\\\"><code class=\\\"lang-javascript\\\"><span class=\\\"hljs-comment\\\">// 图片上传</span>\\n    uploadImg(pos, $file) {\\n      <span class=\\\"hljs-comment\\\">// 定义上传uri</span>\\n      <span class=\\\"hljs-keyword\\\">const</span> uploadUri = <span class=\\\"hljs-string\\\">\'img/blogImg/\'</span>\\n      <span class=\\\"hljs-comment\\\">// 定义上传对象</span>\\n      <span class=\\\"hljs-keyword\\\">var</span> formData = <span class=\\\"hljs-keyword\\\">new</span> FormData()\\n      formData.append(<span class=\\\"hljs-string\\\">\'file\'</span>, $file)\\n      formData.append(<span class=\\\"hljs-string\\\">\'uploadUri\'</span>, uploadUri)\\n      uploadImage(formData).then(<span class=\\\"hljs-function\\\"><span class=\\\"hljs-params\\\">res</span> =&gt;</span> {\\n        <span class=\\\"hljs-comment\\\">// 将markdown插入的图片url更换为返回的ul</span>\\n        <span class=\\\"hljs-keyword\\\">this</span>.$refs.md.$img2Url(pos, res.data)\\n      })\\n    }\\n</code></div></pre>\\n<table>\\n<thead>\\n<tr>\\n<th>pos</th>\\n<th>$file</th>\\n<th>this.<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math><semantics><mrow><mi>r</mi><mi>e</mi><mi>f</mi><mi>s</mi><mi mathvariant=\\\"normal\\\">.</mi><mi>m</mi><mi>d</mi><mi mathvariant=\\\"normal\\\">.</mi></mrow><annotation encoding=\\\"application/x-tex\\\">refs.md.</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"strut\\\" style=\\\"height:0.69444em;\\\"></span><span class=\\\"strut bottom\\\" style=\\\"height:0.8888799999999999em;vertical-align:-0.19444em;\\\"></span><span class=\\\"base\\\"><span class=\\\"mord mathit\\\" style=\\\"margin-right:0.02778em;\\\">r</span><span class=\\\"mord mathit\\\">e</span><span class=\\\"mord mathit\\\" style=\\\"margin-right:0.10764em;\\\">f</span><span class=\\\"mord mathit\\\">s</span><span class=\\\"mord mathrm\\\">.</span><span class=\\\"mord mathit\\\">m</span><span class=\\\"mord mathit\\\">d</span><span class=\\\"mord mathrm\\\">.</span></span></span></span>img2Url</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>当前有插入了几张图片</td>\\n<td>文件对象</td>\\n<td>修改markdown源连接为新设置的值</td>\\n</tr>\\n</tbody>\\n</table>\\n<p>更多api文档请自行查看官方文档：<a href=\\\"https://github.com/hinesboy/mavonEditor\\\" target=\\\"_blank\\\">https://github.com/hinesboy/mavonEditor</a></p>\\n<h4><a id=\\\"marked_54\\\"></a>marked</h4>\\n<p>在引入了mavonEditor之后，确实是可以使用markdown编辑器写博客了，但是发现上传上去的是markdown的源代码，那得到的也只是markdown的源内容，那……谁又喜欢看这种东西呢，然后又去百度找解决的办法，发现了marked，该插件能够将markdown的内容转换为HTML格式渲染出来。<br />\\n照例先安装</p>\\n<pre><code class=\\\"lang-\\\">npm install --save marked\\n</code></pre>\\n<p>安装完后在需要使用到的页面引用该插件</p>\\n<pre><div class=\\\"hljs\\\"><code class=\\\"lang-javascript\\\"><span class=\\\"hljs-keyword\\\">import</span> marked <span class=\\\"hljs-keyword\\\">from</span> <span class=\\\"hljs-string\\\">\'marked\'</span>\\n</code></div></pre>\\n<p>然后就可以使用啦，直接调用一个方法即可转换</p>\\n<pre><div class=\\\"hljs\\\"><code class=\\\"lang-javascript\\\"><span class=\\\"hljs-comment\\\">//  将Markdown源内容转换为HTML</span>\\n<span class=\\\"hljs-keyword\\\">this</span>.content = marked(source)\\n</code></div></pre>\\n<p>具体使用方法可以参考<br />\\n官网：<a href=\\\"https://marked.js.org/\\\" target=\\\"_blank\\\">https://marked.js.org/</a><br />\\nGitHub：<a href=\\\"https://github.com/markedjs/marked\\\" target=\\\"_blank\\\">https://github.com/markedjs/marked</a></p>\\n<h4><a id=\\\"highlight_72\\\"></a>highlight</h4>\\n<p>这是已经可以从Markdown转换为HTML来渲染了，但是郁闷的又来了，发现代码没有高亮显示，而且Markdown没有一点样式，非常的难看，这时又只能打开百度去找解决办法咯，就找到了highlight这个插件，这是专门用来给Markdown添加代码高亮的插件，与之相似的还有highlightjs-line-numbers.js这是用来显示行数的，但是我尝试了，好像需要JQuery才能够使用我就放弃了。<br />\\n首先照例先安装</p>\\n<pre><code class=\\\"lang-\\\">npm install --save highlight\\n</code></pre>\\n<p>然后在需要使用到的页面引用</p>\\n<pre><div class=\\\"hljs\\\"><code class=\\\"lang-javascript\\\"><span class=\\\"hljs-comment\\\">// 引入代码高亮插件</span>\\n<span class=\\\"hljs-keyword\\\">import</span> hljs <span class=\\\"hljs-keyword\\\">from</span> <span class=\\\"hljs-string\\\">\'highlight.js\'</span>\\n<span class=\\\"hljs-keyword\\\">import</span> <span class=\\\"hljs-string\\\">\'highlight.js/styles/atom-one-dark.css\'</span>\\n<span class=\\\"hljs-comment\\\">// 导入本地markdown样式</span>\\n<span class=\\\"hljs-keyword\\\">import</span> <span class=\\\"hljs-string\\\">\'../../styles/markdown.css\'</span>\\n</code></div></pre>\\n<p>然后在marked转换格式之前执行一个方法</p>\\n<pre><div class=\\\"hljs\\\"><code class=\\\"lang-javascript\\\"> <span class=\\\"hljs-comment\\\">// 展现经过markdown渲染后的html</span>\\n        marked.setOptions({\\n          <span class=\\\"hljs-attr\\\">renderer</span>: <span class=\\\"hljs-keyword\\\">new</span> marked.Renderer(),\\n          <span class=\\\"hljs-attr\\\">highlight</span>: <span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function</span>(<span class=\\\"hljs-params\\\">code</span>) </span>{\\n            <span class=\\\"hljs-keyword\\\">return</span> hljs.highlightAuto(code).value\\n          },\\n          <span class=\\\"hljs-attr\\\">pedantic</span>: <span class=\\\"hljs-literal\\\">false</span>,\\n          <span class=\\\"hljs-attr\\\">gfm</span>: <span class=\\\"hljs-literal\\\">true</span>,\\n          <span class=\\\"hljs-attr\\\">tables</span>: <span class=\\\"hljs-literal\\\">true</span>,\\n          <span class=\\\"hljs-attr\\\">breaks</span>: <span class=\\\"hljs-literal\\\">false</span>,\\n          <span class=\\\"hljs-attr\\\">sanitize</span>: <span class=\\\"hljs-literal\\\">false</span>,\\n          <span class=\\\"hljs-attr\\\">smartLists</span>: <span class=\\\"hljs-literal\\\">true</span>,\\n          <span class=\\\"hljs-attr\\\">smartypants</span>: <span class=\\\"hljs-literal\\\">false</span>,\\n          <span class=\\\"hljs-attr\\\">xhtml</span>: <span class=\\\"hljs-literal\\\">false</span>\\n        })\\n        <span class=\\\"hljs-keyword\\\">this</span>.blogContent = marked(res.data.blogContent)\\n</code></div></pre>\\n<p>当然我也只用到了这一个地方如果有想了解更多的可以到GitHub上查看源代码<br />\\n<a href=\\\"https://github.com/highlightjs/highlight.js/\\\" target=\\\"_blank\\\">https://github.com/highlightjs/highlight.js/</a></p>\\n<h2><a id=\\\"_107\\\"></a>总结</h2>\\n<p>更换这个Markdown编辑器真的花了我不少时间，确实感觉前端对我来说好难好难，每次出一点小问题就需要好久才能够解决，当然自己做出来了也还是很有成就感的，毕竟是自己做出来的东西。<br />\\n我的个人博客:<a href=\\\"http://oopsw.top:1001\\\" target=\\\"_blank\\\">http://oopsw.top:1001</a></p>\\n\",\"blogGoods\":0,\"blogId\":\"1332742588649615360\",\"blogImage\":\"http://808km.top/blog/img/img/default/1332742519359713280\",\"blogRead\":21,\"blogRemark\":\"更换这个Markdown编辑器真的花了我不少时间，确实感觉前端对我来说好难好难，每次出一点小问题就需要好久才能够解决，当然自己做出来了也还是很有成就感的，毕竟是自己做出来的东西。\",\"blogTitle\":\"vue项目引入markdown\",\"blogType\":15,\"createdTime\":1606585569000,\"typeName\":\"Vue\",\"updateTime\":1607330538000,\"version\":23},\"msg\":\"阅读成功\"}', '119.165.191.132', '2020-12-07 17:26:21', NULL);
INSERT INTO `bl_log` VALUES (2751, '阅读博客', '//blog/read/1331436834413211648', '[1331436834413211648]', 1, NULL, 'PUT', 24, '{\"code\":20000,\"data\":{\"blogCollection\":0,\"blogComment\":0,\"blogContent\":\"<p>在开发中日期最常打交道的东西之一，但是日期又会存在各式各样的格式，常见的情形就是，从数据库取出的日期往往都是时间戳（毫秒数）的形式，这个一般情况下是前端不想要的结果，需要进行处理，那在springboot中比较简单：<br />\\n因为后端传给前端时默认使用jackson转换格式所以我们可以</p>\\n<ol>\\n<li>在application.yml中设置</li>\\n</ol>\\n<pre><div class=\\\"hljs\\\"><code class=\\\"lang-yml\\\"><span class=\\\"hljs-attr\\\">spring:</span>\\n<span class=\\\"hljs-attr\\\">  jackson:</span>\\n<span class=\\\"hljs-attr\\\">    date-format:</span> <span class=\\\"hljs-string\\\">yyyy-MM-dd</span> <span class=\\\"hljs-attr\\\">HH:mm:ss</span>\\n<span class=\\\"hljs-attr\\\">    time-zone:</span> <span class=\\\"hljs-string\\\">GMT+8</span>\\n</code></div></pre>\\n<ol start=\\\"2\\\">\\n<li>在pojo对象上添加@JsonFormat注解</li>\\n</ol>\\n<pre><div class=\\\"hljs\\\"><code class=\\\"lang-java\\\">    <span class=\\\"hljs-meta\\\">@JsonFormat</span>(pattern = <span class=\\\"hljs-string\\\">\\\"yyyy-MM-dd HH:mm:ss\\\"</span>, timezone = <span class=\\\"hljs-string\\\">\\\"GMT+8\\\"</span>)\\n    <span class=\\\"hljs-keyword\\\">private</span> Date createdTime;\\n</code></div></pre>\\n<p>但是我在尝试了这两个方法以及相类似的方法，但是都无效，要么就是格式化无效，直接返回的时间戳，要么就是时间还是相差8个小时，但是格式化有效。</p>\\n<p>这时我看到了另外一篇不一样的博客，随后明白了为什么我的配置没有用，原来是因为我添加拦截器时写的配置类的问题。<br />\\n以下代码是我更改之前的配置类</p>\\n<pre><div class=\\\"hljs\\\"><code class=\\\"lang-java\\\"><span class=\\\"hljs-keyword\\\">package</span> com.wsy.blog.config;\\n\\n<span class=\\\"hljs-keyword\\\">import</span> com.fasterxml.jackson.databind.DeserializationFeature;\\n<span class=\\\"hljs-keyword\\\">import</span> com.fasterxml.jackson.databind.ObjectMapper;\\n<span class=\\\"hljs-keyword\\\">import</span> com.wsy.blog.interceptor.LoginInterceptor;\\n<span class=\\\"hljs-keyword\\\">import</span> org.springframework.context.annotation.Bean;\\n<span class=\\\"hljs-keyword\\\">import</span> org.springframework.context.annotation.Configuration;\\n<span class=\\\"hljs-keyword\\\">import</span> org.springframework.http.converter.HttpMessageConverter;\\n<span class=\\\"hljs-keyword\\\">import</span> org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;\\n<span class=\\\"hljs-keyword\\\">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistry;\\n<span class=\\\"hljs-keyword\\\">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport;\\n\\n<span class=\\\"hljs-keyword\\\">import</span> java.text.SimpleDateFormat;\\n<span class=\\\"hljs-keyword\\\">import</span> java.util.List;\\n\\n<span class=\\\"hljs-comment\\\">/**\\n * <span class=\\\"hljs-doctag\\\">@Author</span>: wsy\\n * <span class=\\\"hljs-doctag\\\">@Date</span>: 2020/8/10 11:34\\n */</span>\\n<span class=\\\"hljs-meta\\\">@Configuration</span>\\n<span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-class\\\"><span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title\\\">InterceptorConfig</span> <span class=\\\"hljs-keyword\\\">extends</span> <span class=\\\"hljs-title\\\">WebMvcConfigurationSupport</span> </span>{\\n\\n    <span class=\\\"hljs-meta\\\">@Bean</span>\\n    <span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">public</span> LoginInterceptor <span class=\\\"hljs-title\\\">getLoginInterceptor</span><span class=\\\"hljs-params\\\">()</span> </span>{\\n        <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-keyword\\\">new</span> LoginInterceptor();\\n    }\\n\\n    <span class=\\\"hljs-comment\\\">/**\\n     * 添加拦截器\\n     * <span class=\\\"hljs-doctag\\\">@param</span> registry  拦截器注册\\n     */</span>\\n    <span class=\\\"hljs-meta\\\">@Override</span>\\n    <span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">protected</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title\\\">addInterceptors</span><span class=\\\"hljs-params\\\">(InterceptorRegistry registry)</span> </span>{\\n        <span class=\\\"hljs-comment\\\">// TODO Auto-generated method stub</span>\\n        registry.addInterceptor(getLoginInterceptor()).addPathPatterns(<span class=\\\"hljs-string\\\">\\\"/**\\\"</span>)\\n                .excludePathPatterns(<span class=\\\"hljs-string\\\">\\\"/*/login\\\"</span>);;\\n        <span class=\\\"hljs-keyword\\\">super</span>.addInterceptors(registry);\\n    }\\n}\\n</code></div></pre>\\n<p>这里大家注意，看看自己的代码有没有因为添加拦截器而创建了一个配置类，该类继承了<code>WebMvcConfigurationSupport</code>，就是他！以前是用 <code>WebMvcConfigurerAdapter</code> ，springboot 2.0 建议使用 <code>WebMvcConfigurationSupport</code> 。但是在添加拦截器并继承 <code>WebMvcConfigurationSupport</code> 后会覆盖<code>@EnableAutoConfiguration</code>关于<code>WebMvcAutoConfiguration</code>的配置！从而导致所有的Date返回都变成时间戳！<br />\\n可以采用另外一种方式，在你继承<code>WebMvcConfigurationSupport</code>的子类中添加日期转换的bean<br />\\n以下是我更改后的代码</p>\\n<pre><div class=\\\"hljs\\\"><code class=\\\"lang-java\\\"><span class=\\\"hljs-keyword\\\">package</span> com.wsy.blog.config;\\n\\n<span class=\\\"hljs-keyword\\\">import</span> com.fasterxml.jackson.databind.DeserializationFeature;\\n<span class=\\\"hljs-keyword\\\">import</span> com.fasterxml.jackson.databind.ObjectMapper;\\n<span class=\\\"hljs-keyword\\\">import</span> com.wsy.blog.interceptor.LoginInterceptor;\\n<span class=\\\"hljs-keyword\\\">import</span> org.springframework.context.annotation.Bean;\\n<span class=\\\"hljs-keyword\\\">import</span> org.springframework.context.annotation.Configuration;\\n<span class=\\\"hljs-keyword\\\">import</span> org.springframework.http.converter.HttpMessageConverter;\\n<span class=\\\"hljs-keyword\\\">import</span> org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;\\n<span class=\\\"hljs-keyword\\\">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistry;\\n<span class=\\\"hljs-keyword\\\">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport;\\n\\n<span class=\\\"hljs-keyword\\\">import</span> java.text.SimpleDateFormat;\\n<span class=\\\"hljs-keyword\\\">import</span> java.util.List;\\n\\n<span class=\\\"hljs-comment\\\">/**\\n * <span class=\\\"hljs-doctag\\\">@Author</span>: wsy\\n * <span class=\\\"hljs-doctag\\\">@Date</span>: 2020/8/10 11:34\\n */</span>\\n<span class=\\\"hljs-meta\\\">@Configuration</span>\\n<span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-class\\\"><span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title\\\">InterceptorConfig</span> <span class=\\\"hljs-keyword\\\">extends</span> <span class=\\\"hljs-title\\\">WebMvcConfigurationSupport</span> </span>{\\n\\n    <span class=\\\"hljs-meta\\\">@Bean</span>\\n    <span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">public</span> LoginInterceptor <span class=\\\"hljs-title\\\">getLoginInterceptor</span><span class=\\\"hljs-params\\\">()</span> </span>{\\n        <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-keyword\\\">new</span> LoginInterceptor();\\n    }\\n\\n    <span class=\\\"hljs-comment\\\">/**\\n     * 定义时间格式转换器\\n     * <span class=\\\"hljs-doctag\\\">@return</span>  MappingJackson2HttpMessageConverter\\n     */</span>\\n    <span class=\\\"hljs-meta\\\">@Bean</span>\\n    <span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">public</span> MappingJackson2HttpMessageConverter <span class=\\\"hljs-title\\\">jackson2HttpMessageConverter</span><span class=\\\"hljs-params\\\">()</span> </span>{\\n        MappingJackson2HttpMessageConverter converter = <span class=\\\"hljs-keyword\\\">new</span> MappingJackson2HttpMessageConverter();\\n        ObjectMapper mapper = <span class=\\\"hljs-keyword\\\">new</span> ObjectMapper();\\n        mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, <span class=\\\"hljs-keyword\\\">false</span>);\\n        mapper.setDateFormat(<span class=\\\"hljs-keyword\\\">new</span> SimpleDateFormat(<span class=\\\"hljs-string\\\">\\\"yyyy-MM-dd HH:mm:ss\\\"</span>));\\n        converter.setObjectMapper(mapper);\\n        <span class=\\\"hljs-keyword\\\">return</span> converter;\\n    }\\n\\n    <span class=\\\"hljs-comment\\\">/**\\n     * 添加转换器\\n     * <span class=\\\"hljs-doctag\\\">@param</span> converters    converters\\n     */</span>\\n    <span class=\\\"hljs-meta\\\">@Override</span>\\n    <span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title\\\">configureMessageConverters</span><span class=\\\"hljs-params\\\">(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters)</span> </span>{\\n        <span class=\\\"hljs-comment\\\">//将我们定义的时间格式转换器添加到转换器列表中,</span>\\n        <span class=\\\"hljs-comment\\\">//这样jackson格式化时候但凡遇到Date类型就会转换成我们定义的格式</span>\\n        converters.add(jackson2HttpMessageConverter());\\n    }\\n\\n    <span class=\\\"hljs-comment\\\">/**\\n     * 添加拦截器\\n     * <span class=\\\"hljs-doctag\\\">@param</span> registry  拦截器注册\\n     */</span>\\n    <span class=\\\"hljs-meta\\\">@Override</span>\\n    <span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">protected</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title\\\">addInterceptors</span><span class=\\\"hljs-params\\\">(InterceptorRegistry registry)</span> </span>{\\n        <span class=\\\"hljs-comment\\\">// TODO Auto-generated method stub</span>\\n        registry.addInterceptor(getLoginInterceptor()).addPathPatterns(<span class=\\\"hljs-string\\\">\\\"/**\\\"</span>)\\n                .excludePathPatterns(<span class=\\\"hljs-string\\\">\\\"/*/login\\\"</span>);;\\n        <span class=\\\"hljs-keyword\\\">super</span>.addInterceptors(registry);\\n    }\\n}\\n</code></div></pre>\\n<p>感谢博主的分享经验<br />\\n参考博客：<a href=\\\"https://blog.csdn.net/qq_34975710/article/details/84872489\\\" target=\\\"_blank\\\">https://blog.csdn.net/qq_34975710/article/details/84872489</a></p>\\n\",\"blogGoods\":1,\"blogId\":\"1331436834413211648\",\"blogImage\":\"http://808km.top/blog/img/default.jpg\",\"blogRead\":69,\"blogTitle\":\"springboot 后端传给前端相差8小时\",\"blogType\":9,\"createdTime\":1606274253000,\"typeName\":\"Springboot\",\"updateTime\":1607330463000,\"version\":37},\"msg\":\"阅读成功\"}', '180.163.220.3', '2020-12-07 17:26:26', NULL);
INSERT INTO `bl_log` VALUES (2752, '阅读博客', '//blog/read/1333708609683533824', '[1333708609683533824]', 1, NULL, 'PUT', 25, '{\"code\":20000,\"data\":{\"blogCollection\":1,\"blogComment\":0,\"blogContent\":\"<h1><a id=\\\"_0\\\"></a>前言</h1>\\n<p>今天在给博客更新，将session存到redis中持久化存储，正常操作是没问题的，但是后来尝试发现，在我输入的密码是错误的时候，他也创建了session，经过我的一番从尾到头的debug。。。。<br />\\n复杂的debug过程就不贴出来了，放出问题的根源<br />\\n在登陆时，会访问到我用来记录日志的切面,而我的记录日志方法中有一个需要获取到当前登录的用户的信息，来完善日志的字段</p>\\n<blockquote>\\n<p><img src=\\\"http://808km.top/blog/img/img/blogImg/1333703986787631104\\\" alt=\\\"image.png\\\" /><br />\\n以下是工具类中的原方法：<br />\\n<img src=\\\"http://808km.top/blog/img/img/blogImg/1333704236625543168\\\" alt=\\\"image.png\\\" /><br />\\n以下是修改后的方法<br />\\n<img src=\\\"http://808km.top/blog/img/img/blogImg/1333704399599419392\\\" alt=\\\"image.png\\\" /><br />\\n这就是问题的根源，因为在我登录的时候，要记录日志，然后去调用工具类，工具类去获取session，如果没有getSession(false)的话，就会判断session是否存在，如果不存在的话就会自动创建session，这就是为什么明明密码错了还会创建session的原因</p>\\n</blockquote>\\n\",\"blogGoods\":1,\"blogId\":\"1333708609683533824\",\"blogImage\":\"http://808km.top/blog/img/default.jpg\",\"blogRead\":36,\"blogRemark\":\"shiro+redis整合实现session持久化登陆失败时也会生成session问题\",\"blogTitle\":\"shiro+redis整合实现session持久化登陆失败时也会生成session问题\",\"blogType\":6,\"createdTime\":1606815886000,\"typeName\":\"Java\",\"updateTime\":1607188552000,\"version\":3},\"msg\":\"阅读成功\"}', '119.165.191.132', '2020-12-07 17:30:26', NULL);
INSERT INTO `bl_log` VALUES (2753, '阅读博客', '//blog/read/1331436834413211648', '[1331436834413211648]', 1, NULL, 'PUT', 64, '{\"code\":20000,\"data\":{\"blogCollection\":0,\"blogComment\":0,\"blogContent\":\"<p>在开发中日期最常打交道的东西之一，但是日期又会存在各式各样的格式，常见的情形就是，从数据库取出的日期往往都是时间戳（毫秒数）的形式，这个一般情况下是前端不想要的结果，需要进行处理，那在springboot中比较简单：<br />\\n因为后端传给前端时默认使用jackson转换格式所以我们可以</p>\\n<ol>\\n<li>在application.yml中设置</li>\\n</ol>\\n<pre><div class=\\\"hljs\\\"><code class=\\\"lang-yml\\\"><span class=\\\"hljs-attr\\\">spring:</span>\\n<span class=\\\"hljs-attr\\\">  jackson:</span>\\n<span class=\\\"hljs-attr\\\">    date-format:</span> <span class=\\\"hljs-string\\\">yyyy-MM-dd</span> <span class=\\\"hljs-attr\\\">HH:mm:ss</span>\\n<span class=\\\"hljs-attr\\\">    time-zone:</span> <span class=\\\"hljs-string\\\">GMT+8</span>\\n</code></div></pre>\\n<ol start=\\\"2\\\">\\n<li>在pojo对象上添加@JsonFormat注解</li>\\n</ol>\\n<pre><div class=\\\"hljs\\\"><code class=\\\"lang-java\\\">    <span class=\\\"hljs-meta\\\">@JsonFormat</span>(pattern = <span class=\\\"hljs-string\\\">\\\"yyyy-MM-dd HH:mm:ss\\\"</span>, timezone = <span class=\\\"hljs-string\\\">\\\"GMT+8\\\"</span>)\\n    <span class=\\\"hljs-keyword\\\">private</span> Date createdTime;\\n</code></div></pre>\\n<p>但是我在尝试了这两个方法以及相类似的方法，但是都无效，要么就是格式化无效，直接返回的时间戳，要么就是时间还是相差8个小时，但是格式化有效。</p>\\n<p>这时我看到了另外一篇不一样的博客，随后明白了为什么我的配置没有用，原来是因为我添加拦截器时写的配置类的问题。<br />\\n以下代码是我更改之前的配置类</p>\\n<pre><div class=\\\"hljs\\\"><code class=\\\"lang-java\\\"><span class=\\\"hljs-keyword\\\">package</span> com.wsy.blog.config;\\n\\n<span class=\\\"hljs-keyword\\\">import</span> com.fasterxml.jackson.databind.DeserializationFeature;\\n<span class=\\\"hljs-keyword\\\">import</span> com.fasterxml.jackson.databind.ObjectMapper;\\n<span class=\\\"hljs-keyword\\\">import</span> com.wsy.blog.interceptor.LoginInterceptor;\\n<span class=\\\"hljs-keyword\\\">import</span> org.springframework.context.annotation.Bean;\\n<span class=\\\"hljs-keyword\\\">import</span> org.springframework.context.annotation.Configuration;\\n<span class=\\\"hljs-keyword\\\">import</span> org.springframework.http.converter.HttpMessageConverter;\\n<span class=\\\"hljs-keyword\\\">import</span> org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;\\n<span class=\\\"hljs-keyword\\\">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistry;\\n<span class=\\\"hljs-keyword\\\">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport;\\n\\n<span class=\\\"hljs-keyword\\\">import</span> java.text.SimpleDateFormat;\\n<span class=\\\"hljs-keyword\\\">import</span> java.util.List;\\n\\n<span class=\\\"hljs-comment\\\">/**\\n * <span class=\\\"hljs-doctag\\\">@Author</span>: wsy\\n * <span class=\\\"hljs-doctag\\\">@Date</span>: 2020/8/10 11:34\\n */</span>\\n<span class=\\\"hljs-meta\\\">@Configuration</span>\\n<span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-class\\\"><span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title\\\">InterceptorConfig</span> <span class=\\\"hljs-keyword\\\">extends</span> <span class=\\\"hljs-title\\\">WebMvcConfigurationSupport</span> </span>{\\n\\n    <span class=\\\"hljs-meta\\\">@Bean</span>\\n    <span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">public</span> LoginInterceptor <span class=\\\"hljs-title\\\">getLoginInterceptor</span><span class=\\\"hljs-params\\\">()</span> </span>{\\n        <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-keyword\\\">new</span> LoginInterceptor();\\n    }\\n\\n    <span class=\\\"hljs-comment\\\">/**\\n     * 添加拦截器\\n     * <span class=\\\"hljs-doctag\\\">@param</span> registry  拦截器注册\\n     */</span>\\n    <span class=\\\"hljs-meta\\\">@Override</span>\\n    <span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">protected</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title\\\">addInterceptors</span><span class=\\\"hljs-params\\\">(InterceptorRegistry registry)</span> </span>{\\n        <span class=\\\"hljs-comment\\\">// TODO Auto-generated method stub</span>\\n        registry.addInterceptor(getLoginInterceptor()).addPathPatterns(<span class=\\\"hljs-string\\\">\\\"/**\\\"</span>)\\n                .excludePathPatterns(<span class=\\\"hljs-string\\\">\\\"/*/login\\\"</span>);;\\n        <span class=\\\"hljs-keyword\\\">super</span>.addInterceptors(registry);\\n    }\\n}\\n</code></div></pre>\\n<p>这里大家注意，看看自己的代码有没有因为添加拦截器而创建了一个配置类，该类继承了<code>WebMvcConfigurationSupport</code>，就是他！以前是用 <code>WebMvcConfigurerAdapter</code> ，springboot 2.0 建议使用 <code>WebMvcConfigurationSupport</code> 。但是在添加拦截器并继承 <code>WebMvcConfigurationSupport</code> 后会覆盖<code>@EnableAutoConfiguration</code>关于<code>WebMvcAutoConfiguration</code>的配置！从而导致所有的Date返回都变成时间戳！<br />\\n可以采用另外一种方式，在你继承<code>WebMvcConfigurationSupport</code>的子类中添加日期转换的bean<br />\\n以下是我更改后的代码</p>\\n<pre><div class=\\\"hljs\\\"><code class=\\\"lang-java\\\"><span class=\\\"hljs-keyword\\\">package</span> com.wsy.blog.config;\\n\\n<span class=\\\"hljs-keyword\\\">import</span> com.fasterxml.jackson.databind.DeserializationFeature;\\n<span class=\\\"hljs-keyword\\\">import</span> com.fasterxml.jackson.databind.ObjectMapper;\\n<span class=\\\"hljs-keyword\\\">import</span> com.wsy.blog.interceptor.LoginInterceptor;\\n<span class=\\\"hljs-keyword\\\">import</span> org.springframework.context.annotation.Bean;\\n<span class=\\\"hljs-keyword\\\">import</span> org.springframework.context.annotation.Configuration;\\n<span class=\\\"hljs-keyword\\\">import</span> org.springframework.http.converter.HttpMessageConverter;\\n<span class=\\\"hljs-keyword\\\">import</span> org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;\\n<span class=\\\"hljs-keyword\\\">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistry;\\n<span class=\\\"hljs-keyword\\\">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport;\\n\\n<span class=\\\"hljs-keyword\\\">import</span> java.text.SimpleDateFormat;\\n<span class=\\\"hljs-keyword\\\">import</span> java.util.List;\\n\\n<span class=\\\"hljs-comment\\\">/**\\n * <span class=\\\"hljs-doctag\\\">@Author</span>: wsy\\n * <span class=\\\"hljs-doctag\\\">@Date</span>: 2020/8/10 11:34\\n */</span>\\n<span class=\\\"hljs-meta\\\">@Configuration</span>\\n<span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-class\\\"><span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title\\\">InterceptorConfig</span> <span class=\\\"hljs-keyword\\\">extends</span> <span class=\\\"hljs-title\\\">WebMvcConfigurationSupport</span> </span>{\\n\\n    <span class=\\\"hljs-meta\\\">@Bean</span>\\n    <span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">public</span> LoginInterceptor <span class=\\\"hljs-title\\\">getLoginInterceptor</span><span class=\\\"hljs-params\\\">()</span> </span>{\\n        <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-keyword\\\">new</span> LoginInterceptor();\\n    }\\n\\n    <span class=\\\"hljs-comment\\\">/**\\n     * 定义时间格式转换器\\n     * <span class=\\\"hljs-doctag\\\">@return</span>  MappingJackson2HttpMessageConverter\\n     */</span>\\n    <span class=\\\"hljs-meta\\\">@Bean</span>\\n    <span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">public</span> MappingJackson2HttpMessageConverter <span class=\\\"hljs-title\\\">jackson2HttpMessageConverter</span><span class=\\\"hljs-params\\\">()</span> </span>{\\n        MappingJackson2HttpMessageConverter converter = <span class=\\\"hljs-keyword\\\">new</span> MappingJackson2HttpMessageConverter();\\n        ObjectMapper mapper = <span class=\\\"hljs-keyword\\\">new</span> ObjectMapper();\\n        mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, <span class=\\\"hljs-keyword\\\">false</span>);\\n        mapper.setDateFormat(<span class=\\\"hljs-keyword\\\">new</span> SimpleDateFormat(<span class=\\\"hljs-string\\\">\\\"yyyy-MM-dd HH:mm:ss\\\"</span>));\\n        converter.setObjectMapper(mapper);\\n        <span class=\\\"hljs-keyword\\\">return</span> converter;\\n    }\\n\\n    <span class=\\\"hljs-comment\\\">/**\\n     * 添加转换器\\n     * <span class=\\\"hljs-doctag\\\">@param</span> converters    converters\\n     */</span>\\n    <span class=\\\"hljs-meta\\\">@Override</span>\\n    <span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title\\\">configureMessageConverters</span><span class=\\\"hljs-params\\\">(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters)</span> </span>{\\n        <span class=\\\"hljs-comment\\\">//将我们定义的时间格式转换器添加到转换器列表中,</span>\\n        <span class=\\\"hljs-comment\\\">//这样jackson格式化时候但凡遇到Date类型就会转换成我们定义的格式</span>\\n        converters.add(jackson2HttpMessageConverter());\\n    }\\n\\n    <span class=\\\"hljs-comment\\\">/**\\n     * 添加拦截器\\n     * <span class=\\\"hljs-doctag\\\">@param</span> registry  拦截器注册\\n     */</span>\\n    <span class=\\\"hljs-meta\\\">@Override</span>\\n    <span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">protected</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title\\\">addInterceptors</span><span class=\\\"hljs-params\\\">(InterceptorRegistry registry)</span> </span>{\\n        <span class=\\\"hljs-comment\\\">// TODO Auto-generated method stub</span>\\n        registry.addInterceptor(getLoginInterceptor()).addPathPatterns(<span class=\\\"hljs-string\\\">\\\"/**\\\"</span>)\\n                .excludePathPatterns(<span class=\\\"hljs-string\\\">\\\"/*/login\\\"</span>);;\\n        <span class=\\\"hljs-keyword\\\">super</span>.addInterceptors(registry);\\n    }\\n}\\n</code></div></pre>\\n<p>感谢博主的分享经验<br />\\n参考博客：<a href=\\\"https://blog.csdn.net/qq_34975710/article/details/84872489\\\" target=\\\"_blank\\\">https://blog.csdn.net/qq_34975710/article/details/84872489</a></p>\\n\",\"blogGoods\":1,\"blogId\":\"1331436834413211648\",\"blogImage\":\"http://808km.top/blog/img/default.jpg\",\"blogRead\":70,\"blogTitle\":\"springboot 后端传给前端相差8小时\",\"blogType\":9,\"createdTime\":1606274253000,\"typeName\":\"Springboot\",\"updateTime\":1607333185000,\"version\":37},\"msg\":\"阅读成功\"}', '119.165.191.132', '2020-12-07 17:39:10', NULL);
INSERT INTO `bl_log` VALUES (2754, '阅读博客', '//blog/read/1332742588649615360', '[1332742588649615360]', 1, NULL, 'PUT', 37, '{\"code\":20000,\"data\":{\"blogCollection\":0,\"blogComment\":0,\"blogContent\":\"<h2><a id=\\\"_0\\\"></a>前言</h2>\\n<p>咳咳，终于终于终于将我的博客项目引入了<strong>markdown</strong>了，之前博客使用的是富文本编辑器，因为最近我都是使用的<strong>markdown</strong>做笔记和写博客，而自己的项目博客是个富文本编辑器这让我很不舒服，所以花了一整个晚上的时间把我的博客项目换成了<strong>markdown</strong>编辑器，让我先用这个<strong>markdown</strong>编辑器写一个博客试试哈哈哈哈！</p>\\n<h2><a id=\\\"_2\\\"></a>操作步骤</h2>\\n<h3><a id=\\\"markdown_3\\\"></a>引入markdown相关插件</h3>\\n<h4><a id=\\\"mavonEditor_4\\\"></a>mavonEditor</h4>\\n<p>我现在博客使用的markdown编辑器是使用的是mavonEditor<br />\\n我们需要使用它的话首先需要安装</p>\\n<pre><code class=\\\"lang-\\\">npm install mavon-editor --save\\n</code></pre>\\n<p>然后我们在main.js中全局引用它</p>\\n<pre><div class=\\\"hljs\\\"><code class=\\\"lang-javascript\\\"><span class=\\\"hljs-comment\\\">// 引入markdown组件</span>\\n<span class=\\\"hljs-keyword\\\">import</span> Vue <span class=\\\"hljs-keyword\\\">from</span> <span class=\\\"hljs-string\\\">\'vue\'</span>\\n<span class=\\\"hljs-keyword\\\">import</span> mavonEditor <span class=\\\"hljs-keyword\\\">from</span> <span class=\\\"hljs-string\\\">\'mavon-editor\'</span>\\n<span class=\\\"hljs-keyword\\\">import</span> <span class=\\\"hljs-string\\\">\'mavon-editor/dist/css/index.css\'</span>\\n\\nVue.use(mavonEditor)\\n\\n<span class=\\\"hljs-keyword\\\">new</span> Vue({\\n  <span class=\\\"hljs-attr\\\">el</span>: <span class=\\\"hljs-string\\\">\'#app\'</span>,\\n  router,\\n  store,\\n  <span class=\\\"hljs-attr\\\">render</span>: <span class=\\\"hljs-function\\\"><span class=\\\"hljs-params\\\">h</span> =&gt;</span> h(App)\\n})\\n</code></div></pre>\\n<p>随后我们便可以在项目中引用该组件,value绑定的是markdown的源内容</p>\\n<pre><div class=\\\"hljs\\\"><code class=\\\"lang-html\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span> <span class=\\\"hljs-attr\\\">id</span>=<span class=\\\"hljs-string\\\">\\\"main\\\"</span>&gt;</span>\\n    <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">mavon-editor</span> <span class=\\\"hljs-attr\\\">v-model</span>=<span class=\\\"hljs-string\\\">\\\"value\\\"</span>/&gt;</span>\\n<span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n</code></div></pre>\\n<p>markdown中的图片上传</p>\\n<pre><div class=\\\"hljs\\\"><code class=\\\"lang-javascript\\\"><span class=\\\"hljs-comment\\\">// 图片上传</span>\\n    uploadImg(pos, $file) {\\n      <span class=\\\"hljs-comment\\\">// 定义上传uri</span>\\n      <span class=\\\"hljs-keyword\\\">const</span> uploadUri = <span class=\\\"hljs-string\\\">\'img/blogImg/\'</span>\\n      <span class=\\\"hljs-comment\\\">// 定义上传对象</span>\\n      <span class=\\\"hljs-keyword\\\">var</span> formData = <span class=\\\"hljs-keyword\\\">new</span> FormData()\\n      formData.append(<span class=\\\"hljs-string\\\">\'file\'</span>, $file)\\n      formData.append(<span class=\\\"hljs-string\\\">\'uploadUri\'</span>, uploadUri)\\n      uploadImage(formData).then(<span class=\\\"hljs-function\\\"><span class=\\\"hljs-params\\\">res</span> =&gt;</span> {\\n        <span class=\\\"hljs-comment\\\">// 将markdown插入的图片url更换为返回的ul</span>\\n        <span class=\\\"hljs-keyword\\\">this</span>.$refs.md.$img2Url(pos, res.data)\\n      })\\n    }\\n</code></div></pre>\\n<table>\\n<thead>\\n<tr>\\n<th>pos</th>\\n<th>$file</th>\\n<th>this.<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math><semantics><mrow><mi>r</mi><mi>e</mi><mi>f</mi><mi>s</mi><mi mathvariant=\\\"normal\\\">.</mi><mi>m</mi><mi>d</mi><mi mathvariant=\\\"normal\\\">.</mi></mrow><annotation encoding=\\\"application/x-tex\\\">refs.md.</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"strut\\\" style=\\\"height:0.69444em;\\\"></span><span class=\\\"strut bottom\\\" style=\\\"height:0.8888799999999999em;vertical-align:-0.19444em;\\\"></span><span class=\\\"base\\\"><span class=\\\"mord mathit\\\" style=\\\"margin-right:0.02778em;\\\">r</span><span class=\\\"mord mathit\\\">e</span><span class=\\\"mord mathit\\\" style=\\\"margin-right:0.10764em;\\\">f</span><span class=\\\"mord mathit\\\">s</span><span class=\\\"mord mathrm\\\">.</span><span class=\\\"mord mathit\\\">m</span><span class=\\\"mord mathit\\\">d</span><span class=\\\"mord mathrm\\\">.</span></span></span></span>img2Url</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>当前有插入了几张图片</td>\\n<td>文件对象</td>\\n<td>修改markdown源连接为新设置的值</td>\\n</tr>\\n</tbody>\\n</table>\\n<p>更多api文档请自行查看官方文档：<a href=\\\"https://github.com/hinesboy/mavonEditor\\\" target=\\\"_blank\\\">https://github.com/hinesboy/mavonEditor</a></p>\\n<h4><a id=\\\"marked_54\\\"></a>marked</h4>\\n<p>在引入了mavonEditor之后，确实是可以使用markdown编辑器写博客了，但是发现上传上去的是markdown的源代码，那得到的也只是markdown的源内容，那……谁又喜欢看这种东西呢，然后又去百度找解决的办法，发现了marked，该插件能够将markdown的内容转换为HTML格式渲染出来。<br />\\n照例先安装</p>\\n<pre><code class=\\\"lang-\\\">npm install --save marked\\n</code></pre>\\n<p>安装完后在需要使用到的页面引用该插件</p>\\n<pre><div class=\\\"hljs\\\"><code class=\\\"lang-javascript\\\"><span class=\\\"hljs-keyword\\\">import</span> marked <span class=\\\"hljs-keyword\\\">from</span> <span class=\\\"hljs-string\\\">\'marked\'</span>\\n</code></div></pre>\\n<p>然后就可以使用啦，直接调用一个方法即可转换</p>\\n<pre><div class=\\\"hljs\\\"><code class=\\\"lang-javascript\\\"><span class=\\\"hljs-comment\\\">//  将Markdown源内容转换为HTML</span>\\n<span class=\\\"hljs-keyword\\\">this</span>.content = marked(source)\\n</code></div></pre>\\n<p>具体使用方法可以参考<br />\\n官网：<a href=\\\"https://marked.js.org/\\\" target=\\\"_blank\\\">https://marked.js.org/</a><br />\\nGitHub：<a href=\\\"https://github.com/markedjs/marked\\\" target=\\\"_blank\\\">https://github.com/markedjs/marked</a></p>\\n<h4><a id=\\\"highlight_72\\\"></a>highlight</h4>\\n<p>这是已经可以从Markdown转换为HTML来渲染了，但是郁闷的又来了，发现代码没有高亮显示，而且Markdown没有一点样式，非常的难看，这时又只能打开百度去找解决办法咯，就找到了highlight这个插件，这是专门用来给Markdown添加代码高亮的插件，与之相似的还有highlightjs-line-numbers.js这是用来显示行数的，但是我尝试了，好像需要JQuery才能够使用我就放弃了。<br />\\n首先照例先安装</p>\\n<pre><code class=\\\"lang-\\\">npm install --save highlight\\n</code></pre>\\n<p>然后在需要使用到的页面引用</p>\\n<pre><div class=\\\"hljs\\\"><code class=\\\"lang-javascript\\\"><span class=\\\"hljs-comment\\\">// 引入代码高亮插件</span>\\n<span class=\\\"hljs-keyword\\\">import</span> hljs <span class=\\\"hljs-keyword\\\">from</span> <span class=\\\"hljs-string\\\">\'highlight.js\'</span>\\n<span class=\\\"hljs-keyword\\\">import</span> <span class=\\\"hljs-string\\\">\'highlight.js/styles/atom-one-dark.css\'</span>\\n<span class=\\\"hljs-comment\\\">// 导入本地markdown样式</span>\\n<span class=\\\"hljs-keyword\\\">import</span> <span class=\\\"hljs-string\\\">\'../../styles/markdown.css\'</span>\\n</code></div></pre>\\n<p>然后在marked转换格式之前执行一个方法</p>\\n<pre><div class=\\\"hljs\\\"><code class=\\\"lang-javascript\\\"> <span class=\\\"hljs-comment\\\">// 展现经过markdown渲染后的html</span>\\n        marked.setOptions({\\n          <span class=\\\"hljs-attr\\\">renderer</span>: <span class=\\\"hljs-keyword\\\">new</span> marked.Renderer(),\\n          <span class=\\\"hljs-attr\\\">highlight</span>: <span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function</span>(<span class=\\\"hljs-params\\\">code</span>) </span>{\\n            <span class=\\\"hljs-keyword\\\">return</span> hljs.highlightAuto(code).value\\n          },\\n          <span class=\\\"hljs-attr\\\">pedantic</span>: <span class=\\\"hljs-literal\\\">false</span>,\\n          <span class=\\\"hljs-attr\\\">gfm</span>: <span class=\\\"hljs-literal\\\">true</span>,\\n          <span class=\\\"hljs-attr\\\">tables</span>: <span class=\\\"hljs-literal\\\">true</span>,\\n          <span class=\\\"hljs-attr\\\">breaks</span>: <span class=\\\"hljs-literal\\\">false</span>,\\n          <span class=\\\"hljs-attr\\\">sanitize</span>: <span class=\\\"hljs-literal\\\">false</span>,\\n          <span class=\\\"hljs-attr\\\">smartLists</span>: <span class=\\\"hljs-literal\\\">true</span>,\\n          <span class=\\\"hljs-attr\\\">smartypants</span>: <span class=\\\"hljs-literal\\\">false</span>,\\n          <span class=\\\"hljs-attr\\\">xhtml</span>: <span class=\\\"hljs-literal\\\">false</span>\\n        })\\n        <span class=\\\"hljs-keyword\\\">this</span>.blogContent = marked(res.data.blogContent)\\n</code></div></pre>\\n<p>当然我也只用到了这一个地方如果有想了解更多的可以到GitHub上查看源代码<br />\\n<a href=\\\"https://github.com/highlightjs/highlight.js/\\\" target=\\\"_blank\\\">https://github.com/highlightjs/highlight.js/</a></p>\\n<h2><a id=\\\"_107\\\"></a>总结</h2>\\n<p>更换这个Markdown编辑器真的花了我不少时间，确实感觉前端对我来说好难好难，每次出一点小问题就需要好久才能够解决，当然自己做出来了也还是很有成就感的，毕竟是自己做出来的东西。<br />\\n我的个人博客:<a href=\\\"http://oopsw.top:1001\\\" target=\\\"_blank\\\">http://oopsw.top:1001</a></p>\\n\",\"blogGoods\":0,\"blogId\":\"1332742588649615360\",\"blogImage\":\"http://808km.top/blog/img/img/default/1332742519359713280\",\"blogRead\":22,\"blogRemark\":\"更换这个Markdown编辑器真的花了我不少时间，确实感觉前端对我来说好难好难，每次出一点小问题就需要好久才能够解决，当然自己做出来了也还是很有成就感的，毕竟是自己做出来的东西。\",\"blogTitle\":\"vue项目引入markdown\",\"blogType\":15,\"createdTime\":1606585569000,\"typeName\":\"Vue\",\"updateTime\":1607333180000,\"version\":23},\"msg\":\"阅读成功\"}', '119.165.191.132', '2020-12-07 17:43:39', NULL);
INSERT INTO `bl_log` VALUES (2755, '阅读博客', '//blog/read/1333708609683533824', '[1333708609683533824]', 1, NULL, 'PUT', 20, '{\"code\":20000,\"data\":{\"blogCollection\":1,\"blogComment\":0,\"blogContent\":\"<h1><a id=\\\"_0\\\"></a>前言</h1>\\n<p>今天在给博客更新，将session存到redis中持久化存储，正常操作是没问题的，但是后来尝试发现，在我输入的密码是错误的时候，他也创建了session，经过我的一番从尾到头的debug。。。。<br />\\n复杂的debug过程就不贴出来了，放出问题的根源<br />\\n在登陆时，会访问到我用来记录日志的切面,而我的记录日志方法中有一个需要获取到当前登录的用户的信息，来完善日志的字段</p>\\n<blockquote>\\n<p><img src=\\\"http://808km.top/blog/img/img/blogImg/1333703986787631104\\\" alt=\\\"image.png\\\" /><br />\\n以下是工具类中的原方法：<br />\\n<img src=\\\"http://808km.top/blog/img/img/blogImg/1333704236625543168\\\" alt=\\\"image.png\\\" /><br />\\n以下是修改后的方法<br />\\n<img src=\\\"http://808km.top/blog/img/img/blogImg/1333704399599419392\\\" alt=\\\"image.png\\\" /><br />\\n这就是问题的根源，因为在我登录的时候，要记录日志，然后去调用工具类，工具类去获取session，如果没有getSession(false)的话，就会判断session是否存在，如果不存在的话就会自动创建session，这就是为什么明明密码错了还会创建session的原因</p>\\n</blockquote>\\n\",\"blogGoods\":1,\"blogId\":\"1333708609683533824\",\"blogImage\":\"http://808km.top/blog/img/default.jpg\",\"blogRead\":37,\"blogRemark\":\"shiro+redis整合实现session持久化登陆失败时也会生成session问题\",\"blogTitle\":\"shiro+redis整合实现session持久化登陆失败时也会生成session问题\",\"blogType\":6,\"createdTime\":1606815886000,\"typeName\":\"Java\",\"updateTime\":1607333425000,\"version\":3},\"msg\":\"阅读成功\"}', '119.165.191.132', '2020-12-07 17:52:01', NULL);
INSERT INTO `bl_log` VALUES (2756, '阅读关于我的', '//about/read', '[]', 1, NULL, 'PUT', 19, '{\"code\":20000,\"data\":{\"aboutContent\":\"<h1><a id=\\\"_0\\\"></a>前言</h1>\\n<p>我是一名即将大三的在校大学生，自主学习的过程中跟随讲师开发了该个人博客“闲言博客”，这个博客功能简单，但是为我巩固了不少的技术知识，该网站为前后端分离项目，后端:<em><strong>springboot+mybatis</strong></em> 前端-前台：_<strong>vue+ and design</strong><em>前端-后台: <em><strong>vue+ element-ui</strong></em> 开发该项目花了我大概10来天时间，前台页面代码是我copy的讲师提供的静态页面（原谅我写的css自己都看不下去），后续想追加个</em><strong>redis</strong><em>写个缓存，以及加一个</em><strong>ElasticSearch</strong>_搜索引擎，加油吧！</p>\\n<h2><a id=\\\"_4\\\"></a>该博客使用到的技术栈：</h2>\\n<p>SpringBoot，Mybatis，Shiro，Maven，Vue，ElementUI，AntDesignVue，Flex布局，Linux，Nginx，Docker，FastDFS，MongoDB，SpringDataMongoDB<br />\\n该博客由我在腾讯课堂购买课程学习开发，网址：</p>\\n<p><a href=\\\"https://ke.qq.com/course/1129309\\\" target=\\\"_blank\\\">课程地址</a></p>\\n<hr />\\n<p>目前我正在修改该博客的小bug并且在集成更多的新功能，我希望能够使用这个博客项目去巩固我学习的新知识，也希望能有更多的人看到我写的这个项目。</p>\\n<h2><a id=\\\"_15\\\"></a>目前需要改进的地方：</h2>\\n<ol>\\n<li>使用elasticSearch 进行博客的检索</li>\\n<li>将首页的主图片修改为轮播图</li>\\n<li><s>注册时上传头像</s></li>\\n<li><s>将富文本编辑器改为Markdown编辑器</s></li>\\n<li><s>更新记录日志的方式</s></li>\\n<li><s>首页url的问题</s></li>\\n<li><s>数据库时间问题</s></li>\\n<li><s>前台md5加密改为后台加密后再匹配</s></li>\\n<li><s>推荐博客下的时间</s></li>\\n<li><s>登录注册页面的背景图片</s></li>\\n<li><s>登录注册页面的卡片问题</s></li>\\n<li>后台中写博客路由问题</li>\\n<li>后端登录中管理员和用户混淆不清关系</li>\\n<li><s>阅读博客时会更新version(乐观锁)这可能会导致在别人观看博客的时候导致博主无法更新博客影响博主体验</s></li>\\n<li>在进入下一个路由之后回到顶部</li>\\n<li>将分页功能改为加载更多</li>\\n</ol>\\n<p>暂时还需要学习一点其他的之后，等有时间的时候再来继续完善该博客。</p>\\n<h2><a id=\\\"_36\\\"></a>更新记录</h2>\\n<ul>\\n<li>\\n<p>2020-11-17 09:25 add:如果添加博客不上传封面将会设置一个默认封面图片</p>\\n</li>\\n<li>\\n<p>2020-11-18 21:48 update:将原本前端md5加密后再跟后端匹配改为后端进行加密后再匹配</p>\\n</li>\\n<li>\\n<p>2020-11-19 22:15 fix:将页面url后面会添加publicPath问题解决</p>\\n</li>\\n<li>\\n<p>2020-11-24 11:25 update:将前端静态资源使用cdn加速、日志原记录为controller层的所有方法切入改为Log注解处切入</p>\\n</li>\\n<li>\\n<p>2020-11-24 21:51 fix:修复推荐博客下的时间bug</p>\\n</li>\\n<li>\\n<p>2020-11-24 21:51 add:注册时添加上传头像功能</p>\\n</li>\\n<li>\\n<p>2020-11-25 11:46 fix:修复数据库时间问题，具体问题已发博客，<a href=\\\"http://oopsw.top:1001/info/1331436834413211648\\\" target=\\\"_blank\\\">点我查看</a></p>\\n</li>\\n<li>\\n<p>2020-11-27 23:47 fix:登录注册页面卡片超出页面没有显示滚动条、背景图片在页面放大时会出现多个背景图片</p>\\n</li>\\n<li>\\n<p>2020-11-29 00:51 update:将前后台的所有富文本编辑器更换为markdown编辑器，并用markdown的样式</p>\\n</li>\\n<li>\\n<p>2020-12-01 08:30 update:修改markdown代码块样式</p>\\n</li>\\n<li>\\n<p>2020-12-01 08:57 fix:手机访问登录注册页面时样式体验差</p>\\n</li>\\n<li>\\n<p>2020-12-03 22:18 update:更换markdown存储方式，从存储markdown源码改为存储HTML源码</p>\\n</li>\\n</ul>\\n\",\"aboutId\":\"5\",\"aboutRead\":176,\"aboutTitle\":\"关于我的 关于“闲言”\",\"createdTime\":1597816791000,\"enable\":1,\"updateTime\":1607189298000,\"version\":225},\"msg\":\"阅读成功\"}', '119.39.43.33', '2020-12-09 21:24:58', NULL);
INSERT INTO `bl_log` VALUES (2757, '查询时间轴', '//blog/getTimeLine', '[]', 1, NULL, 'GET', 9, '{\"code\":20000,\"data\":[{\"list\":[{\"blogId\":\"1333708609683533824\",\"blogMonth\":\"2020-12\",\"blogTitle\":\"shiro+redis整合实现session持久化登陆失败时也会生成session问题\",\"createdTime\":1606815886000}],\"month\":\"2020-12\"},{\"list\":[{\"blogId\":\"1333411378995605504\",\"blogMonth\":\"2020-11\",\"blogTitle\":\"nacos集群环境搭建\",\"createdTime\":1606745021000},{\"blogId\":\"1332742588649615360\",\"blogMonth\":\"2020-11\",\"blogTitle\":\"vue项目引入markdown\",\"createdTime\":1606585569000},{\"blogId\":\"1331436834413211648\",\"blogMonth\":\"2020-11\",\"blogTitle\":\"springboot 后端传给前端相差8小时\",\"createdTime\":1606274253000}],\"month\":\"2020-11\"},{\"list\":[{\"blogId\":\"1322169187161767936\",\"blogMonth\":\"2020-10\",\"blogTitle\":\"Dubbo超时问题\",\"createdTime\":1604064673000}],\"month\":\"2020-10\"},{\"list\":[{\"blogId\":\"1311375132718956544\",\"blogMonth\":\"2020-09\",\"blogTitle\":\"docker中使用fastdfs问题\",\"createdTime\":1601462370000},{\"blogId\":\"1305852969815642112\",\"blogMonth\":\"2020-09\",\"blogTitle\":\"dubbo-admin登录问题\",\"createdTime\":1600174584000}],\"month\":\"2020-09\"},{\"list\":[{\"blogId\":\"1294647161643978752\",\"blogMonth\":\"2020-08\",\"blogTitle\":\"shiroFilter踩坑\",\"createdTime\":1597474112000},{\"blogId\":\"1293808631053139968\",\"blogMonth\":\"2020-08\",\"blogTitle\":\"docker 安装 mysql5.7\",\"createdTime\":1597274190000}],\"month\":\"2020-08\"},{\"list\":[{\"blogId\":\"1293850784802377728\",\"blogMonth\":\"2020-07\",\"blogTitle\":\"mybatis <if>标签踩坑\",\"createdTime\":1594605840000}],\"month\":\"2020-07\"}],\"msg\":\"操作成功！\"}', '119.39.43.33', '2020-12-09 21:25:10', NULL);
INSERT INTO `bl_log` VALUES (2758, '查询时间轴', '//blog/getTimeLine', '[]', 1, NULL, 'GET', 8, '{\"code\":20000,\"data\":[{\"list\":[{\"blogId\":\"1333708609683533824\",\"blogMonth\":\"2020-12\",\"blogTitle\":\"shiro+redis整合实现session持久化登陆失败时也会生成session问题\",\"createdTime\":1606815886000}],\"month\":\"2020-12\"},{\"list\":[{\"blogId\":\"1333411378995605504\",\"blogMonth\":\"2020-11\",\"blogTitle\":\"nacos集群环境搭建\",\"createdTime\":1606745021000},{\"blogId\":\"1332742588649615360\",\"blogMonth\":\"2020-11\",\"blogTitle\":\"vue项目引入markdown\",\"createdTime\":1606585569000},{\"blogId\":\"1331436834413211648\",\"blogMonth\":\"2020-11\",\"blogTitle\":\"springboot 后端传给前端相差8小时\",\"createdTime\":1606274253000}],\"month\":\"2020-11\"},{\"list\":[{\"blogId\":\"1322169187161767936\",\"blogMonth\":\"2020-10\",\"blogTitle\":\"Dubbo超时问题\",\"createdTime\":1604064673000}],\"month\":\"2020-10\"},{\"list\":[{\"blogId\":\"1311375132718956544\",\"blogMonth\":\"2020-09\",\"blogTitle\":\"docker中使用fastdfs问题\",\"createdTime\":1601462370000},{\"blogId\":\"1305852969815642112\",\"blogMonth\":\"2020-09\",\"blogTitle\":\"dubbo-admin登录问题\",\"createdTime\":1600174584000}],\"month\":\"2020-09\"},{\"list\":[{\"blogId\":\"1294647161643978752\",\"blogMonth\":\"2020-08\",\"blogTitle\":\"shiroFilter踩坑\",\"createdTime\":1597474112000},{\"blogId\":\"1293808631053139968\",\"blogMonth\":\"2020-08\",\"blogTitle\":\"docker 安装 mysql5.7\",\"createdTime\":1597274190000}],\"month\":\"2020-08\"},{\"list\":[{\"blogId\":\"1293850784802377728\",\"blogMonth\":\"2020-07\",\"blogTitle\":\"mybatis <if>标签踩坑\",\"createdTime\":1594605840000}],\"month\":\"2020-07\"}],\"msg\":\"操作成功！\"}', '119.39.43.33', '2020-12-09 21:25:17', NULL);
INSERT INTO `bl_log` VALUES (2759, '阅读博客', '//blog/read/1293850784802377728', '[1293850784802377728]', 1, NULL, 'PUT', 100, '{\"code\":20000,\"data\":{\"blogCollection\":0,\"blogComment\":0,\"blogContent\":\"<h1><a id=\\\"Mybatis_if_0\\\"></a>Mybatis <if>标签的使用问题</h1>\\n<p>今天在使用Mybatis的时候发现前端传参’0’无效，无法更新字段，于是第一想到的就是百度解决，果然百度上已经有不少的案例了。</p>\\n<pre><div class=\\\"hljs\\\"><code class=\\\"lang-xml\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">update</span> <span class=\\\"hljs-attr\\\">id</span>=<span class=\\\"hljs-string\\\">\\\"update\\\"</span>&gt;</span>\\n        update bl_type\\n            <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">set</span>&gt;</span>\\n                <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">if</span> <span class=\\\"hljs-attr\\\">test</span>=<span class=\\\"hljs-string\\\">\\\"typeName!=null and typeNmae!=\'\'\\\"</span>&gt;</span>\\n                    type_name = #{typeName},\\n                <span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">if</span>&gt;</span>\\n                <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">if</span> <span class=\\\"hljs-attr\\\">test</span>=<span class=\\\"hljs-string\\\">\\\"typeBlogCount!=null and typeBlogCount!=\'\'\\\"</span>&gt;</span>\\n                    type_blog_count = #{typeBlogCount},\\n                <span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">if</span>&gt;</span>\\n                <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">if</span> <span class=\\\"hljs-attr\\\">test</span>=<span class=\\\"hljs-string\\\">\\\"enable!=null\\\"</span>&gt;</span>\\n                    enable = #{enable},\\n                <span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">if</span>&gt;</span>\\n            <span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">set</span>&gt;</span>\\n        where type_id = #{typeId}\\n    <span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">update</span>&gt;</span>\\n</code></div></pre>\\n<p>使用mybatis 写mapper.xml文件时，使用if标签如：</p>\\n<pre><div class=\\\"hljs\\\"><code class=\\\"lang-xml\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">if</span> <span class=\\\"hljs-attr\\\">test</span>=<span class=\\\"hljs-string\\\">\\\"typeName!=null and typeNmae!=\'\'\\\"</span>&gt;</span> \\n</code></div></pre>\\n<p>这时如果传入的参数为0的话会被忽略掉 无法正常的更新</p>\\n<p>使用if标签的嵌套经测试也是会忽略参数’0</p>\\n<pre><div class=\\\"hljs\\\"><code class=\\\"lang-xml\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">update</span> <span class=\\\"hljs-attr\\\">id</span>=<span class=\\\"hljs-string\\\">\\\"update\\\"</span>&gt;</span>\\n        update bl_type\\n            <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">set</span>&gt;</span>\\n                <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">if</span> <span class=\\\"hljs-attr\\\">test</span>=<span class=\\\"hljs-string\\\">\\\"typeName!=null\\\"</span>&gt;</span>\\n                    <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">if</span> <span class=\\\"hljs-attr\\\">test</span>=<span class=\\\"hljs-string\\\">\\\"typeName!=\'\'\\\"</span>&gt;</span>\\n                    type_name = #{typeName},\\n                    <span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">if</span>&gt;</span>\\n                <span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">if</span>&gt;</span>\\n                <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">if</span> <span class=\\\"hljs-attr\\\">test</span>=<span class=\\\"hljs-string\\\">\\\"typeBlogCount!=null\\\"</span>&gt;</span>\\n                    <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">if</span> <span class=\\\"hljs-attr\\\">test</span>=<span class=\\\"hljs-string\\\">\\\"typeBlogCount!=\'\'\\\"</span>&gt;</span>\\n                    type_blog_count = #{typeBlogCount},\\n                    <span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">if</span>&gt;</span>\\n                <span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">if</span>&gt;</span>\\n                <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">if</span> <span class=\\\"hljs-attr\\\">test</span>=<span class=\\\"hljs-string\\\">\\\"enable!=null\\\"</span>&gt;</span>\\n                    enable = #{enable},\\n                <span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">if</span>&gt;</span>\\n            <span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">set</span>&gt;</span>\\n        where type_id = #{typeId}\\n    <span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">update</span>&gt;</span>\\n</code></div></pre>\\n<p>如果if标签判断的是字段是否为空字符串也会忽略参数’0’</p>\\n<pre><div class=\\\"hljs\\\"><code class=\\\"lang-xml\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">update</span> <span class=\\\"hljs-attr\\\">id</span>=<span class=\\\"hljs-string\\\">\\\"update\\\"</span>&gt;</span>\\n        update bl_type\\n            <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">set</span>&gt;</span>\\n                    <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">if</span> <span class=\\\"hljs-attr\\\">test</span>=<span class=\\\"hljs-string\\\">\\\"typeName!=\'\'\\\"</span>&gt;</span>\\n                    type_name = #{typeName},\\n                    <span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">if</span>&gt;</span>\\n                    <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">if</span> <span class=\\\"hljs-attr\\\">test</span>=<span class=\\\"hljs-string\\\">\\\"typeBlogCount!=\'\'\\\"</span>&gt;</span>\\n                    type_blog_count = #{typeBlogCount},\\n                    <span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">if</span>&gt;</span>\\n                <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">if</span> <span class=\\\"hljs-attr\\\">test</span>=<span class=\\\"hljs-string\\\">\\\"enable!=null\\\"</span>&gt;</span>\\n                    enable = #{enable},\\n                <span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">if</span>&gt;</span>\\n            <span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">set</span>&gt;</span>\\n        where type_id = #{typeId}\\n    <span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">update</span>&gt;</span>\\n</code></div></pre>\\n<p>结论是if标签只有如以下代码时才不省略参数’‘0’：</p>\\n<pre><div class=\\\"hljs\\\"><code class=\\\"lang-xml\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">update</span> <span class=\\\"hljs-attr\\\">id</span>=<span class=\\\"hljs-string\\\">\\\"update\\\"</span>&gt;</span>\\n        update bl_type\\n            <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">set</span>&gt;</span>\\n                <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">if</span> <span class=\\\"hljs-attr\\\">test</span>=<span class=\\\"hljs-string\\\">\\\"typeName!=null\\\"</span>&gt;</span>\\n                    type_name = #{typeName},\\n                <span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">if</span>&gt;</span>\\n                <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">if</span> <span class=\\\"hljs-attr\\\">test</span>=<span class=\\\"hljs-string\\\">\\\"typeBlogCount!=null\\\"</span>&gt;</span>\\n                    type_blog_count = #{typeBlogCount},\\n                <span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">if</span>&gt;</span>\\n                <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">if</span> <span class=\\\"hljs-attr\\\">test</span>=<span class=\\\"hljs-string\\\">\\\"enable!=null\\\"</span>&gt;</span>\\n                    enable = #{enable},\\n                <span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">if</span>&gt;</span>\\n            <span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">set</span>&gt;</span>\\n        where type_id = #{typeId}\\n    <span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">update</span>&gt;</span>\\n</code></div></pre>\\n<p>那么又有问题来了，如果前台传来一个字符串时，某些字段就会被置为空字符串，这个怎么解决呢？</p>\\n<p>---------------------------------------更新-------------------------------------</p>\\n<p>问题已解决</p>\\n<p>为什么会出现这个问题？</p>\\n<p>因为在mybatis源码中有将空字符串给转换为0这个操作 所以我们传入的参数’0’时就会被判断与空字符串相等 所以if标签的结果值为false</p>\\n<p><img src=\\\"https://img-blog.csdnimg.cn/20200810225335144.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ0ODU5OA==,size_16,color_FFFFFF,t_70\\\" alt=\\\"在这里插入图片描述\\\" /><br />\\n参考资料：<a href=\\\"https://blog.csdn.net/Dongguabai/article/details/82981250\\\" target=\\\"_blank\\\">https://blog.csdn.net/Dongguabai/article/details/82981250</a></p>\\n\",\"blogGoods\":0,\"blogId\":\"1293850784802377728\",\"blogImage\":\"http://808km.top/blog/img/default.jpg\",\"blogRead\":12,\"blogTitle\":\"mybatis <if>标签踩坑\",\"blogType\":10,\"createdTime\":1594605840000,\"typeName\":\"Mybatis\",\"updateTime\":1606995070000,\"version\":47},\"msg\":\"阅读成功\"}', '219.145.77.214', '2020-12-12 10:35:26', NULL);
INSERT INTO `bl_log` VALUES (2760, '登录', '//user/login', '[LoginDto(username=oops, password=123456)]', 1, NULL, 'POST', 33, '{\"code\":20000,\"data\":{\"userInfo\":{\"createdTime\":1606813211000,\"header\":\"http://808km.top/blog/img/default/1333697337684463616\",\"nickname\":\"oops\",\"password\":\"688907950d0aa3749fb2ff1e6eef9b02\",\"salt\":\"F42AAE9DFA924DE79404545FA62343FD\",\"sex\":1,\"updateTime\":1606813210000,\"userEmail\":\"123@qq.com\",\"userId\":36,\"username\":\"oops\",\"version\":1},\"token\":\"0dcca65d-cd22-4b9c-b789-27b69aa289b7\"},\"msg\":\"登陆成功\"}', '218.77.40.92', '2020-12-15 16:59:31', 'oops');
INSERT INTO `bl_log` VALUES (2761, '阅读博客', '//blog/read/1333411378995605504', '[1333411378995605504]', 1, NULL, 'PUT', 27, '{\"code\":20000,\"data\":{\"blogCollection\":0,\"blogComment\":0,\"blogContent\":\"<h2><a id=\\\"_0\\\"></a>预备环境准备</h2>\\n<p>Nacos 依赖 <a href=\\\"https://docs.oracle.com/cd/E19182-01/820-7851/inst_cli_jdk_javahome_t/\\\" target=\\\"_blank\\\">Java</a> 环境来运行。如果您是从代码开始构建并运行Nacos，还需要为此配置 <a href=\\\"https://maven.apache.org/index.html\\\" target=\\\"_blank\\\">Maven</a>环境，请确保是在以下版本环境中安装使用:</p>\\n<ol>\\n<li>64 bit OS，支持 Linux/Unix/Mac/Windows，推荐选用 Linux/Unix/Mac。</li>\\n<li>64 bit JDK 1.8+；<a href=\\\"http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html\\\" target=\\\"_blank\\\">下载</a> &amp; <a href=\\\"https://docs.oracle.com/cd/E19182-01/820-7851/inst_cli_jdk_javahome_t/\\\" target=\\\"_blank\\\">配置</a>。</li>\\n<li>Maven 3.2.x+；<a href=\\\"https://maven.apache.org/download.cgi\\\" target=\\\"_blank\\\">下载</a> &amp; <a href=\\\"https://maven.apache.org/settings.html\\\" target=\\\"_blank\\\">配置</a>。</li>\\n</ol>\\n<h2><a id=\\\"nacos_8\\\"></a>下载nacos安装包</h2>\\n<p>https://github.com/alibaba/nacos/releases/tag/1.4.0</p>\\n<blockquote>\\n<p><img src=\\\"https://img-blog.csdnimg.cn/20201130205557917.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ0ODU5OA==,size_16,color_FFFFFF,t_70\\\" alt=\\\"在这里插入图片描述\\\" /></p>\\n</blockquote>\\n<p>linux选择第一个</p>\\n<p>windows选择第二个</p>\\n<h2><a id=\\\"_21\\\"></a>搭建环境</h2>\\n<h3><a id=\\\"_23\\\"></a>集群模式部署</h3>\\n<p>这个快速开始手册是帮忙您快速在你的电脑上，下载安装并使用Nacos，部署生产使用的集群模式。</p>\\n<h3><a id=\\\"_27\\\"></a>集群部署架构图</h3>\\n<p><img src=\\\"https://img-blog.csdnimg.cn/20201130205609797.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ0ODU5OA==,size_16,color_FFFFFF,t_70\\\" alt=\\\"在这里插入图片描述\\\" /></p>\\n<p>VIP:虚拟ip</p>\\n<p>因此开源的时候推荐用户把所有服务列表放到一个vip下面，然后挂到一个域名下面</p>\\n<p><a href=\\\"http://ip1/\\\" target=\\\"_blank\\\">http://ip1</a>:port/openAPI 直连ip模式，机器挂则需要修改ip才可以使用。</p>\\n<p><a href=\\\"http://vip/\\\" target=\\\"_blank\\\">http://VIP</a>:port/openAPI 挂载VIP模式，直连vip即可，下面挂server真实ip，可读性不好。</p>\\n<p><a href=\\\"http://nacos.com/\\\" target=\\\"_blank\\\">http://nacos.com</a>:port/openAPI 域名 + VIP模式，可读性好，而且换ip方便，推荐模式</p>\\n<h3><a id=\\\"_42\\\"></a>创建目录</h3>\\n<p>该目录存放nacos集群</p>\\n<pre><div class=\\\"hljs\\\"><code class=\\\"lang-sh\\\">mkdir /usr/<span class=\\\"hljs-built_in\\\">local</span>/nacos\\n</code></div></pre>\\n<h3><a id=\\\"nacos_50\\\"></a>上传nacos</h3>\\n<blockquote>\\n<p><img src=\\\"https://img-blog.csdnimg.cn/20201130205630233.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ0ODU5OA==,size_16,color_FFFFFF,t_70\\\" alt=\\\"在这里插入图片描述\\\" /></p>\\n</blockquote>\\n<h3><a id=\\\"nacos_54\\\"></a>解压nacos</h3>\\n<pre><div class=\\\"hljs\\\"><code class=\\\"lang-sh\\\">tar -zxvf nacos-server-1.4.0.tar.gz\\n</code></div></pre>\\n<h3><a id=\\\"nacos_60\\\"></a>创建nacos持久化数据库</h3>\\n<p>首先使用navicat连接mysql数据库，然后创建数据库</p>\\n<p><img src=\\\"https://img-blog.csdnimg.cn/20201130205643439.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ0ODU5OA==,size_16,color_FFFFFF,t_70\\\" alt=\\\"在这里插入图片描述\\\" /></p>\\n<p>新建查询后导入SQL脚本即可</p>\\n<p><img src=\\\"https://img-blog.csdnimg.cn/20201130205705669.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ0ODU5OA==,size_16,color_FFFFFF,t_70\\\" alt=\\\"在这里插入图片描述\\\" /></p>\\n<p>红色框选那栏填写你的SQL脚本位置，SQL脚本在nacos文件夹下的conf下</p>\\n<h3><a id=\\\"nacos_73\\\"></a>nacos文件夹改名</h3>\\n<p>将文件夹名改为nacos3333代表这个nacos的端口号是3333</p>\\n<pre><div class=\\\"hljs\\\"><code class=\\\"lang-sh\\\">mv nacos nacos3333\\n</code></div></pre>\\n<h3><a id=\\\"_81\\\"></a>配置修改</h3>\\n<p>首先进入到配置目录</p>\\n<pre><div class=\\\"hljs\\\"><code class=\\\"lang-sh\\\"><span class=\\\"hljs-built_in\\\">cd</span> /usr/<span class=\\\"hljs-built_in\\\">local</span>/nacos/nacos3333/conf\\n</code></div></pre>\\n<blockquote>\\n<p><img src=\\\"https://img-blog.csdnimg.cn/2020113020572431.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ0ODU5OA==,size_16,color_FFFFFF,t_70\\\" alt=\\\"在这里插入图片描述\\\" /></p>\\n</blockquote>\\n<p>在更改配置之前先备份配置</p>\\n<pre><div class=\\\"hljs\\\"><code class=\\\"lang-sh\\\">cp application.properties application.properties.example\\n</code></div></pre>\\n<pre><div class=\\\"hljs\\\"><code class=\\\"lang-sh\\\">cp cluster.conf.example cluster.conf\\n</code></div></pre>\\n<h3><a id=\\\"_104\\\"></a>集群配置</h3>\\n<pre><div class=\\\"hljs\\\"><code class=\\\"lang-sh\\\">vim cluster.conf\\n</code></div></pre>\\n<blockquote>\\n<p><img src=\\\"https://img-blog.csdnimg.cn/20201130205739435.png\\\" alt=\\\"在这里插入图片描述\\\" /></p>\\n</blockquote>\\n<blockquote>\\n<p>注意这里不能填写localhost 或者127.0.0.1，这里如果是在本机搭建可以查看本机ip后填写</p>\\n<pre><div class=\\\"hljs\\\"><code class=\\\"lang-sh\\\">hostname -i\\n</code></div></pre>\\n<p><img src=\\\"https://img-blog.csdnimg.cn/20201130205749116.png\\\" alt=\\\"在这里插入图片描述\\\" /></p>\\n</blockquote>\\n<h3><a id=\\\"nacos_122\\\"></a>nacos配置</h3>\\n<pre><div class=\\\"hljs\\\"><code class=\\\"lang-sh\\\">vim application.properties\\n</code></div></pre>\\n<pre><code class=\\\"lang-properties\\\">\\n#*************** Spring Boot Related Configurations ***************#\\n### Default web context path:\\nserver.servlet.contextPath=/nacos\\n### Default web server port:\\nserver.port=3333\\n\\n#*************** Network Related Configurations ***************#\\n### If prefer hostname over ip for Nacos server addresses in cluster.conf:\\n# nacos.inetutils.prefer-hostname-over-ip=false\\n\\n### Specify local server\'s IP:\\n# nacos.inetutils.ip-address=\\n\\n\\n#*************** Config Module Related Configurations ***************#\\n### If use MySQL as datasource:\\n spring.datasource.platform=mysql\\n\\n### Count of DB:\\n db.num=1\\n\\n### Connect URL of DB:\\ndb.url.0=jdbc:mysql://127.0.0.1:3306/nacos_config?characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true&amp;useUnicode=true&amp;useSSL=false&amp;serverTimezone=UTC\\ndb.user=root\\ndb.password=123456\\n\\n\\n#*************** Naming Module Related Configurations ***************#\\n### Data dispatch task execution period in milliseconds:\\n# nacos.naming.distro.taskDispatchPeriod=200\\n\\n### Data count of batch sync task:\\n# nacos.naming.distro.batchSyncKeyCount=1000\\n\\n### Retry delay in milliseconds if sync task failed:\\n# nacos.naming.distro.syncRetryDelay=5000\\n\\n### If enable data warmup. If set to false, the server would accept request without local data preparation:\\n# nacos.naming.data.warmup=true\\n\\n### If enable the instance auto expiration, kind like of health check of instance:\\n# nacos.naming.expireInstance=true\\n\\nnacos.naming.empty-service.auto-clean=true\\nnacos.naming.empty-service.clean.initial-delay-ms=50000\\nnacos.naming.empty-service.clean.period-time-ms=30000\\n\\n\\n#*************** CMDB Module Related Configurations ***************#\\n### The interval to dump external CMDB in seconds:\\n# nacos.cmdb.dumpTaskInterval=3600\\n\\n### The interval of polling data change event in seconds:\\n# nacos.cmdb.eventTaskInterval=10\\n\\n### The interval of loading labels in seconds:\\n# nacos.cmdb.labelTaskInterval=300\\n\\n### If turn on data loading task:\\n# nacos.cmdb.loadDataAtStart=false\\n\\n\\n#*************** Metrics Related Configurations ***************#\\n### Metrics for prometheus\\n#management.endpoints.web.exposure.include=*\\n\\n### Metrics for elastic search\\nmanagement.metrics.export.elastic.enabled=false\\n#management.metrics.export.elastic.host=http://localhost:9200\\n\\n### Metrics for influx\\nmanagement.metrics.export.influx.enabled=false\\n#management.metrics.export.influx.db=springboot\\n#management.metrics.export.influx.uri=http://localhost:8086\\n#management.metrics.export.influx.auto-create-db=true\\n#management.metrics.export.influx.consistency=one\\n#management.metrics.export.influx.compressed=true\\n\\n\\n#*************** Access Log Related Configurations ***************#\\n### If turn on the access log:\\nserver.tomcat.accesslog.enabled=true\\n\\n### The access log pattern:\\nserver.tomcat.accesslog.pattern=%h %l %u %t &quot;%r&quot; %s %b %D %{User-Agent}i %{Request-Source}i\\n\\n### The directory of access log:\\nserver.tomcat.basedir=\\n\\n\\n#*************** Access Control Related Configurations ***************#\\n### If enable spring security, this option is deprecated in 1.2.0:\\n#spring.security.enabled=false\\n\\n### The ignore urls of auth, is deprecated in 1.2.0:\\nnacos.security.ignore.urls=/,/error,/**/*.css,/**/*.js,/**/*.html,/**/*.map,/**/*.svg,/**/*.png,/**/*.ico,/console-fe/public/**,/v1/auth/**,/v1/console/health/**,/actuator/**,/v1/console/server/**\\n\\n### The auth system to use, currently only \'nacos\' is supported:\\nnacos.core.auth.system.type=nacos\\n\\n### If turn on auth system:\\nnacos.core.auth.enabled=false\\n\\n### The token expiration in seconds:\\nnacos.core.auth.default.token.expire.seconds=18000\\n\\n### The default token:\\nnacos.core.auth.default.token.secret.key=SecretKey012345678901234567890123456789012345678901234567890123456789\\n\\n### Turn on/off caching of auth information. By turning on this switch, the update of auth information would have a 15 seconds delay.\\nnacos.core.auth.caching.enabled=true\\n\\n\\n#*************** Istio Related Configurations ***************#\\n### If turn on the MCP server:\\nnacos.istio.mcp.server.enabled=false\\n\\n\\n\\n###*************** Add from 1.3.0 ***************###\\n\\n\\n#*************** Core Related Configurations ***************#\\n\\n### set the WorkerID manually\\n# nacos.core.snowflake.worker-id=\\n\\n### Member-MetaData\\n# nacos.core.member.meta.site=\\n# nacos.core.member.meta.adweight=\\n# nacos.core.member.meta.weight=\\n\\n### MemberLookup\\n### Addressing pattern category, If set, the priority is highest\\n# nacos.core.member.lookup.type=[file,address-server]\\n## Set the cluster list with a configuration file or command-line argument\\n# nacos.member.list=192.168.16.101:8847?raft_port=8807,192.168.16.101?raft_port=8808,192.168.16.101:8849?raft_port=8809\\n## for AddressServerMemberLookup\\n# Maximum number of retries to query the address server upon initialization\\n# nacos.core.address-server.retry=5\\n## Server domain name address of [address-server] mode\\n# address.server.domain=jmenv.tbsite.net\\n## Server port of [address-server] mode\\n# address.server.port=8080\\n## Request address of [address-server] mode\\n# address.server.url=/nacos/serverlist\\n\\n#*************** JRaft Related Configurations ***************#\\n\\n### Sets the Raft cluster election timeout, default value is 5 second\\n# nacos.core.protocol.raft.data.election_timeout_ms=5000\\n### Sets the amount of time the Raft snapshot will execute periodically, default is 30 minute\\n# nacos.core.protocol.raft.data.snapshot_interval_secs=30\\n### raft internal worker threads\\n# nacos.core.protocol.raft.data.core_thread_num=8\\n### Number of threads required for raft business request processing\\n# nacos.core.protocol.raft.data.cli_service_thread_num=4\\n### raft linear read strategy. Safe linear reads are used by default, that is, the Leader tenure is confirmed by heartbeat\\n# nacos.core.protocol.raft.data.read_index_type=ReadOnlySafe\\n### rpc request timeout, default 5 seconds\\n# nacos.core.protocol.raft.data.rpc_request_timeout_ms=5000\\n\\n</code></pre>\\n<p>这是我的整个application.properties文件,其中主要修改的地方有两处</p>\\n<p>修改端口号</p>\\n<pre><code class=\\\"lang-properties\\\">### Default web server port:\\nserver.port=3333\\n</code></pre>\\n<p>修改数据库为mysql并配置mysql的url</p>\\n<pre><code class=\\\"lang-properties\\\">#*************** Config Module Related Configurations ***************#\\n### If use MySQL as datasource:\\n spring.datasource.platform=mysql\\n\\n### Count of DB:\\n db.num=1\\n\\n### Connect URL of DB:\\ndb.url.0=jdbc:mysql://127.0.0.1:3306/nacos_config?characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true&amp;useUnicode=true&amp;useSSL=false&amp;serverTimezone=UTC\\ndb.user=root\\ndb.password=123456\\n</code></pre>\\n<p>这时候配置就差不多啦可以开始启动服务了</p>\\n<pre><div class=\\\"hljs\\\"><code class=\\\"lang-sh\\\"><span class=\\\"hljs-comment\\\"># 进入到nacos3333的bin目录</span>\\n<span class=\\\"hljs-built_in\\\">cd</span> /usr/<span class=\\\"hljs-built_in\\\">local</span>/nacos/nacos3333/bin\\n<span class=\\\"hljs-comment\\\"># 执行启动脚本 因为nacos启动脚本默认就是使用集群模式所以不用更改</span>\\n./startup.sh\\n</code></div></pre>\\n<p>这时候我们可以查看nacos的启动状态</p>\\n<pre><div class=\\\"hljs\\\"><code class=\\\"lang-sh\\\">ps -ef | grep nacos\\n</code></div></pre>\\n<blockquote>\\n<p><img src=\\\"https://img-blog.csdnimg.cn/20201130205818481.png\\\" alt=\\\"在这里插入图片描述\\\" /></p>\\n</blockquote>\\n<p>这时候我们应该就可以通过 服务器ip:3333/nacos访问到nacos</p>\\n<blockquote>\\n<p><img src=\\\"https://img-blog.csdnimg.cn/20201130205828641.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ0ODU5OA==,size_16,color_FFFFFF,t_70\\\" alt=\\\"在这里插入图片描述\\\" /></p>\\n</blockquote>\\n<p>成功的访问到了nacos代表成功了。</p>\\n<h3><a id=\\\"nacos_344\\\"></a>nacos集群启动</h3>\\n<p>这时候我们就可以回到nacos目录下拷贝之前的nacos3333文件夹来启动nacos4444和nacos5555</p>\\n<pre><div class=\\\"hljs\\\"><code class=\\\"lang-sh\\\"><span class=\\\"hljs-built_in\\\">cd</span> /usr/<span class=\\\"hljs-built_in\\\">local</span>/nacos\\n<span class=\\\"hljs-comment\\\"># cp -r 代表递归拷贝</span>\\ncp -r nacos3333 nacos4444\\ncp -r nacos3333 nacos5555\\n</code></div></pre>\\n<p>这时候再分别将nacos4444和nacos5555文件夹下的conf目录中的application.properties中的server.port更改为3333、4444然后再启动，这里我就不再演示了，和之前配置一样。</p>\\n<p>随后我们再依次启动nacos4444，nacos5555</p>\\n<p>###########################################################################</p>\\n<p>启动后发现问题，nacos5555启动不起来，查看日志得到发现内存不足，nacos脚本默认给的最大内存是2G，我们可以去改小一点。</p>\\n<p><img src=\\\"https://img-blog.csdnimg.cn/20201130205845619.png\\\" alt=\\\"在这里插入图片描述\\\" /></p>\\n<p>原红框中限制的内存是2g 最小1g 适当该小一点[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传<br />\\n<img src=\\\"https://img-blog.csdnimg.cn/20201130205903628.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ0ODU5OA==,size_16,color_FFFFFF,t_70\\\" alt=\\\"在这里插入图片描述\\\" /></p>\\n<p>然后再依次启动三个服务</p>\\n<p>登录任意一个nacos可以看到如下页面即集群启动成功</p>\\n<h3><a id=\\\"nginx_373\\\"></a>nginx配置</h3>\\n<p>这配置nginx负载均衡访问nacos</p>\\n<pre><div class=\\\"hljs\\\"><code class=\\\"lang-sh\\\"><span class=\\\"hljs-built_in\\\">cd</span> /usr/<span class=\\\"hljs-built_in\\\">local</span>/nginx/conf\\nvim nginx.conf\\n</code></div></pre>\\n<pre><code class=\\\"lang-conf\\\">#user  nobody;\\nworker_processes  1;\\n\\n#error_log  logs/error.log;\\n#error_log  logs/error.log  notice;\\n#error_log  logs/error.log  info;\\n\\n#pid        logs/nginx.pid;\\n\\n\\nevents {\\n    worker_connections  1024;\\n}\\n\\n\\nhttp {\\n    include       mime.types;\\n    default_type  application/octet-stream;\\n\\n    #log_format  main  \'$remote_addr - $remote_user [$time_local] &quot;$request&quot; \'\\n    #                  \'$status $body_bytes_sent &quot;$http_referer&quot; \'\\n    #                  \'&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;\';\\n\\n    #access_log  logs/access.log  main;\\n\\n    sendfile        on;\\n    #tcp_nopush     on;\\n\\n    #keepalive_timeout  0;\\n    keepalive_timeout  65;\\n\\n    #gzip  on;\\n\\n    #配置刚刚搭建好的nacos集群\\n    upstream cluster{                                                        \\n\\t    server 127.0.0.1:3333;\\n\\t    server 127.0.0.1:4444;\\n\\t    server 127.0.0.1:5555;\\n\\t}\\n\\n    server {\\n        listen       1111;\\n        server_name  nacos_cluster;\\n\\n        #charset koi8-r;\\n\\n        #access_log  logs/host.access.log  main;\\n\\n        location / {\\n            #root   html;\\n            #index  index.html index.htm;\\n            #将所有访问/的都映射到配置好的集群\\n            proxy_pass http://cluster;\\n        }\\n\\n        #error_page  404              /404.html;\\n\\n        # redirect server error pages to the static page /50x.html\\n        #\\n        error_page   500 502 503 504  /50x.html;\\n        location = /50x.html {\\n            root   html;\\n        }\\n\\n        # proxy the PHP scripts to Apache listening on 127.0.0.1:80\\n        #\\n        #location ~ \\\\.php$ {\\n        #    proxy_pass   http://127.0.0.1;\\n        #}\\n\\n        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000\\n        #\\n        #location ~ \\\\.php$ {\\n        #    root           html;\\n        #    fastcgi_pass   127.0.0.1:9000;\\n        #    fastcgi_index  index.php;\\n        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;\\n        #    include        fastcgi_params;\\n        #}\\n\\n        # deny access to .htaccess files, if Apache\'s document root\\n        # concurs with nginx\'s one\\n        #\\n        #location ~ /\\\\.ht {\\n        #    deny  all;\\n        #}\\n    }\\n\\n\\n    # another virtual host using mix of IP-, name-, and port-based configuration\\n    #\\n    #server {\\n    #    listen       8000;\\n    #    listen       somename:8080;\\n    #    server_name  somename  alias  another.alias;\\n\\n    #    location / {\\n    #        root   html;\\n    #        index  index.html index.htm;\\n    #    }\\n    #}\\n\\n\\n    # HTTPS server\\n    #\\n    #server {\\n    #    listen       443 ssl;\\n    #    server_name  localhost;\\n\\n    #    ssl_certificate      cert.pem;\\n    #    ssl_certificate_key  cert.key;\\n\\n    #    ssl_session_cache    shared:SSL:1m;\\n    #    ssl_session_timeout  5m;\\n\\n    #    ssl_ciphers  HIGH:!aNULL:!MD5;\\n    #    ssl_prefer_server_ciphers  on;\\n\\n    #    location / {\\n    #        root   html;\\n    #        index  index.html index.htm;\\n    #    }\\n    #}\\n}\\n</code></pre>\\n<h3><a id=\\\"nginx_509\\\"></a>nginx启动</h3>\\n<pre><div class=\\\"hljs\\\"><code class=\\\"lang-sh\\\"><span class=\\\"hljs-built_in\\\">cd</span> /usr/<span class=\\\"hljs-built_in\\\">local</span>/nginx/sbin\\n./nginx\\n</code></div></pre>\\n<p>这时候我们就可以通过服务器ip地址:1111/nacos 来访问nacos集群了</p>\\n<p><img src=\\\"https://img-blog.csdnimg.cn/20201130205927229.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ0ODU5OA==,size_16,color_FFFFFF,t_70\\\" alt=\\\"在这里插入图片描述\\\" /></p>\\n<p>关于使用NACOS集群遇到问题 – CODE:503 MSG: SERVER IS STARTING NOW, PLEASE TRY AGAIN LATER!</p>\\n<p>这时又出现了问题……在服务提供者注册服务时会报错</p>\\n<pre><code class=\\\"lang-text\\\">2020-11-30 00:36:59.492 ERROR 13140 --- [  restartedMain] c.a.c.n.registry.NacosServiceRegistry    : nacos registry, nacos-payment-provider register failed...NacosRegistration{nacosDiscoveryProperties=NacosDiscoveryProperties{serverAddr=\'wsy.oopsw.top:1111\', endpoint=\'\', namespace=\'\', watchDelay=30000, logName=\'\', service=\'nacos-payment-provider\', weight=1.0, clusterName=\'DEFAULT\', namingLoadCacheAtStart=\'false\', metadata={preserved.register.source=SPRING_CLOUD}, registerEnabled=true, ip=\'10.175.6.100\', networkInterface=\'\', port=9002, secure=false, accessKey=\'\', secretKey=\'\'}},\\n\\njava.lang.IllegalStateException: failed to req API:/nacos/v1/ns/instance after all servers([wsy.oopsw.top:1111]) tried: failed to req API:wsy.oopsw.top:1111/nacos/v1/ns/instance. code:503 msg: server is DOWN now, please try again later!\\n\\tat com.alibaba.nacos.client.naming.net.NamingProxy.reqAPI(NamingProxy.java:464) ~[nacos-client-1.1.1.jar:na]\\n\\tat com.alibaba.nacos.client.naming.net.NamingProxy.reqAPI(NamingProxy.java:386) ~[nacos-client-1.1.1.jar:na]\\n\\tat com.alibaba.nacos.client.naming.net.NamingProxy.registerService(NamingProxy.java:188) ~[nacos-client-1.1.1.jar:na]\\n\\tat com.alibaba.nacos.client.naming.NacosNamingService.registerInstance(NacosNamingService.java:205) ~[nacos-client-1.1.1.jar:na]\\n\\tat com.alibaba.nacos.client.naming.NacosNamingService.registerInstance(NacosNamingService.java:184) ~[nacos-client-1.1.1.jar:na]\\n\\tat com.alibaba.cloud.nacos.registry.NacosServiceRegistry.register(NacosServiceRegistry.java:61) ~[spring-cloud-alibaba-nacos-discovery-2.1.0.RELEASE.jar:2.1.0.RELEASE]\\n\\tat org.springframework.cloud.client.serviceregistry.AbstractAutoServiceRegistration.register(AbstractAutoServiceRegistration.java:239) [spring-cloud-commons-2.2.1.RELEASE.jar:2.2.1.RELEASE]\\n\\tat com.alibaba.cloud.nacos.registry.NacosAutoServiceRegistration.register(NacosAutoServiceRegistration.java:74) [spring-cloud-alibaba-nacos-discovery-2.1.0.RELEASE.jar:2.1.0.RELEASE]\\n\\tat org.springframework.cloud.client.serviceregistry.AbstractAutoServiceRegistration.start(AbstractAutoServiceRegistration.java:138) [spring-cloud-commons-2.2.1.RELEASE.jar:2.2.1.RELEASE]\\n\\tat org.springframework.cloud.client.serviceregistry.AbstractAutoServiceRegistration.bind(AbstractAutoServiceRegistration.java:101) [spring-cloud-commons-2.2.1.RELEASE.jar:2.2.1.RELEASE]\\n\\tat org.springframework.cloud.client.serviceregistry.AbstractAutoServiceRegistration.onApplicationEvent(AbstractAutoServiceRegistration.java:88) [spring-cloud-commons-2.2.1.RELEASE.jar:2.2.1.RELEASE]\\n\\tat org.springframework.cloud.client.serviceregistry.AbstractAutoServiceRegistration.onApplicationEvent(AbstractAutoServiceRegistration.java:47) [spring-cloud-commons-2.2.1.RELEASE.jar:2.2.1.RELEASE]\\n\\tat org.springframework.context.event.SimpleApplicationEventMulticaster.doInvokeListener(SimpleApplicationEventMulticaster.java:172) [spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]\\n\\tat org.springframework.context.event.SimpleApplicationEventMulticaster.invokeListener(SimpleApplicationEventMulticaster.java:165) [spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]\\n\\tat org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:139) [spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]\\n\\tat org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:403) [spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]\\n\\tat org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:360) [spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]\\n\\tat org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.finishRefresh(ServletWebServerApplicationContext.java:165) [spring-boot-2.2.2.RELEASE.jar:2.2.2.RELEASE]\\n\\tat org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:553) [spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]\\n\\tat org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:141) [spring-boot-2.2.2.RELEASE.jar:2.2.2.RELEASE]\\n\\tat org.springframework.boot.SpringApplication.refresh(SpringApplication.java:747) [spring-boot-2.2.2.RELEASE.jar:2.2.2.RELEASE]\\n\\tat org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:397) [spring-boot-2.2.2.RELEASE.jar:2.2.2.RELEASE]\\n\\tat org.springframework.boot.SpringApplication.run(SpringApplication.java:315) [spring-boot-2.2.2.RELEASE.jar:2.2.2.RELEASE]\\n\\tat org.springframework.boot.SpringApplication.run(SpringApplication.java:1226) [spring-boot-2.2.2.RELEASE.jar:2.2.2.RELEASE]\\n\\tat org.springframework.boot.SpringApplication.run(SpringApplication.java:1215) [spring-boot-2.2.2.RELEASE.jar:2.2.2.RELEASE]\\n\\tat com.wsy.springcloud.AlibabaProviderApplication.main(AlibabaProviderApplication.java:15) [classes/:na]\\n\\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_73]\\n\\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_73]\\n\\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_73]\\n\\tat java.lang.reflect.Method.invoke(Method.java:497) ~[na:1.8.0_73]\\n\\tat org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49) [spring-boot-devtools-2.2.2.RELEASE.jar:2.2.2.RELEASE]\\n</code></pre>\\n<p>像阿里云、腾讯云这种云服务器, 会提供一个外网ip和内网ip, 访问外网ip时会指向对应的内网ip来访问到该服务器, 由于nacos集群内部是指定的使用网卡ip地址来进行通信,但是由于三台服务器各自的内网ip不在同一网段, 所以造成无法通信, 也会造成以下问题</p>\\n<p>注册服务:</p>\\n<pre><code class=\\\"lang-\\\">code:503 msg: server is STARTING now, please try again later!\\n</code></pre>\\n<p>naming-raft.log 日志:</p>\\n<pre><code class=\\\"lang-\\\">2019-05-15 00:02:00,000 WARN [IS LEADER] no leader is available now!\\n</code></pre>\\n<p>这时只要修改启动参数, 设置本机ip地址就可以了<br />\\n修改 nacos/bin/startup.sh 文件<br />\\n找到 JVM Configuration 这部分, 在集群参数里增加 -Dnacos.server.ip=xx</p>\\n<pre><div class=\\\"hljs\\\"><code class=\\\"lang-sh\\\"><span class=\\\"hljs-comment\\\">#===========================================================================================</span>\\n<span class=\\\"hljs-comment\\\"># JVM Configuration</span>\\n<span class=\\\"hljs-comment\\\">#===========================================================================================</span>\\n\\n<span class=\\\"hljs-comment\\\"># 单机模式对应的启动参数</span>\\n<span class=\\\"hljs-keyword\\\">if</span> [[ <span class=\\\"hljs-string\\\">\\\"<span class=\\\"hljs-variable\\\">${MODE}</span>\\\"</span> == <span class=\\\"hljs-string\\\">\\\"standalone\\\"</span> ]]; <span class=\\\"hljs-keyword\\\">then</span>\\n    JAVA_OPT=<span class=\\\"hljs-string\\\">\\\"<span class=\\\"hljs-variable\\\">${JAVA_OPT}</span> -Xms512m -Xmx512m -Xmn256m\\\"</span>\\n    JAVA_OPT=<span class=\\\"hljs-string\\\">\\\"<span class=\\\"hljs-variable\\\">${JAVA_OPT}</span> -Dnacos.standalone=true\\\"</span>\\n<span class=\\\"hljs-keyword\\\">else</span>\\n<span class=\\\"hljs-comment\\\"># 集群模式对应的启动参数</span>\\n    JAVA_OPT=<span class=\\\"hljs-string\\\">\\\"<span class=\\\"hljs-variable\\\">${JAVA_OPT}</span> -server -Xms2g -Xmx2g -Xmn1g -XX:MetaspaceSize=128m -XX:MaxMetaspaceSize=320m\\\"</span>\\n    JAVA_OPT=<span class=\\\"hljs-string\\\">\\\"<span class=\\\"hljs-variable\\\">${JAVA_OPT}</span> -XX:-OmitStackTraceInFastThrow -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=<span class=\\\"hljs-variable\\\">${BASE_DIR}</span>/logs/java_heapdump.hprof\\\"</span>\\n    JAVA_OPT=<span class=\\\"hljs-string\\\">\\\"<span class=\\\"hljs-variable\\\">${JAVA_OPT}</span> -XX:-UseLargePages\\\"</span>\\n    \\n    <span class=\\\"hljs-comment\\\"># *新增以下参数设置本机ip地址*</span>\\n    JAVA_OPT=<span class=\\\"hljs-string\\\">\\\"<span class=\\\"hljs-variable\\\">${JAVA_OPT}</span> -Dnacos.server.ip=本机ip\\\"</span>\\n\\n<span class=\\\"hljs-keyword\\\">fi</span>\\n\\n<span class=\\\"hljs-keyword\\\">if</span> [[ <span class=\\\"hljs-string\\\">\\\"<span class=\\\"hljs-variable\\\">${FUNCTION_MODE}</span>\\\"</span> == <span class=\\\"hljs-string\\\">\\\"config\\\"</span> ]]; <span class=\\\"hljs-keyword\\\">then</span>\\n    JAVA_OPT=<span class=\\\"hljs-string\\\">\\\"<span class=\\\"hljs-variable\\\">${JAVA_OPT}</span> -Dnacos.functionMode=config\\\"</span>\\n<span class=\\\"hljs-keyword\\\">elif</span> [[ <span class=\\\"hljs-string\\\">\\\"<span class=\\\"hljs-variable\\\">${FUNCTION_MODE}</span>\\\"</span> == <span class=\\\"hljs-string\\\">\\\"naming\\\"</span> ]]; <span class=\\\"hljs-keyword\\\">then</span>\\n    JAVA_OPT=<span class=\\\"hljs-string\\\">\\\"<span class=\\\"hljs-variable\\\">${JAVA_OPT}</span> -Dnacos.functionMode=naming\\\"</span>\\n<span class=\\\"hljs-keyword\\\">fi</span>\\n\\n</code></div></pre>\\n<p>参考博客：https://www.freesion.com/article/33101142210/</p>\\n<p>服务注册时报BadRequest400 问题暂时还未解决</p>\\n<pre><code class=\\\"lang-text\\\">com.alibaba.nacos.api.exception.NacosException: failed to req API:/nacos/v1/ns/instance after all servers([wsy.oopsw.top:1111]) tried: ErrCode:400, ErrMsg:&lt;html&gt;&lt;body&gt;&lt;h1&gt;Whitelabel Error Page&lt;/h1&gt;&lt;p&gt;This application has no explicit mapping for /error, so you are seeing this as a fallback.&lt;/p&gt;&lt;div id=\'created\'&gt;Mon Nov 30 01:33:45 CST 2020&lt;/div&gt;&lt;div&gt;There was an unexpected error (type=Bad Request, status=400).&lt;/div&gt;&lt;div&gt;receive invalid redirect request from peer 172.20.9.153&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;\\n</code></pre>\\n<p>#############################################################</p>\\n<p>问题已解决，是nacos版本的问题，据群里老哥解释说是nacos需要使用与之对应的SpringCloudAlibaba的版本，不然就会报错，我更换版本到1.3.2问题解决服务注册正常</p>\\n\",\"blogGoods\":0,\"blogId\":\"1333411378995605504\",\"blogImage\":\"http://808km.top/blog/img/img/default/1333411206555185152\",\"blogRead\":51,\"blogRemark\":\"nacos集群环境搭建\",\"blogTitle\":\"nacos集群环境搭建\",\"blogType\":20,\"createdTime\":1606745021000,\"typeName\":\"nacos\",\"updateTime\":1607330533000,\"version\":39},\"msg\":\"阅读成功\"}', '218.77.40.108', '2020-12-15 23:24:45', NULL);
INSERT INTO `bl_log` VALUES (2762, '阅读博客', '//blog/read/1331436834413211648', '[1331436834413211648]', 1, NULL, 'PUT', 24, '{\"code\":20000,\"data\":{\"blogCollection\":0,\"blogComment\":0,\"blogContent\":\"<p>在开发中日期最常打交道的东西之一，但是日期又会存在各式各样的格式，常见的情形就是，从数据库取出的日期往往都是时间戳（毫秒数）的形式，这个一般情况下是前端不想要的结果，需要进行处理，那在springboot中比较简单：<br />\\n因为后端传给前端时默认使用jackson转换格式所以我们可以</p>\\n<ol>\\n<li>在application.yml中设置</li>\\n</ol>\\n<pre><div class=\\\"hljs\\\"><code class=\\\"lang-yml\\\"><span class=\\\"hljs-attr\\\">spring:</span>\\n<span class=\\\"hljs-attr\\\">  jackson:</span>\\n<span class=\\\"hljs-attr\\\">    date-format:</span> <span class=\\\"hljs-string\\\">yyyy-MM-dd</span> <span class=\\\"hljs-attr\\\">HH:mm:ss</span>\\n<span class=\\\"hljs-attr\\\">    time-zone:</span> <span class=\\\"hljs-string\\\">GMT+8</span>\\n</code></div></pre>\\n<ol start=\\\"2\\\">\\n<li>在pojo对象上添加@JsonFormat注解</li>\\n</ol>\\n<pre><div class=\\\"hljs\\\"><code class=\\\"lang-java\\\">    <span class=\\\"hljs-meta\\\">@JsonFormat</span>(pattern = <span class=\\\"hljs-string\\\">\\\"yyyy-MM-dd HH:mm:ss\\\"</span>, timezone = <span class=\\\"hljs-string\\\">\\\"GMT+8\\\"</span>)\\n    <span class=\\\"hljs-keyword\\\">private</span> Date createdTime;\\n</code></div></pre>\\n<p>但是我在尝试了这两个方法以及相类似的方法，但是都无效，要么就是格式化无效，直接返回的时间戳，要么就是时间还是相差8个小时，但是格式化有效。</p>\\n<p>这时我看到了另外一篇不一样的博客，随后明白了为什么我的配置没有用，原来是因为我添加拦截器时写的配置类的问题。<br />\\n以下代码是我更改之前的配置类</p>\\n<pre><div class=\\\"hljs\\\"><code class=\\\"lang-java\\\"><span class=\\\"hljs-keyword\\\">package</span> com.wsy.blog.config;\\n\\n<span class=\\\"hljs-keyword\\\">import</span> com.fasterxml.jackson.databind.DeserializationFeature;\\n<span class=\\\"hljs-keyword\\\">import</span> com.fasterxml.jackson.databind.ObjectMapper;\\n<span class=\\\"hljs-keyword\\\">import</span> com.wsy.blog.interceptor.LoginInterceptor;\\n<span class=\\\"hljs-keyword\\\">import</span> org.springframework.context.annotation.Bean;\\n<span class=\\\"hljs-keyword\\\">import</span> org.springframework.context.annotation.Configuration;\\n<span class=\\\"hljs-keyword\\\">import</span> org.springframework.http.converter.HttpMessageConverter;\\n<span class=\\\"hljs-keyword\\\">import</span> org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;\\n<span class=\\\"hljs-keyword\\\">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistry;\\n<span class=\\\"hljs-keyword\\\">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport;\\n\\n<span class=\\\"hljs-keyword\\\">import</span> java.text.SimpleDateFormat;\\n<span class=\\\"hljs-keyword\\\">import</span> java.util.List;\\n\\n<span class=\\\"hljs-comment\\\">/**\\n * <span class=\\\"hljs-doctag\\\">@Author</span>: wsy\\n * <span class=\\\"hljs-doctag\\\">@Date</span>: 2020/8/10 11:34\\n */</span>\\n<span class=\\\"hljs-meta\\\">@Configuration</span>\\n<span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-class\\\"><span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title\\\">InterceptorConfig</span> <span class=\\\"hljs-keyword\\\">extends</span> <span class=\\\"hljs-title\\\">WebMvcConfigurationSupport</span> </span>{\\n\\n    <span class=\\\"hljs-meta\\\">@Bean</span>\\n    <span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">public</span> LoginInterceptor <span class=\\\"hljs-title\\\">getLoginInterceptor</span><span class=\\\"hljs-params\\\">()</span> </span>{\\n        <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-keyword\\\">new</span> LoginInterceptor();\\n    }\\n\\n    <span class=\\\"hljs-comment\\\">/**\\n     * 添加拦截器\\n     * <span class=\\\"hljs-doctag\\\">@param</span> registry  拦截器注册\\n     */</span>\\n    <span class=\\\"hljs-meta\\\">@Override</span>\\n    <span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">protected</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title\\\">addInterceptors</span><span class=\\\"hljs-params\\\">(InterceptorRegistry registry)</span> </span>{\\n        <span class=\\\"hljs-comment\\\">// TODO Auto-generated method stub</span>\\n        registry.addInterceptor(getLoginInterceptor()).addPathPatterns(<span class=\\\"hljs-string\\\">\\\"/**\\\"</span>)\\n                .excludePathPatterns(<span class=\\\"hljs-string\\\">\\\"/*/login\\\"</span>);;\\n        <span class=\\\"hljs-keyword\\\">super</span>.addInterceptors(registry);\\n    }\\n}\\n</code></div></pre>\\n<p>这里大家注意，看看自己的代码有没有因为添加拦截器而创建了一个配置类，该类继承了<code>WebMvcConfigurationSupport</code>，就是他！以前是用 <code>WebMvcConfigurerAdapter</code> ，springboot 2.0 建议使用 <code>WebMvcConfigurationSupport</code> 。但是在添加拦截器并继承 <code>WebMvcConfigurationSupport</code> 后会覆盖<code>@EnableAutoConfiguration</code>关于<code>WebMvcAutoConfiguration</code>的配置！从而导致所有的Date返回都变成时间戳！<br />\\n可以采用另外一种方式，在你继承<code>WebMvcConfigurationSupport</code>的子类中添加日期转换的bean<br />\\n以下是我更改后的代码</p>\\n<pre><div class=\\\"hljs\\\"><code class=\\\"lang-java\\\"><span class=\\\"hljs-keyword\\\">package</span> com.wsy.blog.config;\\n\\n<span class=\\\"hljs-keyword\\\">import</span> com.fasterxml.jackson.databind.DeserializationFeature;\\n<span class=\\\"hljs-keyword\\\">import</span> com.fasterxml.jackson.databind.ObjectMapper;\\n<span class=\\\"hljs-keyword\\\">import</span> com.wsy.blog.interceptor.LoginInterceptor;\\n<span class=\\\"hljs-keyword\\\">import</span> org.springframework.context.annotation.Bean;\\n<span class=\\\"hljs-keyword\\\">import</span> org.springframework.context.annotation.Configuration;\\n<span class=\\\"hljs-keyword\\\">import</span> org.springframework.http.converter.HttpMessageConverter;\\n<span class=\\\"hljs-keyword\\\">import</span> org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;\\n<span class=\\\"hljs-keyword\\\">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistry;\\n<span class=\\\"hljs-keyword\\\">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport;\\n\\n<span class=\\\"hljs-keyword\\\">import</span> java.text.SimpleDateFormat;\\n<span class=\\\"hljs-keyword\\\">import</span> java.util.List;\\n\\n<span class=\\\"hljs-comment\\\">/**\\n * <span class=\\\"hljs-doctag\\\">@Author</span>: wsy\\n * <span class=\\\"hljs-doctag\\\">@Date</span>: 2020/8/10 11:34\\n */</span>\\n<span class=\\\"hljs-meta\\\">@Configuration</span>\\n<span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-class\\\"><span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title\\\">InterceptorConfig</span> <span class=\\\"hljs-keyword\\\">extends</span> <span class=\\\"hljs-title\\\">WebMvcConfigurationSupport</span> </span>{\\n\\n    <span class=\\\"hljs-meta\\\">@Bean</span>\\n    <span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">public</span> LoginInterceptor <span class=\\\"hljs-title\\\">getLoginInterceptor</span><span class=\\\"hljs-params\\\">()</span> </span>{\\n        <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-keyword\\\">new</span> LoginInterceptor();\\n    }\\n\\n    <span class=\\\"hljs-comment\\\">/**\\n     * 定义时间格式转换器\\n     * <span class=\\\"hljs-doctag\\\">@return</span>  MappingJackson2HttpMessageConverter\\n     */</span>\\n    <span class=\\\"hljs-meta\\\">@Bean</span>\\n    <span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">public</span> MappingJackson2HttpMessageConverter <span class=\\\"hljs-title\\\">jackson2HttpMessageConverter</span><span class=\\\"hljs-params\\\">()</span> </span>{\\n        MappingJackson2HttpMessageConverter converter = <span class=\\\"hljs-keyword\\\">new</span> MappingJackson2HttpMessageConverter();\\n        ObjectMapper mapper = <span class=\\\"hljs-keyword\\\">new</span> ObjectMapper();\\n        mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, <span class=\\\"hljs-keyword\\\">false</span>);\\n        mapper.setDateFormat(<span class=\\\"hljs-keyword\\\">new</span> SimpleDateFormat(<span class=\\\"hljs-string\\\">\\\"yyyy-MM-dd HH:mm:ss\\\"</span>));\\n        converter.setObjectMapper(mapper);\\n        <span class=\\\"hljs-keyword\\\">return</span> converter;\\n    }\\n\\n    <span class=\\\"hljs-comment\\\">/**\\n     * 添加转换器\\n     * <span class=\\\"hljs-doctag\\\">@param</span> converters    converters\\n     */</span>\\n    <span class=\\\"hljs-meta\\\">@Override</span>\\n    <span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title\\\">configureMessageConverters</span><span class=\\\"hljs-params\\\">(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters)</span> </span>{\\n        <span class=\\\"hljs-comment\\\">//将我们定义的时间格式转换器添加到转换器列表中,</span>\\n        <span class=\\\"hljs-comment\\\">//这样jackson格式化时候但凡遇到Date类型就会转换成我们定义的格式</span>\\n        converters.add(jackson2HttpMessageConverter());\\n    }\\n\\n    <span class=\\\"hljs-comment\\\">/**\\n     * 添加拦截器\\n     * <span class=\\\"hljs-doctag\\\">@param</span> registry  拦截器注册\\n     */</span>\\n    <span class=\\\"hljs-meta\\\">@Override</span>\\n    <span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">protected</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title\\\">addInterceptors</span><span class=\\\"hljs-params\\\">(InterceptorRegistry registry)</span> </span>{\\n        <span class=\\\"hljs-comment\\\">// TODO Auto-generated method stub</span>\\n        registry.addInterceptor(getLoginInterceptor()).addPathPatterns(<span class=\\\"hljs-string\\\">\\\"/**\\\"</span>)\\n                .excludePathPatterns(<span class=\\\"hljs-string\\\">\\\"/*/login\\\"</span>);;\\n        <span class=\\\"hljs-keyword\\\">super</span>.addInterceptors(registry);\\n    }\\n}\\n</code></div></pre>\\n<p>感谢博主的分享经验<br />\\n参考博客：<a href=\\\"https://blog.csdn.net/qq_34975710/article/details/84872489\\\" target=\\\"_blank\\\">https://blog.csdn.net/qq_34975710/article/details/84872489</a></p>\\n\",\"blogGoods\":1,\"blogId\":\"1331436834413211648\",\"blogImage\":\"http://808km.top/blog/img/default.jpg\",\"blogRead\":71,\"blogTitle\":\"springboot 后端传给前端相差8小时\",\"blogType\":9,\"createdTime\":1606274253000,\"typeName\":\"Springboot\",\"updateTime\":1607333950000,\"version\":37},\"msg\":\"阅读成功\"}', '218.77.40.92', '2020-12-16 09:57:27', NULL);
INSERT INTO `bl_log` VALUES (2763, '阅读博客', '//blog/read/1331436834413211648', '[1331436834413211648]', 1, NULL, 'PUT', 59, '{\"code\":20000,\"data\":{\"blogCollection\":0,\"blogComment\":0,\"blogContent\":\"<p>在开发中日期最常打交道的东西之一，但是日期又会存在各式各样的格式，常见的情形就是，从数据库取出的日期往往都是时间戳（毫秒数）的形式，这个一般情况下是前端不想要的结果，需要进行处理，那在springboot中比较简单：<br />\\n因为后端传给前端时默认使用jackson转换格式所以我们可以</p>\\n<ol>\\n<li>在application.yml中设置</li>\\n</ol>\\n<pre><div class=\\\"hljs\\\"><code class=\\\"lang-yml\\\"><span class=\\\"hljs-attr\\\">spring:</span>\\n<span class=\\\"hljs-attr\\\">  jackson:</span>\\n<span class=\\\"hljs-attr\\\">    date-format:</span> <span class=\\\"hljs-string\\\">yyyy-MM-dd</span> <span class=\\\"hljs-attr\\\">HH:mm:ss</span>\\n<span class=\\\"hljs-attr\\\">    time-zone:</span> <span class=\\\"hljs-string\\\">GMT+8</span>\\n</code></div></pre>\\n<ol start=\\\"2\\\">\\n<li>在pojo对象上添加@JsonFormat注解</li>\\n</ol>\\n<pre><div class=\\\"hljs\\\"><code class=\\\"lang-java\\\">    <span class=\\\"hljs-meta\\\">@JsonFormat</span>(pattern = <span class=\\\"hljs-string\\\">\\\"yyyy-MM-dd HH:mm:ss\\\"</span>, timezone = <span class=\\\"hljs-string\\\">\\\"GMT+8\\\"</span>)\\n    <span class=\\\"hljs-keyword\\\">private</span> Date createdTime;\\n</code></div></pre>\\n<p>但是我在尝试了这两个方法以及相类似的方法，但是都无效，要么就是格式化无效，直接返回的时间戳，要么就是时间还是相差8个小时，但是格式化有效。</p>\\n<p>这时我看到了另外一篇不一样的博客，随后明白了为什么我的配置没有用，原来是因为我添加拦截器时写的配置类的问题。<br />\\n以下代码是我更改之前的配置类</p>\\n<pre><div class=\\\"hljs\\\"><code class=\\\"lang-java\\\"><span class=\\\"hljs-keyword\\\">package</span> com.wsy.blog.config;\\n\\n<span class=\\\"hljs-keyword\\\">import</span> com.fasterxml.jackson.databind.DeserializationFeature;\\n<span class=\\\"hljs-keyword\\\">import</span> com.fasterxml.jackson.databind.ObjectMapper;\\n<span class=\\\"hljs-keyword\\\">import</span> com.wsy.blog.interceptor.LoginInterceptor;\\n<span class=\\\"hljs-keyword\\\">import</span> org.springframework.context.annotation.Bean;\\n<span class=\\\"hljs-keyword\\\">import</span> org.springframework.context.annotation.Configuration;\\n<span class=\\\"hljs-keyword\\\">import</span> org.springframework.http.converter.HttpMessageConverter;\\n<span class=\\\"hljs-keyword\\\">import</span> org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;\\n<span class=\\\"hljs-keyword\\\">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistry;\\n<span class=\\\"hljs-keyword\\\">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport;\\n\\n<span class=\\\"hljs-keyword\\\">import</span> java.text.SimpleDateFormat;\\n<span class=\\\"hljs-keyword\\\">import</span> java.util.List;\\n\\n<span class=\\\"hljs-comment\\\">/**\\n * <span class=\\\"hljs-doctag\\\">@Author</span>: wsy\\n * <span class=\\\"hljs-doctag\\\">@Date</span>: 2020/8/10 11:34\\n */</span>\\n<span class=\\\"hljs-meta\\\">@Configuration</span>\\n<span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-class\\\"><span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title\\\">InterceptorConfig</span> <span class=\\\"hljs-keyword\\\">extends</span> <span class=\\\"hljs-title\\\">WebMvcConfigurationSupport</span> </span>{\\n\\n    <span class=\\\"hljs-meta\\\">@Bean</span>\\n    <span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">public</span> LoginInterceptor <span class=\\\"hljs-title\\\">getLoginInterceptor</span><span class=\\\"hljs-params\\\">()</span> </span>{\\n        <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-keyword\\\">new</span> LoginInterceptor();\\n    }\\n\\n    <span class=\\\"hljs-comment\\\">/**\\n     * 添加拦截器\\n     * <span class=\\\"hljs-doctag\\\">@param</span> registry  拦截器注册\\n     */</span>\\n    <span class=\\\"hljs-meta\\\">@Override</span>\\n    <span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">protected</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title\\\">addInterceptors</span><span class=\\\"hljs-params\\\">(InterceptorRegistry registry)</span> </span>{\\n        <span class=\\\"hljs-comment\\\">// TODO Auto-generated method stub</span>\\n        registry.addInterceptor(getLoginInterceptor()).addPathPatterns(<span class=\\\"hljs-string\\\">\\\"/**\\\"</span>)\\n                .excludePathPatterns(<span class=\\\"hljs-string\\\">\\\"/*/login\\\"</span>);;\\n        <span class=\\\"hljs-keyword\\\">super</span>.addInterceptors(registry);\\n    }\\n}\\n</code></div></pre>\\n<p>这里大家注意，看看自己的代码有没有因为添加拦截器而创建了一个配置类，该类继承了<code>WebMvcConfigurationSupport</code>，就是他！以前是用 <code>WebMvcConfigurerAdapter</code> ，springboot 2.0 建议使用 <code>WebMvcConfigurationSupport</code> 。但是在添加拦截器并继承 <code>WebMvcConfigurationSupport</code> 后会覆盖<code>@EnableAutoConfiguration</code>关于<code>WebMvcAutoConfiguration</code>的配置！从而导致所有的Date返回都变成时间戳！<br />\\n可以采用另外一种方式，在你继承<code>WebMvcConfigurationSupport</code>的子类中添加日期转换的bean<br />\\n以下是我更改后的代码</p>\\n<pre><div class=\\\"hljs\\\"><code class=\\\"lang-java\\\"><span class=\\\"hljs-keyword\\\">package</span> com.wsy.blog.config;\\n\\n<span class=\\\"hljs-keyword\\\">import</span> com.fasterxml.jackson.databind.DeserializationFeature;\\n<span class=\\\"hljs-keyword\\\">import</span> com.fasterxml.jackson.databind.ObjectMapper;\\n<span class=\\\"hljs-keyword\\\">import</span> com.wsy.blog.interceptor.LoginInterceptor;\\n<span class=\\\"hljs-keyword\\\">import</span> org.springframework.context.annotation.Bean;\\n<span class=\\\"hljs-keyword\\\">import</span> org.springframework.context.annotation.Configuration;\\n<span class=\\\"hljs-keyword\\\">import</span> org.springframework.http.converter.HttpMessageConverter;\\n<span class=\\\"hljs-keyword\\\">import</span> org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;\\n<span class=\\\"hljs-keyword\\\">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistry;\\n<span class=\\\"hljs-keyword\\\">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport;\\n\\n<span class=\\\"hljs-keyword\\\">import</span> java.text.SimpleDateFormat;\\n<span class=\\\"hljs-keyword\\\">import</span> java.util.List;\\n\\n<span class=\\\"hljs-comment\\\">/**\\n * <span class=\\\"hljs-doctag\\\">@Author</span>: wsy\\n * <span class=\\\"hljs-doctag\\\">@Date</span>: 2020/8/10 11:34\\n */</span>\\n<span class=\\\"hljs-meta\\\">@Configuration</span>\\n<span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-class\\\"><span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title\\\">InterceptorConfig</span> <span class=\\\"hljs-keyword\\\">extends</span> <span class=\\\"hljs-title\\\">WebMvcConfigurationSupport</span> </span>{\\n\\n    <span class=\\\"hljs-meta\\\">@Bean</span>\\n    <span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">public</span> LoginInterceptor <span class=\\\"hljs-title\\\">getLoginInterceptor</span><span class=\\\"hljs-params\\\">()</span> </span>{\\n        <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-keyword\\\">new</span> LoginInterceptor();\\n    }\\n\\n    <span class=\\\"hljs-comment\\\">/**\\n     * 定义时间格式转换器\\n     * <span class=\\\"hljs-doctag\\\">@return</span>  MappingJackson2HttpMessageConverter\\n     */</span>\\n    <span class=\\\"hljs-meta\\\">@Bean</span>\\n    <span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">public</span> MappingJackson2HttpMessageConverter <span class=\\\"hljs-title\\\">jackson2HttpMessageConverter</span><span class=\\\"hljs-params\\\">()</span> </span>{\\n        MappingJackson2HttpMessageConverter converter = <span class=\\\"hljs-keyword\\\">new</span> MappingJackson2HttpMessageConverter();\\n        ObjectMapper mapper = <span class=\\\"hljs-keyword\\\">new</span> ObjectMapper();\\n        mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, <span class=\\\"hljs-keyword\\\">false</span>);\\n        mapper.setDateFormat(<span class=\\\"hljs-keyword\\\">new</span> SimpleDateFormat(<span class=\\\"hljs-string\\\">\\\"yyyy-MM-dd HH:mm:ss\\\"</span>));\\n        converter.setObjectMapper(mapper);\\n        <span class=\\\"hljs-keyword\\\">return</span> converter;\\n    }\\n\\n    <span class=\\\"hljs-comment\\\">/**\\n     * 添加转换器\\n     * <span class=\\\"hljs-doctag\\\">@param</span> converters    converters\\n     */</span>\\n    <span class=\\\"hljs-meta\\\">@Override</span>\\n    <span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title\\\">configureMessageConverters</span><span class=\\\"hljs-params\\\">(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters)</span> </span>{\\n        <span class=\\\"hljs-comment\\\">//将我们定义的时间格式转换器添加到转换器列表中,</span>\\n        <span class=\\\"hljs-comment\\\">//这样jackson格式化时候但凡遇到Date类型就会转换成我们定义的格式</span>\\n        converters.add(jackson2HttpMessageConverter());\\n    }\\n\\n    <span class=\\\"hljs-comment\\\">/**\\n     * 添加拦截器\\n     * <span class=\\\"hljs-doctag\\\">@param</span> registry  拦截器注册\\n     */</span>\\n    <span class=\\\"hljs-meta\\\">@Override</span>\\n    <span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">protected</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title\\\">addInterceptors</span><span class=\\\"hljs-params\\\">(InterceptorRegistry registry)</span> </span>{\\n        <span class=\\\"hljs-comment\\\">// TODO Auto-generated method stub</span>\\n        registry.addInterceptor(getLoginInterceptor()).addPathPatterns(<span class=\\\"hljs-string\\\">\\\"/**\\\"</span>)\\n                .excludePathPatterns(<span class=\\\"hljs-string\\\">\\\"/*/login\\\"</span>);;\\n        <span class=\\\"hljs-keyword\\\">super</span>.addInterceptors(registry);\\n    }\\n}\\n</code></div></pre>\\n<p>感谢博主的分享经验<br />\\n参考博客：<a href=\\\"https://blog.csdn.net/qq_34975710/article/details/84872489\\\" target=\\\"_blank\\\">https://blog.csdn.net/qq_34975710/article/details/84872489</a></p>\\n\",\"blogGoods\":1,\"blogId\":\"1331436834413211648\",\"blogImage\":\"http://808km.top/blog/img/default.jpg\",\"blogRead\":72,\"blogTitle\":\"springboot 后端传给前端相差8小时\",\"blogType\":9,\"createdTime\":1606274253000,\"typeName\":\"Springboot\",\"updateTime\":1608083846000,\"version\":37},\"msg\":\"阅读成功\"}', '218.77.40.92', '2020-12-17 10:24:17', NULL);
INSERT INTO `bl_log` VALUES (2764, '阅读博客', '//blog/read/1333708609683533824', '[1333708609683533824]', 1, NULL, 'PUT', 25, '{\"code\":20000,\"data\":{\"blogCollection\":1,\"blogComment\":0,\"blogContent\":\"<h1><a id=\\\"_0\\\"></a>前言</h1>\\n<p>今天在给博客更新，将session存到redis中持久化存储，正常操作是没问题的，但是后来尝试发现，在我输入的密码是错误的时候，他也创建了session，经过我的一番从尾到头的debug。。。。<br />\\n复杂的debug过程就不贴出来了，放出问题的根源<br />\\n在登陆时，会访问到我用来记录日志的切面,而我的记录日志方法中有一个需要获取到当前登录的用户的信息，来完善日志的字段</p>\\n<blockquote>\\n<p><img src=\\\"http://808km.top/blog/img/img/blogImg/1333703986787631104\\\" alt=\\\"image.png\\\" /><br />\\n以下是工具类中的原方法：<br />\\n<img src=\\\"http://808km.top/blog/img/img/blogImg/1333704236625543168\\\" alt=\\\"image.png\\\" /><br />\\n以下是修改后的方法<br />\\n<img src=\\\"http://808km.top/blog/img/img/blogImg/1333704399599419392\\\" alt=\\\"image.png\\\" /><br />\\n这就是问题的根源，因为在我登录的时候，要记录日志，然后去调用工具类，工具类去获取session，如果没有getSession(false)的话，就会判断session是否存在，如果不存在的话就会自动创建session，这就是为什么明明密码错了还会创建session的原因</p>\\n</blockquote>\\n\",\"blogGoods\":1,\"blogId\":\"1333708609683533824\",\"blogImage\":\"http://808km.top/blog/img/default.jpg\",\"blogRead\":38,\"blogRemark\":\"shiro+redis整合实现session持久化登陆失败时也会生成session问题\",\"blogTitle\":\"shiro+redis整合实现session持久化登陆失败时也会生成session问题\",\"blogType\":6,\"createdTime\":1606815886000,\"typeName\":\"Java\",\"updateTime\":1607334721000,\"version\":3},\"msg\":\"阅读成功\"}', '119.39.43.27', '2020-12-22 13:37:32', NULL);
INSERT INTO `bl_log` VALUES (2765, '阅读博客', '//blog/read/1333708609683533824', '[1333708609683533824]', 1, NULL, 'PUT', 34, '{\"code\":20000,\"data\":{\"blogCollection\":1,\"blogComment\":0,\"blogContent\":\"<h1><a id=\\\"_0\\\"></a>前言</h1>\\n<p>今天在给博客更新，将session存到redis中持久化存储，正常操作是没问题的，但是后来尝试发现，在我输入的密码是错误的时候，他也创建了session，经过我的一番从尾到头的debug。。。。<br />\\n复杂的debug过程就不贴出来了，放出问题的根源<br />\\n在登陆时，会访问到我用来记录日志的切面,而我的记录日志方法中有一个需要获取到当前登录的用户的信息，来完善日志的字段</p>\\n<blockquote>\\n<p><img src=\\\"http://808km.top/blog/img/img/blogImg/1333703986787631104\\\" alt=\\\"image.png\\\" /><br />\\n以下是工具类中的原方法：<br />\\n<img src=\\\"http://808km.top/blog/img/img/blogImg/1333704236625543168\\\" alt=\\\"image.png\\\" /><br />\\n以下是修改后的方法<br />\\n<img src=\\\"http://808km.top/blog/img/img/blogImg/1333704399599419392\\\" alt=\\\"image.png\\\" /><br />\\n这就是问题的根源，因为在我登录的时候，要记录日志，然后去调用工具类，工具类去获取session，如果没有getSession(false)的话，就会判断session是否存在，如果不存在的话就会自动创建session，这就是为什么明明密码错了还会创建session的原因</p>\\n</blockquote>\\n\",\"blogGoods\":1,\"blogId\":\"1333708609683533824\",\"blogImage\":\"http://808km.top/blog/img/default.jpg\",\"blogRead\":39,\"blogRemark\":\"shiro+redis整合实现session持久化登陆失败时也会生成session问题\",\"blogTitle\":\"shiro+redis整合实现session持久化登陆失败时也会生成session问题\",\"blogType\":6,\"createdTime\":1606815886000,\"typeName\":\"Java\",\"updateTime\":1608615452000,\"version\":3},\"msg\":\"阅读成功\"}', '119.39.43.27', '2020-12-22 13:38:05', NULL);
INSERT INTO `bl_log` VALUES (2766, '阅读博客', '//blog/read/1333708609683533824', '[1333708609683533824]', 1, NULL, 'PUT', 22, '{\"code\":20000,\"data\":{\"blogCollection\":1,\"blogComment\":0,\"blogContent\":\"<h1><a id=\\\"_0\\\"></a>前言</h1>\\n<p>今天在给博客更新，将session存到redis中持久化存储，正常操作是没问题的，但是后来尝试发现，在我输入的密码是错误的时候，他也创建了session，经过我的一番从尾到头的debug。。。。<br />\\n复杂的debug过程就不贴出来了，放出问题的根源<br />\\n在登陆时，会访问到我用来记录日志的切面,而我的记录日志方法中有一个需要获取到当前登录的用户的信息，来完善日志的字段</p>\\n<blockquote>\\n<p><img src=\\\"http://808km.top/blog/img/img/blogImg/1333703986787631104\\\" alt=\\\"image.png\\\" /><br />\\n以下是工具类中的原方法：<br />\\n<img src=\\\"http://808km.top/blog/img/img/blogImg/1333704236625543168\\\" alt=\\\"image.png\\\" /><br />\\n以下是修改后的方法<br />\\n<img src=\\\"http://808km.top/blog/img/img/blogImg/1333704399599419392\\\" alt=\\\"image.png\\\" /><br />\\n这就是问题的根源，因为在我登录的时候，要记录日志，然后去调用工具类，工具类去获取session，如果没有getSession(false)的话，就会判断session是否存在，如果不存在的话就会自动创建session，这就是为什么明明密码错了还会创建session的原因</p>\\n</blockquote>\\n\",\"blogGoods\":1,\"blogId\":\"1333708609683533824\",\"blogImage\":\"http://808km.top/blog/img/default.jpg\",\"blogRead\":40,\"blogRemark\":\"shiro+redis整合实现session持久化登陆失败时也会生成session问题\",\"blogTitle\":\"shiro+redis整合实现session持久化登陆失败时也会生成session问题\",\"blogType\":6,\"createdTime\":1606815886000,\"typeName\":\"Java\",\"updateTime\":1608615484000,\"version\":3},\"msg\":\"阅读成功\"}', '119.39.43.27', '2020-12-22 13:39:09', NULL);
INSERT INTO `bl_log` VALUES (2767, '阅读博客', '//blog/read/1333708609683533824', '[1333708609683533824]', 1, NULL, 'PUT', 41, '{\"code\":20000,\"data\":{\"blogCollection\":1,\"blogComment\":0,\"blogContent\":\"<h1><a id=\\\"_0\\\"></a>前言</h1>\\n<p>今天在给博客更新，将session存到redis中持久化存储，正常操作是没问题的，但是后来尝试发现，在我输入的密码是错误的时候，他也创建了session，经过我的一番从尾到头的debug。。。。<br />\\n复杂的debug过程就不贴出来了，放出问题的根源<br />\\n在登陆时，会访问到我用来记录日志的切面,而我的记录日志方法中有一个需要获取到当前登录的用户的信息，来完善日志的字段</p>\\n<blockquote>\\n<p><img src=\\\"http://808km.top/blog/img/img/blogImg/1333703986787631104\\\" alt=\\\"image.png\\\" /><br />\\n以下是工具类中的原方法：<br />\\n<img src=\\\"http://808km.top/blog/img/img/blogImg/1333704236625543168\\\" alt=\\\"image.png\\\" /><br />\\n以下是修改后的方法<br />\\n<img src=\\\"http://808km.top/blog/img/img/blogImg/1333704399599419392\\\" alt=\\\"image.png\\\" /><br />\\n这就是问题的根源，因为在我登录的时候，要记录日志，然后去调用工具类，工具类去获取session，如果没有getSession(false)的话，就会判断session是否存在，如果不存在的话就会自动创建session，这就是为什么明明密码错了还会创建session的原因</p>\\n</blockquote>\\n\",\"blogGoods\":1,\"blogId\":\"1333708609683533824\",\"blogImage\":\"http://808km.top/blog/img/default.jpg\",\"blogRead\":41,\"blogRemark\":\"shiro+redis整合实现session持久化登陆失败时也会生成session问题\",\"blogTitle\":\"shiro+redis整合实现session持久化登陆失败时也会生成session问题\",\"blogType\":6,\"createdTime\":1606815886000,\"typeName\":\"Java\",\"updateTime\":1608615548000,\"version\":3},\"msg\":\"阅读成功\"}', '119.39.43.27', '2020-12-22 13:40:02', NULL);
INSERT INTO `bl_log` VALUES (2768, '阅读博客', '//blog/read/1333708609683533824', '[1333708609683533824]', 1, NULL, 'PUT', 19, '{\"code\":20000,\"data\":{\"blogCollection\":1,\"blogComment\":0,\"blogContent\":\"<h1><a id=\\\"_0\\\"></a>前言</h1>\\n<p>今天在给博客更新，将session存到redis中持久化存储，正常操作是没问题的，但是后来尝试发现，在我输入的密码是错误的时候，他也创建了session，经过我的一番从尾到头的debug。。。。<br />\\n复杂的debug过程就不贴出来了，放出问题的根源<br />\\n在登陆时，会访问到我用来记录日志的切面,而我的记录日志方法中有一个需要获取到当前登录的用户的信息，来完善日志的字段</p>\\n<blockquote>\\n<p><img src=\\\"http://808km.top/blog/img/img/blogImg/1333703986787631104\\\" alt=\\\"image.png\\\" /><br />\\n以下是工具类中的原方法：<br />\\n<img src=\\\"http://808km.top/blog/img/img/blogImg/1333704236625543168\\\" alt=\\\"image.png\\\" /><br />\\n以下是修改后的方法<br />\\n<img src=\\\"http://808km.top/blog/img/img/blogImg/1333704399599419392\\\" alt=\\\"image.png\\\" /><br />\\n这就是问题的根源，因为在我登录的时候，要记录日志，然后去调用工具类，工具类去获取session，如果没有getSession(false)的话，就会判断session是否存在，如果不存在的话就会自动创建session，这就是为什么明明密码错了还会创建session的原因</p>\\n</blockquote>\\n\",\"blogGoods\":1,\"blogId\":\"1333708609683533824\",\"blogImage\":\"http://808km.top/blog/img/default.jpg\",\"blogRead\":42,\"blogRemark\":\"shiro+redis整合实现session持久化登陆失败时也会生成session问题\",\"blogTitle\":\"shiro+redis整合实现session持久化登陆失败时也会生成session问题\",\"blogType\":6,\"createdTime\":1606815886000,\"typeName\":\"Java\",\"updateTime\":1608615602000,\"version\":3},\"msg\":\"阅读成功\"}', '119.39.43.27', '2020-12-22 13:42:29', NULL);
INSERT INTO `bl_log` VALUES (2769, '阅读博客', '//blog/read/1333411378995605504', '[1333411378995605504]', 1, NULL, 'PUT', 23, '{\"code\":20000,\"data\":{\"blogCollection\":0,\"blogComment\":0,\"blogContent\":\"<h2><a id=\\\"_0\\\"></a>预备环境准备</h2>\\n<p>Nacos 依赖 <a href=\\\"https://docs.oracle.com/cd/E19182-01/820-7851/inst_cli_jdk_javahome_t/\\\" target=\\\"_blank\\\">Java</a> 环境来运行。如果您是从代码开始构建并运行Nacos，还需要为此配置 <a href=\\\"https://maven.apache.org/index.html\\\" target=\\\"_blank\\\">Maven</a>环境，请确保是在以下版本环境中安装使用:</p>\\n<ol>\\n<li>64 bit OS，支持 Linux/Unix/Mac/Windows，推荐选用 Linux/Unix/Mac。</li>\\n<li>64 bit JDK 1.8+；<a href=\\\"http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html\\\" target=\\\"_blank\\\">下载</a> &amp; <a href=\\\"https://docs.oracle.com/cd/E19182-01/820-7851/inst_cli_jdk_javahome_t/\\\" target=\\\"_blank\\\">配置</a>。</li>\\n<li>Maven 3.2.x+；<a href=\\\"https://maven.apache.org/download.cgi\\\" target=\\\"_blank\\\">下载</a> &amp; <a href=\\\"https://maven.apache.org/settings.html\\\" target=\\\"_blank\\\">配置</a>。</li>\\n</ol>\\n<h2><a id=\\\"nacos_8\\\"></a>下载nacos安装包</h2>\\n<p>https://github.com/alibaba/nacos/releases/tag/1.4.0</p>\\n<blockquote>\\n<p><img src=\\\"https://img-blog.csdnimg.cn/20201130205557917.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ0ODU5OA==,size_16,color_FFFFFF,t_70\\\" alt=\\\"在这里插入图片描述\\\" /></p>\\n</blockquote>\\n<p>linux选择第一个</p>\\n<p>windows选择第二个</p>\\n<h2><a id=\\\"_21\\\"></a>搭建环境</h2>\\n<h3><a id=\\\"_23\\\"></a>集群模式部署</h3>\\n<p>这个快速开始手册是帮忙您快速在你的电脑上，下载安装并使用Nacos，部署生产使用的集群模式。</p>\\n<h3><a id=\\\"_27\\\"></a>集群部署架构图</h3>\\n<p><img src=\\\"https://img-blog.csdnimg.cn/20201130205609797.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ0ODU5OA==,size_16,color_FFFFFF,t_70\\\" alt=\\\"在这里插入图片描述\\\" /></p>\\n<p>VIP:虚拟ip</p>\\n<p>因此开源的时候推荐用户把所有服务列表放到一个vip下面，然后挂到一个域名下面</p>\\n<p><a href=\\\"http://ip1/\\\" target=\\\"_blank\\\">http://ip1</a>:port/openAPI 直连ip模式，机器挂则需要修改ip才可以使用。</p>\\n<p><a href=\\\"http://vip/\\\" target=\\\"_blank\\\">http://VIP</a>:port/openAPI 挂载VIP模式，直连vip即可，下面挂server真实ip，可读性不好。</p>\\n<p><a href=\\\"http://nacos.com/\\\" target=\\\"_blank\\\">http://nacos.com</a>:port/openAPI 域名 + VIP模式，可读性好，而且换ip方便，推荐模式</p>\\n<h3><a id=\\\"_42\\\"></a>创建目录</h3>\\n<p>该目录存放nacos集群</p>\\n<pre><div class=\\\"hljs\\\"><code class=\\\"lang-sh\\\">mkdir /usr/<span class=\\\"hljs-built_in\\\">local</span>/nacos\\n</code></div></pre>\\n<h3><a id=\\\"nacos_50\\\"></a>上传nacos</h3>\\n<blockquote>\\n<p><img src=\\\"https://img-blog.csdnimg.cn/20201130205630233.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ0ODU5OA==,size_16,color_FFFFFF,t_70\\\" alt=\\\"在这里插入图片描述\\\" /></p>\\n</blockquote>\\n<h3><a id=\\\"nacos_54\\\"></a>解压nacos</h3>\\n<pre><div class=\\\"hljs\\\"><code class=\\\"lang-sh\\\">tar -zxvf nacos-server-1.4.0.tar.gz\\n</code></div></pre>\\n<h3><a id=\\\"nacos_60\\\"></a>创建nacos持久化数据库</h3>\\n<p>首先使用navicat连接mysql数据库，然后创建数据库</p>\\n<p><img src=\\\"https://img-blog.csdnimg.cn/20201130205643439.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ0ODU5OA==,size_16,color_FFFFFF,t_70\\\" alt=\\\"在这里插入图片描述\\\" /></p>\\n<p>新建查询后导入SQL脚本即可</p>\\n<p><img src=\\\"https://img-blog.csdnimg.cn/20201130205705669.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ0ODU5OA==,size_16,color_FFFFFF,t_70\\\" alt=\\\"在这里插入图片描述\\\" /></p>\\n<p>红色框选那栏填写你的SQL脚本位置，SQL脚本在nacos文件夹下的conf下</p>\\n<h3><a id=\\\"nacos_73\\\"></a>nacos文件夹改名</h3>\\n<p>将文件夹名改为nacos3333代表这个nacos的端口号是3333</p>\\n<pre><div class=\\\"hljs\\\"><code class=\\\"lang-sh\\\">mv nacos nacos3333\\n</code></div></pre>\\n<h3><a id=\\\"_81\\\"></a>配置修改</h3>\\n<p>首先进入到配置目录</p>\\n<pre><div class=\\\"hljs\\\"><code class=\\\"lang-sh\\\"><span class=\\\"hljs-built_in\\\">cd</span> /usr/<span class=\\\"hljs-built_in\\\">local</span>/nacos/nacos3333/conf\\n</code></div></pre>\\n<blockquote>\\n<p><img src=\\\"https://img-blog.csdnimg.cn/2020113020572431.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ0ODU5OA==,size_16,color_FFFFFF,t_70\\\" alt=\\\"在这里插入图片描述\\\" /></p>\\n</blockquote>\\n<p>在更改配置之前先备份配置</p>\\n<pre><div class=\\\"hljs\\\"><code class=\\\"lang-sh\\\">cp application.properties application.properties.example\\n</code></div></pre>\\n<pre><div class=\\\"hljs\\\"><code class=\\\"lang-sh\\\">cp cluster.conf.example cluster.conf\\n</code></div></pre>\\n<h3><a id=\\\"_104\\\"></a>集群配置</h3>\\n<pre><div class=\\\"hljs\\\"><code class=\\\"lang-sh\\\">vim cluster.conf\\n</code></div></pre>\\n<blockquote>\\n<p><img src=\\\"https://img-blog.csdnimg.cn/20201130205739435.png\\\" alt=\\\"在这里插入图片描述\\\" /></p>\\n</blockquote>\\n<blockquote>\\n<p>注意这里不能填写localhost 或者127.0.0.1，这里如果是在本机搭建可以查看本机ip后填写</p>\\n<pre><div class=\\\"hljs\\\"><code class=\\\"lang-sh\\\">hostname -i\\n</code></div></pre>\\n<p><img src=\\\"https://img-blog.csdnimg.cn/20201130205749116.png\\\" alt=\\\"在这里插入图片描述\\\" /></p>\\n</blockquote>\\n<h3><a id=\\\"nacos_122\\\"></a>nacos配置</h3>\\n<pre><div class=\\\"hljs\\\"><code class=\\\"lang-sh\\\">vim application.properties\\n</code></div></pre>\\n<pre><code class=\\\"lang-properties\\\">\\n#*************** Spring Boot Related Configurations ***************#\\n### Default web context path:\\nserver.servlet.contextPath=/nacos\\n### Default web server port:\\nserver.port=3333\\n\\n#*************** Network Related Configurations ***************#\\n### If prefer hostname over ip for Nacos server addresses in cluster.conf:\\n# nacos.inetutils.prefer-hostname-over-ip=false\\n\\n### Specify local server\'s IP:\\n# nacos.inetutils.ip-address=\\n\\n\\n#*************** Config Module Related Configurations ***************#\\n### If use MySQL as datasource:\\n spring.datasource.platform=mysql\\n\\n### Count of DB:\\n db.num=1\\n\\n### Connect URL of DB:\\ndb.url.0=jdbc:mysql://127.0.0.1:3306/nacos_config?characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true&amp;useUnicode=true&amp;useSSL=false&amp;serverTimezone=UTC\\ndb.user=root\\ndb.password=123456\\n\\n\\n#*************** Naming Module Related Configurations ***************#\\n### Data dispatch task execution period in milliseconds:\\n# nacos.naming.distro.taskDispatchPeriod=200\\n\\n### Data count of batch sync task:\\n# nacos.naming.distro.batchSyncKeyCount=1000\\n\\n### Retry delay in milliseconds if sync task failed:\\n# nacos.naming.distro.syncRetryDelay=5000\\n\\n### If enable data warmup. If set to false, the server would accept request without local data preparation:\\n# nacos.naming.data.warmup=true\\n\\n### If enable the instance auto expiration, kind like of health check of instance:\\n# nacos.naming.expireInstance=true\\n\\nnacos.naming.empty-service.auto-clean=true\\nnacos.naming.empty-service.clean.initial-delay-ms=50000\\nnacos.naming.empty-service.clean.period-time-ms=30000\\n\\n\\n#*************** CMDB Module Related Configurations ***************#\\n### The interval to dump external CMDB in seconds:\\n# nacos.cmdb.dumpTaskInterval=3600\\n\\n### The interval of polling data change event in seconds:\\n# nacos.cmdb.eventTaskInterval=10\\n\\n### The interval of loading labels in seconds:\\n# nacos.cmdb.labelTaskInterval=300\\n\\n### If turn on data loading task:\\n# nacos.cmdb.loadDataAtStart=false\\n\\n\\n#*************** Metrics Related Configurations ***************#\\n### Metrics for prometheus\\n#management.endpoints.web.exposure.include=*\\n\\n### Metrics for elastic search\\nmanagement.metrics.export.elastic.enabled=false\\n#management.metrics.export.elastic.host=http://localhost:9200\\n\\n### Metrics for influx\\nmanagement.metrics.export.influx.enabled=false\\n#management.metrics.export.influx.db=springboot\\n#management.metrics.export.influx.uri=http://localhost:8086\\n#management.metrics.export.influx.auto-create-db=true\\n#management.metrics.export.influx.consistency=one\\n#management.metrics.export.influx.compressed=true\\n\\n\\n#*************** Access Log Related Configurations ***************#\\n### If turn on the access log:\\nserver.tomcat.accesslog.enabled=true\\n\\n### The access log pattern:\\nserver.tomcat.accesslog.pattern=%h %l %u %t &quot;%r&quot; %s %b %D %{User-Agent}i %{Request-Source}i\\n\\n### The directory of access log:\\nserver.tomcat.basedir=\\n\\n\\n#*************** Access Control Related Configurations ***************#\\n### If enable spring security, this option is deprecated in 1.2.0:\\n#spring.security.enabled=false\\n\\n### The ignore urls of auth, is deprecated in 1.2.0:\\nnacos.security.ignore.urls=/,/error,/**/*.css,/**/*.js,/**/*.html,/**/*.map,/**/*.svg,/**/*.png,/**/*.ico,/console-fe/public/**,/v1/auth/**,/v1/console/health/**,/actuator/**,/v1/console/server/**\\n\\n### The auth system to use, currently only \'nacos\' is supported:\\nnacos.core.auth.system.type=nacos\\n\\n### If turn on auth system:\\nnacos.core.auth.enabled=false\\n\\n### The token expiration in seconds:\\nnacos.core.auth.default.token.expire.seconds=18000\\n\\n### The default token:\\nnacos.core.auth.default.token.secret.key=SecretKey012345678901234567890123456789012345678901234567890123456789\\n\\n### Turn on/off caching of auth information. By turning on this switch, the update of auth information would have a 15 seconds delay.\\nnacos.core.auth.caching.enabled=true\\n\\n\\n#*************** Istio Related Configurations ***************#\\n### If turn on the MCP server:\\nnacos.istio.mcp.server.enabled=false\\n\\n\\n\\n###*************** Add from 1.3.0 ***************###\\n\\n\\n#*************** Core Related Configurations ***************#\\n\\n### set the WorkerID manually\\n# nacos.core.snowflake.worker-id=\\n\\n### Member-MetaData\\n# nacos.core.member.meta.site=\\n# nacos.core.member.meta.adweight=\\n# nacos.core.member.meta.weight=\\n\\n### MemberLookup\\n### Addressing pattern category, If set, the priority is highest\\n# nacos.core.member.lookup.type=[file,address-server]\\n## Set the cluster list with a configuration file or command-line argument\\n# nacos.member.list=192.168.16.101:8847?raft_port=8807,192.168.16.101?raft_port=8808,192.168.16.101:8849?raft_port=8809\\n## for AddressServerMemberLookup\\n# Maximum number of retries to query the address server upon initialization\\n# nacos.core.address-server.retry=5\\n## Server domain name address of [address-server] mode\\n# address.server.domain=jmenv.tbsite.net\\n## Server port of [address-server] mode\\n# address.server.port=8080\\n## Request address of [address-server] mode\\n# address.server.url=/nacos/serverlist\\n\\n#*************** JRaft Related Configurations ***************#\\n\\n### Sets the Raft cluster election timeout, default value is 5 second\\n# nacos.core.protocol.raft.data.election_timeout_ms=5000\\n### Sets the amount of time the Raft snapshot will execute periodically, default is 30 minute\\n# nacos.core.protocol.raft.data.snapshot_interval_secs=30\\n### raft internal worker threads\\n# nacos.core.protocol.raft.data.core_thread_num=8\\n### Number of threads required for raft business request processing\\n# nacos.core.protocol.raft.data.cli_service_thread_num=4\\n### raft linear read strategy. Safe linear reads are used by default, that is, the Leader tenure is confirmed by heartbeat\\n# nacos.core.protocol.raft.data.read_index_type=ReadOnlySafe\\n### rpc request timeout, default 5 seconds\\n# nacos.core.protocol.raft.data.rpc_request_timeout_ms=5000\\n\\n</code></pre>\\n<p>这是我的整个application.properties文件,其中主要修改的地方有两处</p>\\n<p>修改端口号</p>\\n<pre><code class=\\\"lang-properties\\\">### Default web server port:\\nserver.port=3333\\n</code></pre>\\n<p>修改数据库为mysql并配置mysql的url</p>\\n<pre><code class=\\\"lang-properties\\\">#*************** Config Module Related Configurations ***************#\\n### If use MySQL as datasource:\\n spring.datasource.platform=mysql\\n\\n### Count of DB:\\n db.num=1\\n\\n### Connect URL of DB:\\ndb.url.0=jdbc:mysql://127.0.0.1:3306/nacos_config?characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true&amp;useUnicode=true&amp;useSSL=false&amp;serverTimezone=UTC\\ndb.user=root\\ndb.password=123456\\n</code></pre>\\n<p>这时候配置就差不多啦可以开始启动服务了</p>\\n<pre><div class=\\\"hljs\\\"><code class=\\\"lang-sh\\\"><span class=\\\"hljs-comment\\\"># 进入到nacos3333的bin目录</span>\\n<span class=\\\"hljs-built_in\\\">cd</span> /usr/<span class=\\\"hljs-built_in\\\">local</span>/nacos/nacos3333/bin\\n<span class=\\\"hljs-comment\\\"># 执行启动脚本 因为nacos启动脚本默认就是使用集群模式所以不用更改</span>\\n./startup.sh\\n</code></div></pre>\\n<p>这时候我们可以查看nacos的启动状态</p>\\n<pre><div class=\\\"hljs\\\"><code class=\\\"lang-sh\\\">ps -ef | grep nacos\\n</code></div></pre>\\n<blockquote>\\n<p><img src=\\\"https://img-blog.csdnimg.cn/20201130205818481.png\\\" alt=\\\"在这里插入图片描述\\\" /></p>\\n</blockquote>\\n<p>这时候我们应该就可以通过 服务器ip:3333/nacos访问到nacos</p>\\n<blockquote>\\n<p><img src=\\\"https://img-blog.csdnimg.cn/20201130205828641.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ0ODU5OA==,size_16,color_FFFFFF,t_70\\\" alt=\\\"在这里插入图片描述\\\" /></p>\\n</blockquote>\\n<p>成功的访问到了nacos代表成功了。</p>\\n<h3><a id=\\\"nacos_344\\\"></a>nacos集群启动</h3>\\n<p>这时候我们就可以回到nacos目录下拷贝之前的nacos3333文件夹来启动nacos4444和nacos5555</p>\\n<pre><div class=\\\"hljs\\\"><code class=\\\"lang-sh\\\"><span class=\\\"hljs-built_in\\\">cd</span> /usr/<span class=\\\"hljs-built_in\\\">local</span>/nacos\\n<span class=\\\"hljs-comment\\\"># cp -r 代表递归拷贝</span>\\ncp -r nacos3333 nacos4444\\ncp -r nacos3333 nacos5555\\n</code></div></pre>\\n<p>这时候再分别将nacos4444和nacos5555文件夹下的conf目录中的application.properties中的server.port更改为3333、4444然后再启动，这里我就不再演示了，和之前配置一样。</p>\\n<p>随后我们再依次启动nacos4444，nacos5555</p>\\n<p>###########################################################################</p>\\n<p>启动后发现问题，nacos5555启动不起来，查看日志得到发现内存不足，nacos脚本默认给的最大内存是2G，我们可以去改小一点。</p>\\n<p><img src=\\\"https://img-blog.csdnimg.cn/20201130205845619.png\\\" alt=\\\"在这里插入图片描述\\\" /></p>\\n<p>原红框中限制的内存是2g 最小1g 适当该小一点[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传<br />\\n<img src=\\\"https://img-blog.csdnimg.cn/20201130205903628.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ0ODU5OA==,size_16,color_FFFFFF,t_70\\\" alt=\\\"在这里插入图片描述\\\" /></p>\\n<p>然后再依次启动三个服务</p>\\n<p>登录任意一个nacos可以看到如下页面即集群启动成功</p>\\n<h3><a id=\\\"nginx_373\\\"></a>nginx配置</h3>\\n<p>这配置nginx负载均衡访问nacos</p>\\n<pre><div class=\\\"hljs\\\"><code class=\\\"lang-sh\\\"><span class=\\\"hljs-built_in\\\">cd</span> /usr/<span class=\\\"hljs-built_in\\\">local</span>/nginx/conf\\nvim nginx.conf\\n</code></div></pre>\\n<pre><code class=\\\"lang-conf\\\">#user  nobody;\\nworker_processes  1;\\n\\n#error_log  logs/error.log;\\n#error_log  logs/error.log  notice;\\n#error_log  logs/error.log  info;\\n\\n#pid        logs/nginx.pid;\\n\\n\\nevents {\\n    worker_connections  1024;\\n}\\n\\n\\nhttp {\\n    include       mime.types;\\n    default_type  application/octet-stream;\\n\\n    #log_format  main  \'$remote_addr - $remote_user [$time_local] &quot;$request&quot; \'\\n    #                  \'$status $body_bytes_sent &quot;$http_referer&quot; \'\\n    #                  \'&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;\';\\n\\n    #access_log  logs/access.log  main;\\n\\n    sendfile        on;\\n    #tcp_nopush     on;\\n\\n    #keepalive_timeout  0;\\n    keepalive_timeout  65;\\n\\n    #gzip  on;\\n\\n    #配置刚刚搭建好的nacos集群\\n    upstream cluster{                                                        \\n\\t    server 127.0.0.1:3333;\\n\\t    server 127.0.0.1:4444;\\n\\t    server 127.0.0.1:5555;\\n\\t}\\n\\n    server {\\n        listen       1111;\\n        server_name  nacos_cluster;\\n\\n        #charset koi8-r;\\n\\n        #access_log  logs/host.access.log  main;\\n\\n        location / {\\n            #root   html;\\n            #index  index.html index.htm;\\n            #将所有访问/的都映射到配置好的集群\\n            proxy_pass http://cluster;\\n        }\\n\\n        #error_page  404              /404.html;\\n\\n        # redirect server error pages to the static page /50x.html\\n        #\\n        error_page   500 502 503 504  /50x.html;\\n        location = /50x.html {\\n            root   html;\\n        }\\n\\n        # proxy the PHP scripts to Apache listening on 127.0.0.1:80\\n        #\\n        #location ~ \\\\.php$ {\\n        #    proxy_pass   http://127.0.0.1;\\n        #}\\n\\n        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000\\n        #\\n        #location ~ \\\\.php$ {\\n        #    root           html;\\n        #    fastcgi_pass   127.0.0.1:9000;\\n        #    fastcgi_index  index.php;\\n        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;\\n        #    include        fastcgi_params;\\n        #}\\n\\n        # deny access to .htaccess files, if Apache\'s document root\\n        # concurs with nginx\'s one\\n        #\\n        #location ~ /\\\\.ht {\\n        #    deny  all;\\n        #}\\n    }\\n\\n\\n    # another virtual host using mix of IP-, name-, and port-based configuration\\n    #\\n    #server {\\n    #    listen       8000;\\n    #    listen       somename:8080;\\n    #    server_name  somename  alias  another.alias;\\n\\n    #    location / {\\n    #        root   html;\\n    #        index  index.html index.htm;\\n    #    }\\n    #}\\n\\n\\n    # HTTPS server\\n    #\\n    #server {\\n    #    listen       443 ssl;\\n    #    server_name  localhost;\\n\\n    #    ssl_certificate      cert.pem;\\n    #    ssl_certificate_key  cert.key;\\n\\n    #    ssl_session_cache    shared:SSL:1m;\\n    #    ssl_session_timeout  5m;\\n\\n    #    ssl_ciphers  HIGH:!aNULL:!MD5;\\n    #    ssl_prefer_server_ciphers  on;\\n\\n    #    location / {\\n    #        root   html;\\n    #        index  index.html index.htm;\\n    #    }\\n    #}\\n}\\n</code></pre>\\n<h3><a id=\\\"nginx_509\\\"></a>nginx启动</h3>\\n<pre><div class=\\\"hljs\\\"><code class=\\\"lang-sh\\\"><span class=\\\"hljs-built_in\\\">cd</span> /usr/<span class=\\\"hljs-built_in\\\">local</span>/nginx/sbin\\n./nginx\\n</code></div></pre>\\n<p>这时候我们就可以通过服务器ip地址:1111/nacos 来访问nacos集群了</p>\\n<p><img src=\\\"https://img-blog.csdnimg.cn/20201130205927229.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ0ODU5OA==,size_16,color_FFFFFF,t_70\\\" alt=\\\"在这里插入图片描述\\\" /></p>\\n<p>关于使用NACOS集群遇到问题 – CODE:503 MSG: SERVER IS STARTING NOW, PLEASE TRY AGAIN LATER!</p>\\n<p>这时又出现了问题……在服务提供者注册服务时会报错</p>\\n<pre><code class=\\\"lang-text\\\">2020-11-30 00:36:59.492 ERROR 13140 --- [  restartedMain] c.a.c.n.registry.NacosServiceRegistry    : nacos registry, nacos-payment-provider register failed...NacosRegistration{nacosDiscoveryProperties=NacosDiscoveryProperties{serverAddr=\'wsy.oopsw.top:1111\', endpoint=\'\', namespace=\'\', watchDelay=30000, logName=\'\', service=\'nacos-payment-provider\', weight=1.0, clusterName=\'DEFAULT\', namingLoadCacheAtStart=\'false\', metadata={preserved.register.source=SPRING_CLOUD}, registerEnabled=true, ip=\'10.175.6.100\', networkInterface=\'\', port=9002, secure=false, accessKey=\'\', secretKey=\'\'}},\\n\\njava.lang.IllegalStateException: failed to req API:/nacos/v1/ns/instance after all servers([wsy.oopsw.top:1111]) tried: failed to req API:wsy.oopsw.top:1111/nacos/v1/ns/instance. code:503 msg: server is DOWN now, please try again later!\\n\\tat com.alibaba.nacos.client.naming.net.NamingProxy.reqAPI(NamingProxy.java:464) ~[nacos-client-1.1.1.jar:na]\\n\\tat com.alibaba.nacos.client.naming.net.NamingProxy.reqAPI(NamingProxy.java:386) ~[nacos-client-1.1.1.jar:na]\\n\\tat com.alibaba.nacos.client.naming.net.NamingProxy.registerService(NamingProxy.java:188) ~[nacos-client-1.1.1.jar:na]\\n\\tat com.alibaba.nacos.client.naming.NacosNamingService.registerInstance(NacosNamingService.java:205) ~[nacos-client-1.1.1.jar:na]\\n\\tat com.alibaba.nacos.client.naming.NacosNamingService.registerInstance(NacosNamingService.java:184) ~[nacos-client-1.1.1.jar:na]\\n\\tat com.alibaba.cloud.nacos.registry.NacosServiceRegistry.register(NacosServiceRegistry.java:61) ~[spring-cloud-alibaba-nacos-discovery-2.1.0.RELEASE.jar:2.1.0.RELEASE]\\n\\tat org.springframework.cloud.client.serviceregistry.AbstractAutoServiceRegistration.register(AbstractAutoServiceRegistration.java:239) [spring-cloud-commons-2.2.1.RELEASE.jar:2.2.1.RELEASE]\\n\\tat com.alibaba.cloud.nacos.registry.NacosAutoServiceRegistration.register(NacosAutoServiceRegistration.java:74) [spring-cloud-alibaba-nacos-discovery-2.1.0.RELEASE.jar:2.1.0.RELEASE]\\n\\tat org.springframework.cloud.client.serviceregistry.AbstractAutoServiceRegistration.start(AbstractAutoServiceRegistration.java:138) [spring-cloud-commons-2.2.1.RELEASE.jar:2.2.1.RELEASE]\\n\\tat org.springframework.cloud.client.serviceregistry.AbstractAutoServiceRegistration.bind(AbstractAutoServiceRegistration.java:101) [spring-cloud-commons-2.2.1.RELEASE.jar:2.2.1.RELEASE]\\n\\tat org.springframework.cloud.client.serviceregistry.AbstractAutoServiceRegistration.onApplicationEvent(AbstractAutoServiceRegistration.java:88) [spring-cloud-commons-2.2.1.RELEASE.jar:2.2.1.RELEASE]\\n\\tat org.springframework.cloud.client.serviceregistry.AbstractAutoServiceRegistration.onApplicationEvent(AbstractAutoServiceRegistration.java:47) [spring-cloud-commons-2.2.1.RELEASE.jar:2.2.1.RELEASE]\\n\\tat org.springframework.context.event.SimpleApplicationEventMulticaster.doInvokeListener(SimpleApplicationEventMulticaster.java:172) [spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]\\n\\tat org.springframework.context.event.SimpleApplicationEventMulticaster.invokeListener(SimpleApplicationEventMulticaster.java:165) [spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]\\n\\tat org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:139) [spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]\\n\\tat org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:403) [spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]\\n\\tat org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:360) [spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]\\n\\tat org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.finishRefresh(ServletWebServerApplicationContext.java:165) [spring-boot-2.2.2.RELEASE.jar:2.2.2.RELEASE]\\n\\tat org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:553) [spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]\\n\\tat org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:141) [spring-boot-2.2.2.RELEASE.jar:2.2.2.RELEASE]\\n\\tat org.springframework.boot.SpringApplication.refresh(SpringApplication.java:747) [spring-boot-2.2.2.RELEASE.jar:2.2.2.RELEASE]\\n\\tat org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:397) [spring-boot-2.2.2.RELEASE.jar:2.2.2.RELEASE]\\n\\tat org.springframework.boot.SpringApplication.run(SpringApplication.java:315) [spring-boot-2.2.2.RELEASE.jar:2.2.2.RELEASE]\\n\\tat org.springframework.boot.SpringApplication.run(SpringApplication.java:1226) [spring-boot-2.2.2.RELEASE.jar:2.2.2.RELEASE]\\n\\tat org.springframework.boot.SpringApplication.run(SpringApplication.java:1215) [spring-boot-2.2.2.RELEASE.jar:2.2.2.RELEASE]\\n\\tat com.wsy.springcloud.AlibabaProviderApplication.main(AlibabaProviderApplication.java:15) [classes/:na]\\n\\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_73]\\n\\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_73]\\n\\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_73]\\n\\tat java.lang.reflect.Method.invoke(Method.java:497) ~[na:1.8.0_73]\\n\\tat org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49) [spring-boot-devtools-2.2.2.RELEASE.jar:2.2.2.RELEASE]\\n</code></pre>\\n<p>像阿里云、腾讯云这种云服务器, 会提供一个外网ip和内网ip, 访问外网ip时会指向对应的内网ip来访问到该服务器, 由于nacos集群内部是指定的使用网卡ip地址来进行通信,但是由于三台服务器各自的内网ip不在同一网段, 所以造成无法通信, 也会造成以下问题</p>\\n<p>注册服务:</p>\\n<pre><code class=\\\"lang-\\\">code:503 msg: server is STARTING now, please try again later!\\n</code></pre>\\n<p>naming-raft.log 日志:</p>\\n<pre><code class=\\\"lang-\\\">2019-05-15 00:02:00,000 WARN [IS LEADER] no leader is available now!\\n</code></pre>\\n<p>这时只要修改启动参数, 设置本机ip地址就可以了<br />\\n修改 nacos/bin/startup.sh 文件<br />\\n找到 JVM Configuration 这部分, 在集群参数里增加 -Dnacos.server.ip=xx</p>\\n<pre><div class=\\\"hljs\\\"><code class=\\\"lang-sh\\\"><span class=\\\"hljs-comment\\\">#===========================================================================================</span>\\n<span class=\\\"hljs-comment\\\"># JVM Configuration</span>\\n<span class=\\\"hljs-comment\\\">#===========================================================================================</span>\\n\\n<span class=\\\"hljs-comment\\\"># 单机模式对应的启动参数</span>\\n<span class=\\\"hljs-keyword\\\">if</span> [[ <span class=\\\"hljs-string\\\">\\\"<span class=\\\"hljs-variable\\\">${MODE}</span>\\\"</span> == <span class=\\\"hljs-string\\\">\\\"standalone\\\"</span> ]]; <span class=\\\"hljs-keyword\\\">then</span>\\n    JAVA_OPT=<span class=\\\"hljs-string\\\">\\\"<span class=\\\"hljs-variable\\\">${JAVA_OPT}</span> -Xms512m -Xmx512m -Xmn256m\\\"</span>\\n    JAVA_OPT=<span class=\\\"hljs-string\\\">\\\"<span class=\\\"hljs-variable\\\">${JAVA_OPT}</span> -Dnacos.standalone=true\\\"</span>\\n<span class=\\\"hljs-keyword\\\">else</span>\\n<span class=\\\"hljs-comment\\\"># 集群模式对应的启动参数</span>\\n    JAVA_OPT=<span class=\\\"hljs-string\\\">\\\"<span class=\\\"hljs-variable\\\">${JAVA_OPT}</span> -server -Xms2g -Xmx2g -Xmn1g -XX:MetaspaceSize=128m -XX:MaxMetaspaceSize=320m\\\"</span>\\n    JAVA_OPT=<span class=\\\"hljs-string\\\">\\\"<span class=\\\"hljs-variable\\\">${JAVA_OPT}</span> -XX:-OmitStackTraceInFastThrow -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=<span class=\\\"hljs-variable\\\">${BASE_DIR}</span>/logs/java_heapdump.hprof\\\"</span>\\n    JAVA_OPT=<span class=\\\"hljs-string\\\">\\\"<span class=\\\"hljs-variable\\\">${JAVA_OPT}</span> -XX:-UseLargePages\\\"</span>\\n    \\n    <span class=\\\"hljs-comment\\\"># *新增以下参数设置本机ip地址*</span>\\n    JAVA_OPT=<span class=\\\"hljs-string\\\">\\\"<span class=\\\"hljs-variable\\\">${JAVA_OPT}</span> -Dnacos.server.ip=本机ip\\\"</span>\\n\\n<span class=\\\"hljs-keyword\\\">fi</span>\\n\\n<span class=\\\"hljs-keyword\\\">if</span> [[ <span class=\\\"hljs-string\\\">\\\"<span class=\\\"hljs-variable\\\">${FUNCTION_MODE}</span>\\\"</span> == <span class=\\\"hljs-string\\\">\\\"config\\\"</span> ]]; <span class=\\\"hljs-keyword\\\">then</span>\\n    JAVA_OPT=<span class=\\\"hljs-string\\\">\\\"<span class=\\\"hljs-variable\\\">${JAVA_OPT}</span> -Dnacos.functionMode=config\\\"</span>\\n<span class=\\\"hljs-keyword\\\">elif</span> [[ <span class=\\\"hljs-string\\\">\\\"<span class=\\\"hljs-variable\\\">${FUNCTION_MODE}</span>\\\"</span> == <span class=\\\"hljs-string\\\">\\\"naming\\\"</span> ]]; <span class=\\\"hljs-keyword\\\">then</span>\\n    JAVA_OPT=<span class=\\\"hljs-string\\\">\\\"<span class=\\\"hljs-variable\\\">${JAVA_OPT}</span> -Dnacos.functionMode=naming\\\"</span>\\n<span class=\\\"hljs-keyword\\\">fi</span>\\n\\n</code></div></pre>\\n<p>参考博客：https://www.freesion.com/article/33101142210/</p>\\n<p>服务注册时报BadRequest400 问题暂时还未解决</p>\\n<pre><code class=\\\"lang-text\\\">com.alibaba.nacos.api.exception.NacosException: failed to req API:/nacos/v1/ns/instance after all servers([wsy.oopsw.top:1111]) tried: ErrCode:400, ErrMsg:&lt;html&gt;&lt;body&gt;&lt;h1&gt;Whitelabel Error Page&lt;/h1&gt;&lt;p&gt;This application has no explicit mapping for /error, so you are seeing this as a fallback.&lt;/p&gt;&lt;div id=\'created\'&gt;Mon Nov 30 01:33:45 CST 2020&lt;/div&gt;&lt;div&gt;There was an unexpected error (type=Bad Request, status=400).&lt;/div&gt;&lt;div&gt;receive invalid redirect request from peer 172.20.9.153&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;\\n</code></pre>\\n<p>#############################################################</p>\\n<p>问题已解决，是nacos版本的问题，据群里老哥解释说是nacos需要使用与之对应的SpringCloudAlibaba的版本，不然就会报错，我更换版本到1.3.2问题解决服务注册正常</p>\\n\",\"blogGoods\":0,\"blogId\":\"1333411378995605504\",\"blogImage\":\"http://808km.top/blog/img/img/default/1333411206555185152\",\"blogRead\":52,\"blogRemark\":\"nacos集群环境搭建\",\"blogTitle\":\"nacos集群环境搭建\",\"blogType\":20,\"createdTime\":1606745021000,\"typeName\":\"nacos\",\"updateTime\":1608045885000,\"version\":39},\"msg\":\"阅读成功\"}', '119.39.43.27', '2020-12-22 13:45:48', NULL);
INSERT INTO `bl_log` VALUES (2770, '阅读博客', '//blog/read/1332742588649615360', '[1332742588649615360]', 1, NULL, 'PUT', 22, '{\"code\":20000,\"data\":{\"blogCollection\":0,\"blogComment\":0,\"blogContent\":\"<h2><a id=\\\"_0\\\"></a>前言</h2>\\n<p>咳咳，终于终于终于将我的博客项目引入了<strong>markdown</strong>了，之前博客使用的是富文本编辑器，因为最近我都是使用的<strong>markdown</strong>做笔记和写博客，而自己的项目博客是个富文本编辑器这让我很不舒服，所以花了一整个晚上的时间把我的博客项目换成了<strong>markdown</strong>编辑器，让我先用这个<strong>markdown</strong>编辑器写一个博客试试哈哈哈哈！</p>\\n<h2><a id=\\\"_2\\\"></a>操作步骤</h2>\\n<h3><a id=\\\"markdown_3\\\"></a>引入markdown相关插件</h3>\\n<h4><a id=\\\"mavonEditor_4\\\"></a>mavonEditor</h4>\\n<p>我现在博客使用的markdown编辑器是使用的是mavonEditor<br />\\n我们需要使用它的话首先需要安装</p>\\n<pre><code class=\\\"lang-\\\">npm install mavon-editor --save\\n</code></pre>\\n<p>然后我们在main.js中全局引用它</p>\\n<pre><div class=\\\"hljs\\\"><code class=\\\"lang-javascript\\\"><span class=\\\"hljs-comment\\\">// 引入markdown组件</span>\\n<span class=\\\"hljs-keyword\\\">import</span> Vue <span class=\\\"hljs-keyword\\\">from</span> <span class=\\\"hljs-string\\\">\'vue\'</span>\\n<span class=\\\"hljs-keyword\\\">import</span> mavonEditor <span class=\\\"hljs-keyword\\\">from</span> <span class=\\\"hljs-string\\\">\'mavon-editor\'</span>\\n<span class=\\\"hljs-keyword\\\">import</span> <span class=\\\"hljs-string\\\">\'mavon-editor/dist/css/index.css\'</span>\\n\\nVue.use(mavonEditor)\\n\\n<span class=\\\"hljs-keyword\\\">new</span> Vue({\\n  <span class=\\\"hljs-attr\\\">el</span>: <span class=\\\"hljs-string\\\">\'#app\'</span>,\\n  router,\\n  store,\\n  <span class=\\\"hljs-attr\\\">render</span>: <span class=\\\"hljs-function\\\"><span class=\\\"hljs-params\\\">h</span> =&gt;</span> h(App)\\n})\\n</code></div></pre>\\n<p>随后我们便可以在项目中引用该组件,value绑定的是markdown的源内容</p>\\n<pre><div class=\\\"hljs\\\"><code class=\\\"lang-html\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span> <span class=\\\"hljs-attr\\\">id</span>=<span class=\\\"hljs-string\\\">\\\"main\\\"</span>&gt;</span>\\n    <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">mavon-editor</span> <span class=\\\"hljs-attr\\\">v-model</span>=<span class=\\\"hljs-string\\\">\\\"value\\\"</span>/&gt;</span>\\n<span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n</code></div></pre>\\n<p>markdown中的图片上传</p>\\n<pre><div class=\\\"hljs\\\"><code class=\\\"lang-javascript\\\"><span class=\\\"hljs-comment\\\">// 图片上传</span>\\n    uploadImg(pos, $file) {\\n      <span class=\\\"hljs-comment\\\">// 定义上传uri</span>\\n      <span class=\\\"hljs-keyword\\\">const</span> uploadUri = <span class=\\\"hljs-string\\\">\'img/blogImg/\'</span>\\n      <span class=\\\"hljs-comment\\\">// 定义上传对象</span>\\n      <span class=\\\"hljs-keyword\\\">var</span> formData = <span class=\\\"hljs-keyword\\\">new</span> FormData()\\n      formData.append(<span class=\\\"hljs-string\\\">\'file\'</span>, $file)\\n      formData.append(<span class=\\\"hljs-string\\\">\'uploadUri\'</span>, uploadUri)\\n      uploadImage(formData).then(<span class=\\\"hljs-function\\\"><span class=\\\"hljs-params\\\">res</span> =&gt;</span> {\\n        <span class=\\\"hljs-comment\\\">// 将markdown插入的图片url更换为返回的ul</span>\\n        <span class=\\\"hljs-keyword\\\">this</span>.$refs.md.$img2Url(pos, res.data)\\n      })\\n    }\\n</code></div></pre>\\n<table>\\n<thead>\\n<tr>\\n<th>pos</th>\\n<th>$file</th>\\n<th>this.<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math><semantics><mrow><mi>r</mi><mi>e</mi><mi>f</mi><mi>s</mi><mi mathvariant=\\\"normal\\\">.</mi><mi>m</mi><mi>d</mi><mi mathvariant=\\\"normal\\\">.</mi></mrow><annotation encoding=\\\"application/x-tex\\\">refs.md.</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"strut\\\" style=\\\"height:0.69444em;\\\"></span><span class=\\\"strut bottom\\\" style=\\\"height:0.8888799999999999em;vertical-align:-0.19444em;\\\"></span><span class=\\\"base\\\"><span class=\\\"mord mathit\\\" style=\\\"margin-right:0.02778em;\\\">r</span><span class=\\\"mord mathit\\\">e</span><span class=\\\"mord mathit\\\" style=\\\"margin-right:0.10764em;\\\">f</span><span class=\\\"mord mathit\\\">s</span><span class=\\\"mord mathrm\\\">.</span><span class=\\\"mord mathit\\\">m</span><span class=\\\"mord mathit\\\">d</span><span class=\\\"mord mathrm\\\">.</span></span></span></span>img2Url</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>当前有插入了几张图片</td>\\n<td>文件对象</td>\\n<td>修改markdown源连接为新设置的值</td>\\n</tr>\\n</tbody>\\n</table>\\n<p>更多api文档请自行查看官方文档：<a href=\\\"https://github.com/hinesboy/mavonEditor\\\" target=\\\"_blank\\\">https://github.com/hinesboy/mavonEditor</a></p>\\n<h4><a id=\\\"marked_54\\\"></a>marked</h4>\\n<p>在引入了mavonEditor之后，确实是可以使用markdown编辑器写博客了，但是发现上传上去的是markdown的源代码，那得到的也只是markdown的源内容，那……谁又喜欢看这种东西呢，然后又去百度找解决的办法，发现了marked，该插件能够将markdown的内容转换为HTML格式渲染出来。<br />\\n照例先安装</p>\\n<pre><code class=\\\"lang-\\\">npm install --save marked\\n</code></pre>\\n<p>安装完后在需要使用到的页面引用该插件</p>\\n<pre><div class=\\\"hljs\\\"><code class=\\\"lang-javascript\\\"><span class=\\\"hljs-keyword\\\">import</span> marked <span class=\\\"hljs-keyword\\\">from</span> <span class=\\\"hljs-string\\\">\'marked\'</span>\\n</code></div></pre>\\n<p>然后就可以使用啦，直接调用一个方法即可转换</p>\\n<pre><div class=\\\"hljs\\\"><code class=\\\"lang-javascript\\\"><span class=\\\"hljs-comment\\\">//  将Markdown源内容转换为HTML</span>\\n<span class=\\\"hljs-keyword\\\">this</span>.content = marked(source)\\n</code></div></pre>\\n<p>具体使用方法可以参考<br />\\n官网：<a href=\\\"https://marked.js.org/\\\" target=\\\"_blank\\\">https://marked.js.org/</a><br />\\nGitHub：<a href=\\\"https://github.com/markedjs/marked\\\" target=\\\"_blank\\\">https://github.com/markedjs/marked</a></p>\\n<h4><a id=\\\"highlight_72\\\"></a>highlight</h4>\\n<p>这是已经可以从Markdown转换为HTML来渲染了，但是郁闷的又来了，发现代码没有高亮显示，而且Markdown没有一点样式，非常的难看，这时又只能打开百度去找解决办法咯，就找到了highlight这个插件，这是专门用来给Markdown添加代码高亮的插件，与之相似的还有highlightjs-line-numbers.js这是用来显示行数的，但是我尝试了，好像需要JQuery才能够使用我就放弃了。<br />\\n首先照例先安装</p>\\n<pre><code class=\\\"lang-\\\">npm install --save highlight\\n</code></pre>\\n<p>然后在需要使用到的页面引用</p>\\n<pre><div class=\\\"hljs\\\"><code class=\\\"lang-javascript\\\"><span class=\\\"hljs-comment\\\">// 引入代码高亮插件</span>\\n<span class=\\\"hljs-keyword\\\">import</span> hljs <span class=\\\"hljs-keyword\\\">from</span> <span class=\\\"hljs-string\\\">\'highlight.js\'</span>\\n<span class=\\\"hljs-keyword\\\">import</span> <span class=\\\"hljs-string\\\">\'highlight.js/styles/atom-one-dark.css\'</span>\\n<span class=\\\"hljs-comment\\\">// 导入本地markdown样式</span>\\n<span class=\\\"hljs-keyword\\\">import</span> <span class=\\\"hljs-string\\\">\'../../styles/markdown.css\'</span>\\n</code></div></pre>\\n<p>然后在marked转换格式之前执行一个方法</p>\\n<pre><div class=\\\"hljs\\\"><code class=\\\"lang-javascript\\\"> <span class=\\\"hljs-comment\\\">// 展现经过markdown渲染后的html</span>\\n        marked.setOptions({\\n          <span class=\\\"hljs-attr\\\">renderer</span>: <span class=\\\"hljs-keyword\\\">new</span> marked.Renderer(),\\n          <span class=\\\"hljs-attr\\\">highlight</span>: <span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function</span>(<span class=\\\"hljs-params\\\">code</span>) </span>{\\n            <span class=\\\"hljs-keyword\\\">return</span> hljs.highlightAuto(code).value\\n          },\\n          <span class=\\\"hljs-attr\\\">pedantic</span>: <span class=\\\"hljs-literal\\\">false</span>,\\n          <span class=\\\"hljs-attr\\\">gfm</span>: <span class=\\\"hljs-literal\\\">true</span>,\\n          <span class=\\\"hljs-attr\\\">tables</span>: <span class=\\\"hljs-literal\\\">true</span>,\\n          <span class=\\\"hljs-attr\\\">breaks</span>: <span class=\\\"hljs-literal\\\">false</span>,\\n          <span class=\\\"hljs-attr\\\">sanitize</span>: <span class=\\\"hljs-literal\\\">false</span>,\\n          <span class=\\\"hljs-attr\\\">smartLists</span>: <span class=\\\"hljs-literal\\\">true</span>,\\n          <span class=\\\"hljs-attr\\\">smartypants</span>: <span class=\\\"hljs-literal\\\">false</span>,\\n          <span class=\\\"hljs-attr\\\">xhtml</span>: <span class=\\\"hljs-literal\\\">false</span>\\n        })\\n        <span class=\\\"hljs-keyword\\\">this</span>.blogContent = marked(res.data.blogContent)\\n</code></div></pre>\\n<p>当然我也只用到了这一个地方如果有想了解更多的可以到GitHub上查看源代码<br />\\n<a href=\\\"https://github.com/highlightjs/highlight.js/\\\" target=\\\"_blank\\\">https://github.com/highlightjs/highlight.js/</a></p>\\n<h2><a id=\\\"_107\\\"></a>总结</h2>\\n<p>更换这个Markdown编辑器真的花了我不少时间，确实感觉前端对我来说好难好难，每次出一点小问题就需要好久才能够解决，当然自己做出来了也还是很有成就感的，毕竟是自己做出来的东西。<br />\\n我的个人博客:<a href=\\\"http://oopsw.top:1001\\\" target=\\\"_blank\\\">http://oopsw.top:1001</a></p>\\n\",\"blogGoods\":0,\"blogId\":\"1332742588649615360\",\"blogImage\":\"http://808km.top/blog/img/img/default/1332742519359713280\",\"blogRead\":23,\"blogRemark\":\"更换这个Markdown编辑器真的花了我不少时间，确实感觉前端对我来说好难好难，每次出一点小问题就需要好久才能够解决，当然自己做出来了也还是很有成就感的，毕竟是自己做出来的东西。\",\"blogTitle\":\"vue项目引入markdown\",\"blogType\":15,\"createdTime\":1606585569000,\"typeName\":\"Vue\",\"updateTime\":1607334219000,\"version\":23},\"msg\":\"阅读成功\"}', '119.39.43.27', '2020-12-22 13:45:59', NULL);
INSERT INTO `bl_log` VALUES (2771, '阅读博客', '//blog/read/1333411378995605504', '[1333411378995605504]', 1, NULL, 'PUT', 237, '{\"code\":20000,\"data\":{\"blogCollection\":0,\"blogComment\":0,\"blogContent\":\"<h2><a id=\\\"_0\\\"></a>预备环境准备</h2>\\n<p>Nacos 依赖 <a href=\\\"https://docs.oracle.com/cd/E19182-01/820-7851/inst_cli_jdk_javahome_t/\\\" target=\\\"_blank\\\">Java</a> 环境来运行。如果您是从代码开始构建并运行Nacos，还需要为此配置 <a href=\\\"https://maven.apache.org/index.html\\\" target=\\\"_blank\\\">Maven</a>环境，请确保是在以下版本环境中安装使用:</p>\\n<ol>\\n<li>64 bit OS，支持 Linux/Unix/Mac/Windows，推荐选用 Linux/Unix/Mac。</li>\\n<li>64 bit JDK 1.8+；<a href=\\\"http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html\\\" target=\\\"_blank\\\">下载</a> &amp; <a href=\\\"https://docs.oracle.com/cd/E19182-01/820-7851/inst_cli_jdk_javahome_t/\\\" target=\\\"_blank\\\">配置</a>。</li>\\n<li>Maven 3.2.x+；<a href=\\\"https://maven.apache.org/download.cgi\\\" target=\\\"_blank\\\">下载</a> &amp; <a href=\\\"https://maven.apache.org/settings.html\\\" target=\\\"_blank\\\">配置</a>。</li>\\n</ol>\\n<h2><a id=\\\"nacos_8\\\"></a>下载nacos安装包</h2>\\n<p>https://github.com/alibaba/nacos/releases/tag/1.4.0</p>\\n<blockquote>\\n<p><img src=\\\"https://img-blog.csdnimg.cn/20201130205557917.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ0ODU5OA==,size_16,color_FFFFFF,t_70\\\" alt=\\\"在这里插入图片描述\\\" /></p>\\n</blockquote>\\n<p>linux选择第一个</p>\\n<p>windows选择第二个</p>\\n<h2><a id=\\\"_21\\\"></a>搭建环境</h2>\\n<h3><a id=\\\"_23\\\"></a>集群模式部署</h3>\\n<p>这个快速开始手册是帮忙您快速在你的电脑上，下载安装并使用Nacos，部署生产使用的集群模式。</p>\\n<h3><a id=\\\"_27\\\"></a>集群部署架构图</h3>\\n<p><img src=\\\"https://img-blog.csdnimg.cn/20201130205609797.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ0ODU5OA==,size_16,color_FFFFFF,t_70\\\" alt=\\\"在这里插入图片描述\\\" /></p>\\n<p>VIP:虚拟ip</p>\\n<p>因此开源的时候推荐用户把所有服务列表放到一个vip下面，然后挂到一个域名下面</p>\\n<p><a href=\\\"http://ip1/\\\" target=\\\"_blank\\\">http://ip1</a>:port/openAPI 直连ip模式，机器挂则需要修改ip才可以使用。</p>\\n<p><a href=\\\"http://vip/\\\" target=\\\"_blank\\\">http://VIP</a>:port/openAPI 挂载VIP模式，直连vip即可，下面挂server真实ip，可读性不好。</p>\\n<p><a href=\\\"http://nacos.com/\\\" target=\\\"_blank\\\">http://nacos.com</a>:port/openAPI 域名 + VIP模式，可读性好，而且换ip方便，推荐模式</p>\\n<h3><a id=\\\"_42\\\"></a>创建目录</h3>\\n<p>该目录存放nacos集群</p>\\n<pre><div class=\\\"hljs\\\"><code class=\\\"lang-sh\\\">mkdir /usr/<span class=\\\"hljs-built_in\\\">local</span>/nacos\\n</code></div></pre>\\n<h3><a id=\\\"nacos_50\\\"></a>上传nacos</h3>\\n<blockquote>\\n<p><img src=\\\"https://img-blog.csdnimg.cn/20201130205630233.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ0ODU5OA==,size_16,color_FFFFFF,t_70\\\" alt=\\\"在这里插入图片描述\\\" /></p>\\n</blockquote>\\n<h3><a id=\\\"nacos_54\\\"></a>解压nacos</h3>\\n<pre><div class=\\\"hljs\\\"><code class=\\\"lang-sh\\\">tar -zxvf nacos-server-1.4.0.tar.gz\\n</code></div></pre>\\n<h3><a id=\\\"nacos_60\\\"></a>创建nacos持久化数据库</h3>\\n<p>首先使用navicat连接mysql数据库，然后创建数据库</p>\\n<p><img src=\\\"https://img-blog.csdnimg.cn/20201130205643439.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ0ODU5OA==,size_16,color_FFFFFF,t_70\\\" alt=\\\"在这里插入图片描述\\\" /></p>\\n<p>新建查询后导入SQL脚本即可</p>\\n<p><img src=\\\"https://img-blog.csdnimg.cn/20201130205705669.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ0ODU5OA==,size_16,color_FFFFFF,t_70\\\" alt=\\\"在这里插入图片描述\\\" /></p>\\n<p>红色框选那栏填写你的SQL脚本位置，SQL脚本在nacos文件夹下的conf下</p>\\n<h3><a id=\\\"nacos_73\\\"></a>nacos文件夹改名</h3>\\n<p>将文件夹名改为nacos3333代表这个nacos的端口号是3333</p>\\n<pre><div class=\\\"hljs\\\"><code class=\\\"lang-sh\\\">mv nacos nacos3333\\n</code></div></pre>\\n<h3><a id=\\\"_81\\\"></a>配置修改</h3>\\n<p>首先进入到配置目录</p>\\n<pre><div class=\\\"hljs\\\"><code class=\\\"lang-sh\\\"><span class=\\\"hljs-built_in\\\">cd</span> /usr/<span class=\\\"hljs-built_in\\\">local</span>/nacos/nacos3333/conf\\n</code></div></pre>\\n<blockquote>\\n<p><img src=\\\"https://img-blog.csdnimg.cn/2020113020572431.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ0ODU5OA==,size_16,color_FFFFFF,t_70\\\" alt=\\\"在这里插入图片描述\\\" /></p>\\n</blockquote>\\n<p>在更改配置之前先备份配置</p>\\n<pre><div class=\\\"hljs\\\"><code class=\\\"lang-sh\\\">cp application.properties application.properties.example\\n</code></div></pre>\\n<pre><div class=\\\"hljs\\\"><code class=\\\"lang-sh\\\">cp cluster.conf.example cluster.conf\\n</code></div></pre>\\n<h3><a id=\\\"_104\\\"></a>集群配置</h3>\\n<pre><div class=\\\"hljs\\\"><code class=\\\"lang-sh\\\">vim cluster.conf\\n</code></div></pre>\\n<blockquote>\\n<p><img src=\\\"https://img-blog.csdnimg.cn/20201130205739435.png\\\" alt=\\\"在这里插入图片描述\\\" /></p>\\n</blockquote>\\n<blockquote>\\n<p>注意这里不能填写localhost 或者127.0.0.1，这里如果是在本机搭建可以查看本机ip后填写</p>\\n<pre><div class=\\\"hljs\\\"><code class=\\\"lang-sh\\\">hostname -i\\n</code></div></pre>\\n<p><img src=\\\"https://img-blog.csdnimg.cn/20201130205749116.png\\\" alt=\\\"在这里插入图片描述\\\" /></p>\\n</blockquote>\\n<h3><a id=\\\"nacos_122\\\"></a>nacos配置</h3>\\n<pre><div class=\\\"hljs\\\"><code class=\\\"lang-sh\\\">vim application.properties\\n</code></div></pre>\\n<pre><code class=\\\"lang-properties\\\">\\n#*************** Spring Boot Related Configurations ***************#\\n### Default web context path:\\nserver.servlet.contextPath=/nacos\\n### Default web server port:\\nserver.port=3333\\n\\n#*************** Network Related Configurations ***************#\\n### If prefer hostname over ip for Nacos server addresses in cluster.conf:\\n# nacos.inetutils.prefer-hostname-over-ip=false\\n\\n### Specify local server\'s IP:\\n# nacos.inetutils.ip-address=\\n\\n\\n#*************** Config Module Related Configurations ***************#\\n### If use MySQL as datasource:\\n spring.datasource.platform=mysql\\n\\n### Count of DB:\\n db.num=1\\n\\n### Connect URL of DB:\\ndb.url.0=jdbc:mysql://127.0.0.1:3306/nacos_config?characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true&amp;useUnicode=true&amp;useSSL=false&amp;serverTimezone=UTC\\ndb.user=root\\ndb.password=123456\\n\\n\\n#*************** Naming Module Related Configurations ***************#\\n### Data dispatch task execution period in milliseconds:\\n# nacos.naming.distro.taskDispatchPeriod=200\\n\\n### Data count of batch sync task:\\n# nacos.naming.distro.batchSyncKeyCount=1000\\n\\n### Retry delay in milliseconds if sync task failed:\\n# nacos.naming.distro.syncRetryDelay=5000\\n\\n### If enable data warmup. If set to false, the server would accept request without local data preparation:\\n# nacos.naming.data.warmup=true\\n\\n### If enable the instance auto expiration, kind like of health check of instance:\\n# nacos.naming.expireInstance=true\\n\\nnacos.naming.empty-service.auto-clean=true\\nnacos.naming.empty-service.clean.initial-delay-ms=50000\\nnacos.naming.empty-service.clean.period-time-ms=30000\\n\\n\\n#*************** CMDB Module Related Configurations ***************#\\n### The interval to dump external CMDB in seconds:\\n# nacos.cmdb.dumpTaskInterval=3600\\n\\n### The interval of polling data change event in seconds:\\n# nacos.cmdb.eventTaskInterval=10\\n\\n### The interval of loading labels in seconds:\\n# nacos.cmdb.labelTaskInterval=300\\n\\n### If turn on data loading task:\\n# nacos.cmdb.loadDataAtStart=false\\n\\n\\n#*************** Metrics Related Configurations ***************#\\n### Metrics for prometheus\\n#management.endpoints.web.exposure.include=*\\n\\n### Metrics for elastic search\\nmanagement.metrics.export.elastic.enabled=false\\n#management.metrics.export.elastic.host=http://localhost:9200\\n\\n### Metrics for influx\\nmanagement.metrics.export.influx.enabled=false\\n#management.metrics.export.influx.db=springboot\\n#management.metrics.export.influx.uri=http://localhost:8086\\n#management.metrics.export.influx.auto-create-db=true\\n#management.metrics.export.influx.consistency=one\\n#management.metrics.export.influx.compressed=true\\n\\n\\n#*************** Access Log Related Configurations ***************#\\n### If turn on the access log:\\nserver.tomcat.accesslog.enabled=true\\n\\n### The access log pattern:\\nserver.tomcat.accesslog.pattern=%h %l %u %t &quot;%r&quot; %s %b %D %{User-Agent}i %{Request-Source}i\\n\\n### The directory of access log:\\nserver.tomcat.basedir=\\n\\n\\n#*************** Access Control Related Configurations ***************#\\n### If enable spring security, this option is deprecated in 1.2.0:\\n#spring.security.enabled=false\\n\\n### The ignore urls of auth, is deprecated in 1.2.0:\\nnacos.security.ignore.urls=/,/error,/**/*.css,/**/*.js,/**/*.html,/**/*.map,/**/*.svg,/**/*.png,/**/*.ico,/console-fe/public/**,/v1/auth/**,/v1/console/health/**,/actuator/**,/v1/console/server/**\\n\\n### The auth system to use, currently only \'nacos\' is supported:\\nnacos.core.auth.system.type=nacos\\n\\n### If turn on auth system:\\nnacos.core.auth.enabled=false\\n\\n### The token expiration in seconds:\\nnacos.core.auth.default.token.expire.seconds=18000\\n\\n### The default token:\\nnacos.core.auth.default.token.secret.key=SecretKey012345678901234567890123456789012345678901234567890123456789\\n\\n### Turn on/off caching of auth information. By turning on this switch, the update of auth information would have a 15 seconds delay.\\nnacos.core.auth.caching.enabled=true\\n\\n\\n#*************** Istio Related Configurations ***************#\\n### If turn on the MCP server:\\nnacos.istio.mcp.server.enabled=false\\n\\n\\n\\n###*************** Add from 1.3.0 ***************###\\n\\n\\n#*************** Core Related Configurations ***************#\\n\\n### set the WorkerID manually\\n# nacos.core.snowflake.worker-id=\\n\\n### Member-MetaData\\n# nacos.core.member.meta.site=\\n# nacos.core.member.meta.adweight=\\n# nacos.core.member.meta.weight=\\n\\n### MemberLookup\\n### Addressing pattern category, If set, the priority is highest\\n# nacos.core.member.lookup.type=[file,address-server]\\n## Set the cluster list with a configuration file or command-line argument\\n# nacos.member.list=192.168.16.101:8847?raft_port=8807,192.168.16.101?raft_port=8808,192.168.16.101:8849?raft_port=8809\\n## for AddressServerMemberLookup\\n# Maximum number of retries to query the address server upon initialization\\n# nacos.core.address-server.retry=5\\n## Server domain name address of [address-server] mode\\n# address.server.domain=jmenv.tbsite.net\\n## Server port of [address-server] mode\\n# address.server.port=8080\\n## Request address of [address-server] mode\\n# address.server.url=/nacos/serverlist\\n\\n#*************** JRaft Related Configurations ***************#\\n\\n### Sets the Raft cluster election timeout, default value is 5 second\\n# nacos.core.protocol.raft.data.election_timeout_ms=5000\\n### Sets the amount of time the Raft snapshot will execute periodically, default is 30 minute\\n# nacos.core.protocol.raft.data.snapshot_interval_secs=30\\n### raft internal worker threads\\n# nacos.core.protocol.raft.data.core_thread_num=8\\n### Number of threads required for raft business request processing\\n# nacos.core.protocol.raft.data.cli_service_thread_num=4\\n### raft linear read strategy. Safe linear reads are used by default, that is, the Leader tenure is confirmed by heartbeat\\n# nacos.core.protocol.raft.data.read_index_type=ReadOnlySafe\\n### rpc request timeout, default 5 seconds\\n# nacos.core.protocol.raft.data.rpc_request_timeout_ms=5000\\n\\n</code></pre>\\n<p>这是我的整个application.properties文件,其中主要修改的地方有两处</p>\\n<p>修改端口号</p>\\n<pre><code class=\\\"lang-properties\\\">### Default web server port:\\nserver.port=3333\\n</code></pre>\\n<p>修改数据库为mysql并配置mysql的url</p>\\n<pre><code class=\\\"lang-properties\\\">#*************** Config Module Related Configurations ***************#\\n### If use MySQL as datasource:\\n spring.datasource.platform=mysql\\n\\n### Count of DB:\\n db.num=1\\n\\n### Connect URL of DB:\\ndb.url.0=jdbc:mysql://127.0.0.1:3306/nacos_config?characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true&amp;useUnicode=true&amp;useSSL=false&amp;serverTimezone=UTC\\ndb.user=root\\ndb.password=123456\\n</code></pre>\\n<p>这时候配置就差不多啦可以开始启动服务了</p>\\n<pre><div class=\\\"hljs\\\"><code class=\\\"lang-sh\\\"><span class=\\\"hljs-comment\\\"># 进入到nacos3333的bin目录</span>\\n<span class=\\\"hljs-built_in\\\">cd</span> /usr/<span class=\\\"hljs-built_in\\\">local</span>/nacos/nacos3333/bin\\n<span class=\\\"hljs-comment\\\"># 执行启动脚本 因为nacos启动脚本默认就是使用集群模式所以不用更改</span>\\n./startup.sh\\n</code></div></pre>\\n<p>这时候我们可以查看nacos的启动状态</p>\\n<pre><div class=\\\"hljs\\\"><code class=\\\"lang-sh\\\">ps -ef | grep nacos\\n</code></div></pre>\\n<blockquote>\\n<p><img src=\\\"https://img-blog.csdnimg.cn/20201130205818481.png\\\" alt=\\\"在这里插入图片描述\\\" /></p>\\n</blockquote>\\n<p>这时候我们应该就可以通过 服务器ip:3333/nacos访问到nacos</p>\\n<blockquote>\\n<p><img src=\\\"https://img-blog.csdnimg.cn/20201130205828641.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ0ODU5OA==,size_16,color_FFFFFF,t_70\\\" alt=\\\"在这里插入图片描述\\\" /></p>\\n</blockquote>\\n<p>成功的访问到了nacos代表成功了。</p>\\n<h3><a id=\\\"nacos_344\\\"></a>nacos集群启动</h3>\\n<p>这时候我们就可以回到nacos目录下拷贝之前的nacos3333文件夹来启动nacos4444和nacos5555</p>\\n<pre><div class=\\\"hljs\\\"><code class=\\\"lang-sh\\\"><span class=\\\"hljs-built_in\\\">cd</span> /usr/<span class=\\\"hljs-built_in\\\">local</span>/nacos\\n<span class=\\\"hljs-comment\\\"># cp -r 代表递归拷贝</span>\\ncp -r nacos3333 nacos4444\\ncp -r nacos3333 nacos5555\\n</code></div></pre>\\n<p>这时候再分别将nacos4444和nacos5555文件夹下的conf目录中的application.properties中的server.port更改为3333、4444然后再启动，这里我就不再演示了，和之前配置一样。</p>\\n<p>随后我们再依次启动nacos4444，nacos5555</p>\\n<p>###########################################################################</p>\\n<p>启动后发现问题，nacos5555启动不起来，查看日志得到发现内存不足，nacos脚本默认给的最大内存是2G，我们可以去改小一点。</p>\\n<p><img src=\\\"https://img-blog.csdnimg.cn/20201130205845619.png\\\" alt=\\\"在这里插入图片描述\\\" /></p>\\n<p>原红框中限制的内存是2g 最小1g 适当该小一点[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传<br />\\n<img src=\\\"https://img-blog.csdnimg.cn/20201130205903628.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ0ODU5OA==,size_16,color_FFFFFF,t_70\\\" alt=\\\"在这里插入图片描述\\\" /></p>\\n<p>然后再依次启动三个服务</p>\\n<p>登录任意一个nacos可以看到如下页面即集群启动成功</p>\\n<h3><a id=\\\"nginx_373\\\"></a>nginx配置</h3>\\n<p>这配置nginx负载均衡访问nacos</p>\\n<pre><div class=\\\"hljs\\\"><code class=\\\"lang-sh\\\"><span class=\\\"hljs-built_in\\\">cd</span> /usr/<span class=\\\"hljs-built_in\\\">local</span>/nginx/conf\\nvim nginx.conf\\n</code></div></pre>\\n<pre><code class=\\\"lang-conf\\\">#user  nobody;\\nworker_processes  1;\\n\\n#error_log  logs/error.log;\\n#error_log  logs/error.log  notice;\\n#error_log  logs/error.log  info;\\n\\n#pid        logs/nginx.pid;\\n\\n\\nevents {\\n    worker_connections  1024;\\n}\\n\\n\\nhttp {\\n    include       mime.types;\\n    default_type  application/octet-stream;\\n\\n    #log_format  main  \'$remote_addr - $remote_user [$time_local] &quot;$request&quot; \'\\n    #                  \'$status $body_bytes_sent &quot;$http_referer&quot; \'\\n    #                  \'&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;\';\\n\\n    #access_log  logs/access.log  main;\\n\\n    sendfile        on;\\n    #tcp_nopush     on;\\n\\n    #keepalive_timeout  0;\\n    keepalive_timeout  65;\\n\\n    #gzip  on;\\n\\n    #配置刚刚搭建好的nacos集群\\n    upstream cluster{                                                        \\n\\t    server 127.0.0.1:3333;\\n\\t    server 127.0.0.1:4444;\\n\\t    server 127.0.0.1:5555;\\n\\t}\\n\\n    server {\\n        listen       1111;\\n        server_name  nacos_cluster;\\n\\n        #charset koi8-r;\\n\\n        #access_log  logs/host.access.log  main;\\n\\n        location / {\\n            #root   html;\\n            #index  index.html index.htm;\\n            #将所有访问/的都映射到配置好的集群\\n            proxy_pass http://cluster;\\n        }\\n\\n        #error_page  404              /404.html;\\n\\n        # redirect server error pages to the static page /50x.html\\n        #\\n        error_page   500 502 503 504  /50x.html;\\n        location = /50x.html {\\n            root   html;\\n        }\\n\\n        # proxy the PHP scripts to Apache listening on 127.0.0.1:80\\n        #\\n        #location ~ \\\\.php$ {\\n        #    proxy_pass   http://127.0.0.1;\\n        #}\\n\\n        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000\\n        #\\n        #location ~ \\\\.php$ {\\n        #    root           html;\\n        #    fastcgi_pass   127.0.0.1:9000;\\n        #    fastcgi_index  index.php;\\n        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;\\n        #    include        fastcgi_params;\\n        #}\\n\\n        # deny access to .htaccess files, if Apache\'s document root\\n        # concurs with nginx\'s one\\n        #\\n        #location ~ /\\\\.ht {\\n        #    deny  all;\\n        #}\\n    }\\n\\n\\n    # another virtual host using mix of IP-, name-, and port-based configuration\\n    #\\n    #server {\\n    #    listen       8000;\\n    #    listen       somename:8080;\\n    #    server_name  somename  alias  another.alias;\\n\\n    #    location / {\\n    #        root   html;\\n    #        index  index.html index.htm;\\n    #    }\\n    #}\\n\\n\\n    # HTTPS server\\n    #\\n    #server {\\n    #    listen       443 ssl;\\n    #    server_name  localhost;\\n\\n    #    ssl_certificate      cert.pem;\\n    #    ssl_certificate_key  cert.key;\\n\\n    #    ssl_session_cache    shared:SSL:1m;\\n    #    ssl_session_timeout  5m;\\n\\n    #    ssl_ciphers  HIGH:!aNULL:!MD5;\\n    #    ssl_prefer_server_ciphers  on;\\n\\n    #    location / {\\n    #        root   html;\\n    #        index  index.html index.htm;\\n    #    }\\n    #}\\n}\\n</code></pre>\\n<h3><a id=\\\"nginx_509\\\"></a>nginx启动</h3>\\n<pre><div class=\\\"hljs\\\"><code class=\\\"lang-sh\\\"><span class=\\\"hljs-built_in\\\">cd</span> /usr/<span class=\\\"hljs-built_in\\\">local</span>/nginx/sbin\\n./nginx\\n</code></div></pre>\\n<p>这时候我们就可以通过服务器ip地址:1111/nacos 来访问nacos集群了</p>\\n<p><img src=\\\"https://img-blog.csdnimg.cn/20201130205927229.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ0ODU5OA==,size_16,color_FFFFFF,t_70\\\" alt=\\\"在这里插入图片描述\\\" /></p>\\n<p>关于使用NACOS集群遇到问题 – CODE:503 MSG: SERVER IS STARTING NOW, PLEASE TRY AGAIN LATER!</p>\\n<p>这时又出现了问题……在服务提供者注册服务时会报错</p>\\n<pre><code class=\\\"lang-text\\\">2020-11-30 00:36:59.492 ERROR 13140 --- [  restartedMain] c.a.c.n.registry.NacosServiceRegistry    : nacos registry, nacos-payment-provider register failed...NacosRegistration{nacosDiscoveryProperties=NacosDiscoveryProperties{serverAddr=\'wsy.oopsw.top:1111\', endpoint=\'\', namespace=\'\', watchDelay=30000, logName=\'\', service=\'nacos-payment-provider\', weight=1.0, clusterName=\'DEFAULT\', namingLoadCacheAtStart=\'false\', metadata={preserved.register.source=SPRING_CLOUD}, registerEnabled=true, ip=\'10.175.6.100\', networkInterface=\'\', port=9002, secure=false, accessKey=\'\', secretKey=\'\'}},\\n\\njava.lang.IllegalStateException: failed to req API:/nacos/v1/ns/instance after all servers([wsy.oopsw.top:1111]) tried: failed to req API:wsy.oopsw.top:1111/nacos/v1/ns/instance. code:503 msg: server is DOWN now, please try again later!\\n\\tat com.alibaba.nacos.client.naming.net.NamingProxy.reqAPI(NamingProxy.java:464) ~[nacos-client-1.1.1.jar:na]\\n\\tat com.alibaba.nacos.client.naming.net.NamingProxy.reqAPI(NamingProxy.java:386) ~[nacos-client-1.1.1.jar:na]\\n\\tat com.alibaba.nacos.client.naming.net.NamingProxy.registerService(NamingProxy.java:188) ~[nacos-client-1.1.1.jar:na]\\n\\tat com.alibaba.nacos.client.naming.NacosNamingService.registerInstance(NacosNamingService.java:205) ~[nacos-client-1.1.1.jar:na]\\n\\tat com.alibaba.nacos.client.naming.NacosNamingService.registerInstance(NacosNamingService.java:184) ~[nacos-client-1.1.1.jar:na]\\n\\tat com.alibaba.cloud.nacos.registry.NacosServiceRegistry.register(NacosServiceRegistry.java:61) ~[spring-cloud-alibaba-nacos-discovery-2.1.0.RELEASE.jar:2.1.0.RELEASE]\\n\\tat org.springframework.cloud.client.serviceregistry.AbstractAutoServiceRegistration.register(AbstractAutoServiceRegistration.java:239) [spring-cloud-commons-2.2.1.RELEASE.jar:2.2.1.RELEASE]\\n\\tat com.alibaba.cloud.nacos.registry.NacosAutoServiceRegistration.register(NacosAutoServiceRegistration.java:74) [spring-cloud-alibaba-nacos-discovery-2.1.0.RELEASE.jar:2.1.0.RELEASE]\\n\\tat org.springframework.cloud.client.serviceregistry.AbstractAutoServiceRegistration.start(AbstractAutoServiceRegistration.java:138) [spring-cloud-commons-2.2.1.RELEASE.jar:2.2.1.RELEASE]\\n\\tat org.springframework.cloud.client.serviceregistry.AbstractAutoServiceRegistration.bind(AbstractAutoServiceRegistration.java:101) [spring-cloud-commons-2.2.1.RELEASE.jar:2.2.1.RELEASE]\\n\\tat org.springframework.cloud.client.serviceregistry.AbstractAutoServiceRegistration.onApplicationEvent(AbstractAutoServiceRegistration.java:88) [spring-cloud-commons-2.2.1.RELEASE.jar:2.2.1.RELEASE]\\n\\tat org.springframework.cloud.client.serviceregistry.AbstractAutoServiceRegistration.onApplicationEvent(AbstractAutoServiceRegistration.java:47) [spring-cloud-commons-2.2.1.RELEASE.jar:2.2.1.RELEASE]\\n\\tat org.springframework.context.event.SimpleApplicationEventMulticaster.doInvokeListener(SimpleApplicationEventMulticaster.java:172) [spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]\\n\\tat org.springframework.context.event.SimpleApplicationEventMulticaster.invokeListener(SimpleApplicationEventMulticaster.java:165) [spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]\\n\\tat org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:139) [spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]\\n\\tat org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:403) [spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]\\n\\tat org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:360) [spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]\\n\\tat org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.finishRefresh(ServletWebServerApplicationContext.java:165) [spring-boot-2.2.2.RELEASE.jar:2.2.2.RELEASE]\\n\\tat org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:553) [spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]\\n\\tat org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:141) [spring-boot-2.2.2.RELEASE.jar:2.2.2.RELEASE]\\n\\tat org.springframework.boot.SpringApplication.refresh(SpringApplication.java:747) [spring-boot-2.2.2.RELEASE.jar:2.2.2.RELEASE]\\n\\tat org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:397) [spring-boot-2.2.2.RELEASE.jar:2.2.2.RELEASE]\\n\\tat org.springframework.boot.SpringApplication.run(SpringApplication.java:315) [spring-boot-2.2.2.RELEASE.jar:2.2.2.RELEASE]\\n\\tat org.springframework.boot.SpringApplication.run(SpringApplication.java:1226) [spring-boot-2.2.2.RELEASE.jar:2.2.2.RELEASE]\\n\\tat org.springframework.boot.SpringApplication.run(SpringApplication.java:1215) [spring-boot-2.2.2.RELEASE.jar:2.2.2.RELEASE]\\n\\tat com.wsy.springcloud.AlibabaProviderApplication.main(AlibabaProviderApplication.java:15) [classes/:na]\\n\\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_73]\\n\\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_73]\\n\\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_73]\\n\\tat java.lang.reflect.Method.invoke(Method.java:497) ~[na:1.8.0_73]\\n\\tat org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49) [spring-boot-devtools-2.2.2.RELEASE.jar:2.2.2.RELEASE]\\n</code></pre>\\n<p>像阿里云、腾讯云这种云服务器, 会提供一个外网ip和内网ip, 访问外网ip时会指向对应的内网ip来访问到该服务器, 由于nacos集群内部是指定的使用网卡ip地址来进行通信,但是由于三台服务器各自的内网ip不在同一网段, 所以造成无法通信, 也会造成以下问题</p>\\n<p>注册服务:</p>\\n<pre><code class=\\\"lang-\\\">code:503 msg: server is STARTING now, please try again later!\\n</code></pre>\\n<p>naming-raft.log 日志:</p>\\n<pre><code class=\\\"lang-\\\">2019-05-15 00:02:00,000 WARN [IS LEADER] no leader is available now!\\n</code></pre>\\n<p>这时只要修改启动参数, 设置本机ip地址就可以了<br />\\n修改 nacos/bin/startup.sh 文件<br />\\n找到 JVM Configuration 这部分, 在集群参数里增加 -Dnacos.server.ip=xx</p>\\n<pre><div class=\\\"hljs\\\"><code class=\\\"lang-sh\\\"><span class=\\\"hljs-comment\\\">#===========================================================================================</span>\\n<span class=\\\"hljs-comment\\\"># JVM Configuration</span>\\n<span class=\\\"hljs-comment\\\">#===========================================================================================</span>\\n\\n<span class=\\\"hljs-comment\\\"># 单机模式对应的启动参数</span>\\n<span class=\\\"hljs-keyword\\\">if</span> [[ <span class=\\\"hljs-string\\\">\\\"<span class=\\\"hljs-variable\\\">${MODE}</span>\\\"</span> == <span class=\\\"hljs-string\\\">\\\"standalone\\\"</span> ]]; <span class=\\\"hljs-keyword\\\">then</span>\\n    JAVA_OPT=<span class=\\\"hljs-string\\\">\\\"<span class=\\\"hljs-variable\\\">${JAVA_OPT}</span> -Xms512m -Xmx512m -Xmn256m\\\"</span>\\n    JAVA_OPT=<span class=\\\"hljs-string\\\">\\\"<span class=\\\"hljs-variable\\\">${JAVA_OPT}</span> -Dnacos.standalone=true\\\"</span>\\n<span class=\\\"hljs-keyword\\\">else</span>\\n<span class=\\\"hljs-comment\\\"># 集群模式对应的启动参数</span>\\n    JAVA_OPT=<span class=\\\"hljs-string\\\">\\\"<span class=\\\"hljs-variable\\\">${JAVA_OPT}</span> -server -Xms2g -Xmx2g -Xmn1g -XX:MetaspaceSize=128m -XX:MaxMetaspaceSize=320m\\\"</span>\\n    JAVA_OPT=<span class=\\\"hljs-string\\\">\\\"<span class=\\\"hljs-variable\\\">${JAVA_OPT}</span> -XX:-OmitStackTraceInFastThrow -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=<span class=\\\"hljs-variable\\\">${BASE_DIR}</span>/logs/java_heapdump.hprof\\\"</span>\\n    JAVA_OPT=<span class=\\\"hljs-string\\\">\\\"<span class=\\\"hljs-variable\\\">${JAVA_OPT}</span> -XX:-UseLargePages\\\"</span>\\n    \\n    <span class=\\\"hljs-comment\\\"># *新增以下参数设置本机ip地址*</span>\\n    JAVA_OPT=<span class=\\\"hljs-string\\\">\\\"<span class=\\\"hljs-variable\\\">${JAVA_OPT}</span> -Dnacos.server.ip=本机ip\\\"</span>\\n\\n<span class=\\\"hljs-keyword\\\">fi</span>\\n\\n<span class=\\\"hljs-keyword\\\">if</span> [[ <span class=\\\"hljs-string\\\">\\\"<span class=\\\"hljs-variable\\\">${FUNCTION_MODE}</span>\\\"</span> == <span class=\\\"hljs-string\\\">\\\"config\\\"</span> ]]; <span class=\\\"hljs-keyword\\\">then</span>\\n    JAVA_OPT=<span class=\\\"hljs-string\\\">\\\"<span class=\\\"hljs-variable\\\">${JAVA_OPT}</span> -Dnacos.functionMode=config\\\"</span>\\n<span class=\\\"hljs-keyword\\\">elif</span> [[ <span class=\\\"hljs-string\\\">\\\"<span class=\\\"hljs-variable\\\">${FUNCTION_MODE}</span>\\\"</span> == <span class=\\\"hljs-string\\\">\\\"naming\\\"</span> ]]; <span class=\\\"hljs-keyword\\\">then</span>\\n    JAVA_OPT=<span class=\\\"hljs-string\\\">\\\"<span class=\\\"hljs-variable\\\">${JAVA_OPT}</span> -Dnacos.functionMode=naming\\\"</span>\\n<span class=\\\"hljs-keyword\\\">fi</span>\\n\\n</code></div></pre>\\n<p>参考博客：https://www.freesion.com/article/33101142210/</p>\\n<p>服务注册时报BadRequest400 问题暂时还未解决</p>\\n<pre><code class=\\\"lang-text\\\">com.alibaba.nacos.api.exception.NacosException: failed to req API:/nacos/v1/ns/instance after all servers([wsy.oopsw.top:1111]) tried: ErrCode:400, ErrMsg:&lt;html&gt;&lt;body&gt;&lt;h1&gt;Whitelabel Error Page&lt;/h1&gt;&lt;p&gt;This application has no explicit mapping for /error, so you are seeing this as a fallback.&lt;/p&gt;&lt;div id=\'created\'&gt;Mon Nov 30 01:33:45 CST 2020&lt;/div&gt;&lt;div&gt;There was an unexpected error (type=Bad Request, status=400).&lt;/div&gt;&lt;div&gt;receive invalid redirect request from peer 172.20.9.153&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;\\n</code></pre>\\n<p>#############################################################</p>\\n<p>问题已解决，是nacos版本的问题，据群里老哥解释说是nacos需要使用与之对应的SpringCloudAlibaba的版本，不然就会报错，我更换版本到1.3.2问题解决服务注册正常</p>\\n\",\"blogGoods\":0,\"blogId\":\"1333411378995605504\",\"blogImage\":\"http://808km.top/blog/img/img/default/1333411206555185152\",\"blogRead\":53,\"blogRemark\":\"nacos集群环境搭建\",\"blogTitle\":\"nacos集群环境搭建\",\"blogType\":20,\"createdTime\":1606745021000,\"typeName\":\"nacos\",\"updateTime\":1608615947000,\"version\":39},\"msg\":\"阅读成功\"}', '218.77.40.108', '2020-12-23 00:28:30', NULL);
INSERT INTO `bl_log` VALUES (2772, '阅读关于我的', '//about/read', '[]', 1, NULL, 'PUT', 85, '{\"code\":20000,\"data\":{\"aboutContent\":\"<h1><a id=\\\"_0\\\"></a>前言</h1>\\n<p>我是一名即将大三的在校大学生，自主学习的过程中跟随讲师开发了该个人博客“闲言博客”，这个博客功能简单，但是为我巩固了不少的技术知识，该网站为前后端分离项目，后端:<em><strong>springboot+mybatis</strong></em> 前端-前台：_<strong>vue+ and design</strong><em>前端-后台: <em><strong>vue+ element-ui</strong></em> 开发该项目花了我大概10来天时间，前台页面代码是我copy的讲师提供的静态页面（原谅我写的css自己都看不下去），后续想追加个</em><strong>redis</strong><em>写个缓存，以及加一个</em><strong>ElasticSearch</strong>_搜索引擎，加油吧！</p>\\n<h2><a id=\\\"_4\\\"></a>该博客使用到的技术栈：</h2>\\n<p>SpringBoot，Mybatis，Shiro，Maven，Vue，ElementUI，AntDesignVue，Flex布局，Linux，Nginx，Docker，FastDFS，MongoDB，SpringDataMongoDB<br />\\n该博客由我在腾讯课堂购买课程学习开发，网址：</p>\\n<p><a href=\\\"https://ke.qq.com/course/1129309\\\" target=\\\"_blank\\\">课程地址</a></p>\\n<hr />\\n<p>目前我正在修改该博客的小bug并且在集成更多的新功能，我希望能够使用这个博客项目去巩固我学习的新知识，也希望能有更多的人看到我写的这个项目。</p>\\n<h2><a id=\\\"_15\\\"></a>目前需要改进的地方：</h2>\\n<ol>\\n<li>使用elasticSearch 进行博客的检索</li>\\n<li>将首页的主图片修改为轮播图</li>\\n<li><s>注册时上传头像</s></li>\\n<li><s>将富文本编辑器改为Markdown编辑器</s></li>\\n<li><s>更新记录日志的方式</s></li>\\n<li><s>首页url的问题</s></li>\\n<li><s>数据库时间问题</s></li>\\n<li><s>前台md5加密改为后台加密后再匹配</s></li>\\n<li><s>推荐博客下的时间</s></li>\\n<li><s>登录注册页面的背景图片</s></li>\\n<li><s>登录注册页面的卡片问题</s></li>\\n<li>后台中写博客路由问题</li>\\n<li>后端登录中管理员和用户混淆不清关系</li>\\n<li><s>阅读博客时会更新version(乐观锁)这可能会导致在别人观看博客的时候导致博主无法更新博客影响博主体验</s></li>\\n<li>在进入下一个路由之后回到顶部</li>\\n<li>将分页功能改为加载更多</li>\\n</ol>\\n<p>暂时还需要学习一点其他的之后，等有时间的时候再来继续完善该博客。</p>\\n<h2><a id=\\\"_36\\\"></a>更新记录</h2>\\n<ul>\\n<li>\\n<p>2020-11-17 09:25 add:如果添加博客不上传封面将会设置一个默认封面图片</p>\\n</li>\\n<li>\\n<p>2020-11-18 21:48 update:将原本前端md5加密后再跟后端匹配改为后端进行加密后再匹配</p>\\n</li>\\n<li>\\n<p>2020-11-19 22:15 fix:将页面url后面会添加publicPath问题解决</p>\\n</li>\\n<li>\\n<p>2020-11-24 11:25 update:将前端静态资源使用cdn加速、日志原记录为controller层的所有方法切入改为Log注解处切入</p>\\n</li>\\n<li>\\n<p>2020-11-24 21:51 fix:修复推荐博客下的时间bug</p>\\n</li>\\n<li>\\n<p>2020-11-24 21:51 add:注册时添加上传头像功能</p>\\n</li>\\n<li>\\n<p>2020-11-25 11:46 fix:修复数据库时间问题，具体问题已发博客，<a href=\\\"http://oopsw.top:1001/info/1331436834413211648\\\" target=\\\"_blank\\\">点我查看</a></p>\\n</li>\\n<li>\\n<p>2020-11-27 23:47 fix:登录注册页面卡片超出页面没有显示滚动条、背景图片在页面放大时会出现多个背景图片</p>\\n</li>\\n<li>\\n<p>2020-11-29 00:51 update:将前后台的所有富文本编辑器更换为markdown编辑器，并用markdown的样式</p>\\n</li>\\n<li>\\n<p>2020-12-01 08:30 update:修改markdown代码块样式</p>\\n</li>\\n<li>\\n<p>2020-12-01 08:57 fix:手机访问登录注册页面时样式体验差</p>\\n</li>\\n<li>\\n<p>2020-12-03 22:18 update:更换markdown存储方式，从存储markdown源码改为存储HTML源码</p>\\n</li>\\n</ul>\\n\",\"aboutId\":\"5\",\"aboutRead\":177,\"aboutTitle\":\"关于我的 关于“闲言”\",\"createdTime\":1597816791000,\"enable\":1,\"updateTime\":1607520298000,\"version\":226},\"msg\":\"阅读成功\"}', '218.77.40.92', '2020-12-25 08:32:57', NULL);
INSERT INTO `bl_log` VALUES (2773, '阅读博客', '//blog/read/1333708609683533824', '[1333708609683533824]', 1, NULL, 'PUT', 27, '{\"code\":20000,\"data\":{\"blogCollection\":1,\"blogComment\":0,\"blogContent\":\"<h1><a id=\\\"_0\\\"></a>前言</h1>\\n<p>今天在给博客更新，将session存到redis中持久化存储，正常操作是没问题的，但是后来尝试发现，在我输入的密码是错误的时候，他也创建了session，经过我的一番从尾到头的debug。。。。<br />\\n复杂的debug过程就不贴出来了，放出问题的根源<br />\\n在登陆时，会访问到我用来记录日志的切面,而我的记录日志方法中有一个需要获取到当前登录的用户的信息，来完善日志的字段</p>\\n<blockquote>\\n<p><img src=\\\"http://808km.top/blog/img/img/blogImg/1333703986787631104\\\" alt=\\\"image.png\\\" /><br />\\n以下是工具类中的原方法：<br />\\n<img src=\\\"http://808km.top/blog/img/img/blogImg/1333704236625543168\\\" alt=\\\"image.png\\\" /><br />\\n以下是修改后的方法<br />\\n<img src=\\\"http://808km.top/blog/img/img/blogImg/1333704399599419392\\\" alt=\\\"image.png\\\" /><br />\\n这就是问题的根源，因为在我登录的时候，要记录日志，然后去调用工具类，工具类去获取session，如果没有getSession(false)的话，就会判断session是否存在，如果不存在的话就会自动创建session，这就是为什么明明密码错了还会创建session的原因</p>\\n</blockquote>\\n\",\"blogGoods\":1,\"blogId\":\"1333708609683533824\",\"blogImage\":\"http://808km.top/blog/img/default.jpg\",\"blogRead\":43,\"blogRemark\":\"shiro+redis整合实现session持久化登陆失败时也会生成session问题\",\"blogTitle\":\"shiro+redis整合实现session持久化登陆失败时也会生成session问题\",\"blogType\":6,\"createdTime\":1606815886000,\"typeName\":\"Java\",\"updateTime\":1608615749000,\"version\":3},\"msg\":\"阅读成功\"}', '218.77.40.108', '2020-12-28 01:39:59', NULL);
INSERT INTO `bl_log` VALUES (2774, '阅读博客', '//blog/read/1333411378995605504', '[1333411378995605504]', 1, NULL, 'PUT', 28, '{\"code\":20000,\"data\":{\"blogCollection\":0,\"blogComment\":0,\"blogContent\":\"<h2><a id=\\\"_0\\\"></a>预备环境准备</h2>\\n<p>Nacos 依赖 <a href=\\\"https://docs.oracle.com/cd/E19182-01/820-7851/inst_cli_jdk_javahome_t/\\\" target=\\\"_blank\\\">Java</a> 环境来运行。如果您是从代码开始构建并运行Nacos，还需要为此配置 <a href=\\\"https://maven.apache.org/index.html\\\" target=\\\"_blank\\\">Maven</a>环境，请确保是在以下版本环境中安装使用:</p>\\n<ol>\\n<li>64 bit OS，支持 Linux/Unix/Mac/Windows，推荐选用 Linux/Unix/Mac。</li>\\n<li>64 bit JDK 1.8+；<a href=\\\"http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html\\\" target=\\\"_blank\\\">下载</a> &amp; <a href=\\\"https://docs.oracle.com/cd/E19182-01/820-7851/inst_cli_jdk_javahome_t/\\\" target=\\\"_blank\\\">配置</a>。</li>\\n<li>Maven 3.2.x+；<a href=\\\"https://maven.apache.org/download.cgi\\\" target=\\\"_blank\\\">下载</a> &amp; <a href=\\\"https://maven.apache.org/settings.html\\\" target=\\\"_blank\\\">配置</a>。</li>\\n</ol>\\n<h2><a id=\\\"nacos_8\\\"></a>下载nacos安装包</h2>\\n<p>https://github.com/alibaba/nacos/releases/tag/1.4.0</p>\\n<blockquote>\\n<p><img src=\\\"https://img-blog.csdnimg.cn/20201130205557917.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ0ODU5OA==,size_16,color_FFFFFF,t_70\\\" alt=\\\"在这里插入图片描述\\\" /></p>\\n</blockquote>\\n<p>linux选择第一个</p>\\n<p>windows选择第二个</p>\\n<h2><a id=\\\"_21\\\"></a>搭建环境</h2>\\n<h3><a id=\\\"_23\\\"></a>集群模式部署</h3>\\n<p>这个快速开始手册是帮忙您快速在你的电脑上，下载安装并使用Nacos，部署生产使用的集群模式。</p>\\n<h3><a id=\\\"_27\\\"></a>集群部署架构图</h3>\\n<p><img src=\\\"https://img-blog.csdnimg.cn/20201130205609797.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ0ODU5OA==,size_16,color_FFFFFF,t_70\\\" alt=\\\"在这里插入图片描述\\\" /></p>\\n<p>VIP:虚拟ip</p>\\n<p>因此开源的时候推荐用户把所有服务列表放到一个vip下面，然后挂到一个域名下面</p>\\n<p><a href=\\\"http://ip1/\\\" target=\\\"_blank\\\">http://ip1</a>:port/openAPI 直连ip模式，机器挂则需要修改ip才可以使用。</p>\\n<p><a href=\\\"http://vip/\\\" target=\\\"_blank\\\">http://VIP</a>:port/openAPI 挂载VIP模式，直连vip即可，下面挂server真实ip，可读性不好。</p>\\n<p><a href=\\\"http://nacos.com/\\\" target=\\\"_blank\\\">http://nacos.com</a>:port/openAPI 域名 + VIP模式，可读性好，而且换ip方便，推荐模式</p>\\n<h3><a id=\\\"_42\\\"></a>创建目录</h3>\\n<p>该目录存放nacos集群</p>\\n<pre><div class=\\\"hljs\\\"><code class=\\\"lang-sh\\\">mkdir /usr/<span class=\\\"hljs-built_in\\\">local</span>/nacos\\n</code></div></pre>\\n<h3><a id=\\\"nacos_50\\\"></a>上传nacos</h3>\\n<blockquote>\\n<p><img src=\\\"https://img-blog.csdnimg.cn/20201130205630233.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ0ODU5OA==,size_16,color_FFFFFF,t_70\\\" alt=\\\"在这里插入图片描述\\\" /></p>\\n</blockquote>\\n<h3><a id=\\\"nacos_54\\\"></a>解压nacos</h3>\\n<pre><div class=\\\"hljs\\\"><code class=\\\"lang-sh\\\">tar -zxvf nacos-server-1.4.0.tar.gz\\n</code></div></pre>\\n<h3><a id=\\\"nacos_60\\\"></a>创建nacos持久化数据库</h3>\\n<p>首先使用navicat连接mysql数据库，然后创建数据库</p>\\n<p><img src=\\\"https://img-blog.csdnimg.cn/20201130205643439.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ0ODU5OA==,size_16,color_FFFFFF,t_70\\\" alt=\\\"在这里插入图片描述\\\" /></p>\\n<p>新建查询后导入SQL脚本即可</p>\\n<p><img src=\\\"https://img-blog.csdnimg.cn/20201130205705669.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ0ODU5OA==,size_16,color_FFFFFF,t_70\\\" alt=\\\"在这里插入图片描述\\\" /></p>\\n<p>红色框选那栏填写你的SQL脚本位置，SQL脚本在nacos文件夹下的conf下</p>\\n<h3><a id=\\\"nacos_73\\\"></a>nacos文件夹改名</h3>\\n<p>将文件夹名改为nacos3333代表这个nacos的端口号是3333</p>\\n<pre><div class=\\\"hljs\\\"><code class=\\\"lang-sh\\\">mv nacos nacos3333\\n</code></div></pre>\\n<h3><a id=\\\"_81\\\"></a>配置修改</h3>\\n<p>首先进入到配置目录</p>\\n<pre><div class=\\\"hljs\\\"><code class=\\\"lang-sh\\\"><span class=\\\"hljs-built_in\\\">cd</span> /usr/<span class=\\\"hljs-built_in\\\">local</span>/nacos/nacos3333/conf\\n</code></div></pre>\\n<blockquote>\\n<p><img src=\\\"https://img-blog.csdnimg.cn/2020113020572431.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ0ODU5OA==,size_16,color_FFFFFF,t_70\\\" alt=\\\"在这里插入图片描述\\\" /></p>\\n</blockquote>\\n<p>在更改配置之前先备份配置</p>\\n<pre><div class=\\\"hljs\\\"><code class=\\\"lang-sh\\\">cp application.properties application.properties.example\\n</code></div></pre>\\n<pre><div class=\\\"hljs\\\"><code class=\\\"lang-sh\\\">cp cluster.conf.example cluster.conf\\n</code></div></pre>\\n<h3><a id=\\\"_104\\\"></a>集群配置</h3>\\n<pre><div class=\\\"hljs\\\"><code class=\\\"lang-sh\\\">vim cluster.conf\\n</code></div></pre>\\n<blockquote>\\n<p><img src=\\\"https://img-blog.csdnimg.cn/20201130205739435.png\\\" alt=\\\"在这里插入图片描述\\\" /></p>\\n</blockquote>\\n<blockquote>\\n<p>注意这里不能填写localhost 或者127.0.0.1，这里如果是在本机搭建可以查看本机ip后填写</p>\\n<pre><div class=\\\"hljs\\\"><code class=\\\"lang-sh\\\">hostname -i\\n</code></div></pre>\\n<p><img src=\\\"https://img-blog.csdnimg.cn/20201130205749116.png\\\" alt=\\\"在这里插入图片描述\\\" /></p>\\n</blockquote>\\n<h3><a id=\\\"nacos_122\\\"></a>nacos配置</h3>\\n<pre><div class=\\\"hljs\\\"><code class=\\\"lang-sh\\\">vim application.properties\\n</code></div></pre>\\n<pre><code class=\\\"lang-properties\\\">\\n#*************** Spring Boot Related Configurations ***************#\\n### Default web context path:\\nserver.servlet.contextPath=/nacos\\n### Default web server port:\\nserver.port=3333\\n\\n#*************** Network Related Configurations ***************#\\n### If prefer hostname over ip for Nacos server addresses in cluster.conf:\\n# nacos.inetutils.prefer-hostname-over-ip=false\\n\\n### Specify local server\'s IP:\\n# nacos.inetutils.ip-address=\\n\\n\\n#*************** Config Module Related Configurations ***************#\\n### If use MySQL as datasource:\\n spring.datasource.platform=mysql\\n\\n### Count of DB:\\n db.num=1\\n\\n### Connect URL of DB:\\ndb.url.0=jdbc:mysql://127.0.0.1:3306/nacos_config?characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true&amp;useUnicode=true&amp;useSSL=false&amp;serverTimezone=UTC\\ndb.user=root\\ndb.password=123456\\n\\n\\n#*************** Naming Module Related Configurations ***************#\\n### Data dispatch task execution period in milliseconds:\\n# nacos.naming.distro.taskDispatchPeriod=200\\n\\n### Data count of batch sync task:\\n# nacos.naming.distro.batchSyncKeyCount=1000\\n\\n### Retry delay in milliseconds if sync task failed:\\n# nacos.naming.distro.syncRetryDelay=5000\\n\\n### If enable data warmup. If set to false, the server would accept request without local data preparation:\\n# nacos.naming.data.warmup=true\\n\\n### If enable the instance auto expiration, kind like of health check of instance:\\n# nacos.naming.expireInstance=true\\n\\nnacos.naming.empty-service.auto-clean=true\\nnacos.naming.empty-service.clean.initial-delay-ms=50000\\nnacos.naming.empty-service.clean.period-time-ms=30000\\n\\n\\n#*************** CMDB Module Related Configurations ***************#\\n### The interval to dump external CMDB in seconds:\\n# nacos.cmdb.dumpTaskInterval=3600\\n\\n### The interval of polling data change event in seconds:\\n# nacos.cmdb.eventTaskInterval=10\\n\\n### The interval of loading labels in seconds:\\n# nacos.cmdb.labelTaskInterval=300\\n\\n### If turn on data loading task:\\n# nacos.cmdb.loadDataAtStart=false\\n\\n\\n#*************** Metrics Related Configurations ***************#\\n### Metrics for prometheus\\n#management.endpoints.web.exposure.include=*\\n\\n### Metrics for elastic search\\nmanagement.metrics.export.elastic.enabled=false\\n#management.metrics.export.elastic.host=http://localhost:9200\\n\\n### Metrics for influx\\nmanagement.metrics.export.influx.enabled=false\\n#management.metrics.export.influx.db=springboot\\n#management.metrics.export.influx.uri=http://localhost:8086\\n#management.metrics.export.influx.auto-create-db=true\\n#management.metrics.export.influx.consistency=one\\n#management.metrics.export.influx.compressed=true\\n\\n\\n#*************** Access Log Related Configurations ***************#\\n### If turn on the access log:\\nserver.tomcat.accesslog.enabled=true\\n\\n### The access log pattern:\\nserver.tomcat.accesslog.pattern=%h %l %u %t &quot;%r&quot; %s %b %D %{User-Agent}i %{Request-Source}i\\n\\n### The directory of access log:\\nserver.tomcat.basedir=\\n\\n\\n#*************** Access Control Related Configurations ***************#\\n### If enable spring security, this option is deprecated in 1.2.0:\\n#spring.security.enabled=false\\n\\n### The ignore urls of auth, is deprecated in 1.2.0:\\nnacos.security.ignore.urls=/,/error,/**/*.css,/**/*.js,/**/*.html,/**/*.map,/**/*.svg,/**/*.png,/**/*.ico,/console-fe/public/**,/v1/auth/**,/v1/console/health/**,/actuator/**,/v1/console/server/**\\n\\n### The auth system to use, currently only \'nacos\' is supported:\\nnacos.core.auth.system.type=nacos\\n\\n### If turn on auth system:\\nnacos.core.auth.enabled=false\\n\\n### The token expiration in seconds:\\nnacos.core.auth.default.token.expire.seconds=18000\\n\\n### The default token:\\nnacos.core.auth.default.token.secret.key=SecretKey012345678901234567890123456789012345678901234567890123456789\\n\\n### Turn on/off caching of auth information. By turning on this switch, the update of auth information would have a 15 seconds delay.\\nnacos.core.auth.caching.enabled=true\\n\\n\\n#*************** Istio Related Configurations ***************#\\n### If turn on the MCP server:\\nnacos.istio.mcp.server.enabled=false\\n\\n\\n\\n###*************** Add from 1.3.0 ***************###\\n\\n\\n#*************** Core Related Configurations ***************#\\n\\n### set the WorkerID manually\\n# nacos.core.snowflake.worker-id=\\n\\n### Member-MetaData\\n# nacos.core.member.meta.site=\\n# nacos.core.member.meta.adweight=\\n# nacos.core.member.meta.weight=\\n\\n### MemberLookup\\n### Addressing pattern category, If set, the priority is highest\\n# nacos.core.member.lookup.type=[file,address-server]\\n## Set the cluster list with a configuration file or command-line argument\\n# nacos.member.list=192.168.16.101:8847?raft_port=8807,192.168.16.101?raft_port=8808,192.168.16.101:8849?raft_port=8809\\n## for AddressServerMemberLookup\\n# Maximum number of retries to query the address server upon initialization\\n# nacos.core.address-server.retry=5\\n## Server domain name address of [address-server] mode\\n# address.server.domain=jmenv.tbsite.net\\n## Server port of [address-server] mode\\n# address.server.port=8080\\n## Request address of [address-server] mode\\n# address.server.url=/nacos/serverlist\\n\\n#*************** JRaft Related Configurations ***************#\\n\\n### Sets the Raft cluster election timeout, default value is 5 second\\n# nacos.core.protocol.raft.data.election_timeout_ms=5000\\n### Sets the amount of time the Raft snapshot will execute periodically, default is 30 minute\\n# nacos.core.protocol.raft.data.snapshot_interval_secs=30\\n### raft internal worker threads\\n# nacos.core.protocol.raft.data.core_thread_num=8\\n### Number of threads required for raft business request processing\\n# nacos.core.protocol.raft.data.cli_service_thread_num=4\\n### raft linear read strategy. Safe linear reads are used by default, that is, the Leader tenure is confirmed by heartbeat\\n# nacos.core.protocol.raft.data.read_index_type=ReadOnlySafe\\n### rpc request timeout, default 5 seconds\\n# nacos.core.protocol.raft.data.rpc_request_timeout_ms=5000\\n\\n</code></pre>\\n<p>这是我的整个application.properties文件,其中主要修改的地方有两处</p>\\n<p>修改端口号</p>\\n<pre><code class=\\\"lang-properties\\\">### Default web server port:\\nserver.port=3333\\n</code></pre>\\n<p>修改数据库为mysql并配置mysql的url</p>\\n<pre><code class=\\\"lang-properties\\\">#*************** Config Module Related Configurations ***************#\\n### If use MySQL as datasource:\\n spring.datasource.platform=mysql\\n\\n### Count of DB:\\n db.num=1\\n\\n### Connect URL of DB:\\ndb.url.0=jdbc:mysql://127.0.0.1:3306/nacos_config?characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true&amp;useUnicode=true&amp;useSSL=false&amp;serverTimezone=UTC\\ndb.user=root\\ndb.password=123456\\n</code></pre>\\n<p>这时候配置就差不多啦可以开始启动服务了</p>\\n<pre><div class=\\\"hljs\\\"><code class=\\\"lang-sh\\\"><span class=\\\"hljs-comment\\\"># 进入到nacos3333的bin目录</span>\\n<span class=\\\"hljs-built_in\\\">cd</span> /usr/<span class=\\\"hljs-built_in\\\">local</span>/nacos/nacos3333/bin\\n<span class=\\\"hljs-comment\\\"># 执行启动脚本 因为nacos启动脚本默认就是使用集群模式所以不用更改</span>\\n./startup.sh\\n</code></div></pre>\\n<p>这时候我们可以查看nacos的启动状态</p>\\n<pre><div class=\\\"hljs\\\"><code class=\\\"lang-sh\\\">ps -ef | grep nacos\\n</code></div></pre>\\n<blockquote>\\n<p><img src=\\\"https://img-blog.csdnimg.cn/20201130205818481.png\\\" alt=\\\"在这里插入图片描述\\\" /></p>\\n</blockquote>\\n<p>这时候我们应该就可以通过 服务器ip:3333/nacos访问到nacos</p>\\n<blockquote>\\n<p><img src=\\\"https://img-blog.csdnimg.cn/20201130205828641.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ0ODU5OA==,size_16,color_FFFFFF,t_70\\\" alt=\\\"在这里插入图片描述\\\" /></p>\\n</blockquote>\\n<p>成功的访问到了nacos代表成功了。</p>\\n<h3><a id=\\\"nacos_344\\\"></a>nacos集群启动</h3>\\n<p>这时候我们就可以回到nacos目录下拷贝之前的nacos3333文件夹来启动nacos4444和nacos5555</p>\\n<pre><div class=\\\"hljs\\\"><code class=\\\"lang-sh\\\"><span class=\\\"hljs-built_in\\\">cd</span> /usr/<span class=\\\"hljs-built_in\\\">local</span>/nacos\\n<span class=\\\"hljs-comment\\\"># cp -r 代表递归拷贝</span>\\ncp -r nacos3333 nacos4444\\ncp -r nacos3333 nacos5555\\n</code></div></pre>\\n<p>这时候再分别将nacos4444和nacos5555文件夹下的conf目录中的application.properties中的server.port更改为3333、4444然后再启动，这里我就不再演示了，和之前配置一样。</p>\\n<p>随后我们再依次启动nacos4444，nacos5555</p>\\n<p>###########################################################################</p>\\n<p>启动后发现问题，nacos5555启动不起来，查看日志得到发现内存不足，nacos脚本默认给的最大内存是2G，我们可以去改小一点。</p>\\n<p><img src=\\\"https://img-blog.csdnimg.cn/20201130205845619.png\\\" alt=\\\"在这里插入图片描述\\\" /></p>\\n<p>原红框中限制的内存是2g 最小1g 适当该小一点[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传<br />\\n<img src=\\\"https://img-blog.csdnimg.cn/20201130205903628.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ0ODU5OA==,size_16,color_FFFFFF,t_70\\\" alt=\\\"在这里插入图片描述\\\" /></p>\\n<p>然后再依次启动三个服务</p>\\n<p>登录任意一个nacos可以看到如下页面即集群启动成功</p>\\n<h3><a id=\\\"nginx_373\\\"></a>nginx配置</h3>\\n<p>这配置nginx负载均衡访问nacos</p>\\n<pre><div class=\\\"hljs\\\"><code class=\\\"lang-sh\\\"><span class=\\\"hljs-built_in\\\">cd</span> /usr/<span class=\\\"hljs-built_in\\\">local</span>/nginx/conf\\nvim nginx.conf\\n</code></div></pre>\\n<pre><code class=\\\"lang-conf\\\">#user  nobody;\\nworker_processes  1;\\n\\n#error_log  logs/error.log;\\n#error_log  logs/error.log  notice;\\n#error_log  logs/error.log  info;\\n\\n#pid        logs/nginx.pid;\\n\\n\\nevents {\\n    worker_connections  1024;\\n}\\n\\n\\nhttp {\\n    include       mime.types;\\n    default_type  application/octet-stream;\\n\\n    #log_format  main  \'$remote_addr - $remote_user [$time_local] &quot;$request&quot; \'\\n    #                  \'$status $body_bytes_sent &quot;$http_referer&quot; \'\\n    #                  \'&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;\';\\n\\n    #access_log  logs/access.log  main;\\n\\n    sendfile        on;\\n    #tcp_nopush     on;\\n\\n    #keepalive_timeout  0;\\n    keepalive_timeout  65;\\n\\n    #gzip  on;\\n\\n    #配置刚刚搭建好的nacos集群\\n    upstream cluster{                                                        \\n\\t    server 127.0.0.1:3333;\\n\\t    server 127.0.0.1:4444;\\n\\t    server 127.0.0.1:5555;\\n\\t}\\n\\n    server {\\n        listen       1111;\\n        server_name  nacos_cluster;\\n\\n        #charset koi8-r;\\n\\n        #access_log  logs/host.access.log  main;\\n\\n        location / {\\n            #root   html;\\n            #index  index.html index.htm;\\n            #将所有访问/的都映射到配置好的集群\\n            proxy_pass http://cluster;\\n        }\\n\\n        #error_page  404              /404.html;\\n\\n        # redirect server error pages to the static page /50x.html\\n        #\\n        error_page   500 502 503 504  /50x.html;\\n        location = /50x.html {\\n            root   html;\\n        }\\n\\n        # proxy the PHP scripts to Apache listening on 127.0.0.1:80\\n        #\\n        #location ~ \\\\.php$ {\\n        #    proxy_pass   http://127.0.0.1;\\n        #}\\n\\n        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000\\n        #\\n        #location ~ \\\\.php$ {\\n        #    root           html;\\n        #    fastcgi_pass   127.0.0.1:9000;\\n        #    fastcgi_index  index.php;\\n        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;\\n        #    include        fastcgi_params;\\n        #}\\n\\n        # deny access to .htaccess files, if Apache\'s document root\\n        # concurs with nginx\'s one\\n        #\\n        #location ~ /\\\\.ht {\\n        #    deny  all;\\n        #}\\n    }\\n\\n\\n    # another virtual host using mix of IP-, name-, and port-based configuration\\n    #\\n    #server {\\n    #    listen       8000;\\n    #    listen       somename:8080;\\n    #    server_name  somename  alias  another.alias;\\n\\n    #    location / {\\n    #        root   html;\\n    #        index  index.html index.htm;\\n    #    }\\n    #}\\n\\n\\n    # HTTPS server\\n    #\\n    #server {\\n    #    listen       443 ssl;\\n    #    server_name  localhost;\\n\\n    #    ssl_certificate      cert.pem;\\n    #    ssl_certificate_key  cert.key;\\n\\n    #    ssl_session_cache    shared:SSL:1m;\\n    #    ssl_session_timeout  5m;\\n\\n    #    ssl_ciphers  HIGH:!aNULL:!MD5;\\n    #    ssl_prefer_server_ciphers  on;\\n\\n    #    location / {\\n    #        root   html;\\n    #        index  index.html index.htm;\\n    #    }\\n    #}\\n}\\n</code></pre>\\n<h3><a id=\\\"nginx_509\\\"></a>nginx启动</h3>\\n<pre><div class=\\\"hljs\\\"><code class=\\\"lang-sh\\\"><span class=\\\"hljs-built_in\\\">cd</span> /usr/<span class=\\\"hljs-built_in\\\">local</span>/nginx/sbin\\n./nginx\\n</code></div></pre>\\n<p>这时候我们就可以通过服务器ip地址:1111/nacos 来访问nacos集群了</p>\\n<p><img src=\\\"https://img-blog.csdnimg.cn/20201130205927229.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ0ODU5OA==,size_16,color_FFFFFF,t_70\\\" alt=\\\"在这里插入图片描述\\\" /></p>\\n<p>关于使用NACOS集群遇到问题 – CODE:503 MSG: SERVER IS STARTING NOW, PLEASE TRY AGAIN LATER!</p>\\n<p>这时又出现了问题……在服务提供者注册服务时会报错</p>\\n<pre><code class=\\\"lang-text\\\">2020-11-30 00:36:59.492 ERROR 13140 --- [  restartedMain] c.a.c.n.registry.NacosServiceRegistry    : nacos registry, nacos-payment-provider register failed...NacosRegistration{nacosDiscoveryProperties=NacosDiscoveryProperties{serverAddr=\'wsy.oopsw.top:1111\', endpoint=\'\', namespace=\'\', watchDelay=30000, logName=\'\', service=\'nacos-payment-provider\', weight=1.0, clusterName=\'DEFAULT\', namingLoadCacheAtStart=\'false\', metadata={preserved.register.source=SPRING_CLOUD}, registerEnabled=true, ip=\'10.175.6.100\', networkInterface=\'\', port=9002, secure=false, accessKey=\'\', secretKey=\'\'}},\\n\\njava.lang.IllegalStateException: failed to req API:/nacos/v1/ns/instance after all servers([wsy.oopsw.top:1111]) tried: failed to req API:wsy.oopsw.top:1111/nacos/v1/ns/instance. code:503 msg: server is DOWN now, please try again later!\\n\\tat com.alibaba.nacos.client.naming.net.NamingProxy.reqAPI(NamingProxy.java:464) ~[nacos-client-1.1.1.jar:na]\\n\\tat com.alibaba.nacos.client.naming.net.NamingProxy.reqAPI(NamingProxy.java:386) ~[nacos-client-1.1.1.jar:na]\\n\\tat com.alibaba.nacos.client.naming.net.NamingProxy.registerService(NamingProxy.java:188) ~[nacos-client-1.1.1.jar:na]\\n\\tat com.alibaba.nacos.client.naming.NacosNamingService.registerInstance(NacosNamingService.java:205) ~[nacos-client-1.1.1.jar:na]\\n\\tat com.alibaba.nacos.client.naming.NacosNamingService.registerInstance(NacosNamingService.java:184) ~[nacos-client-1.1.1.jar:na]\\n\\tat com.alibaba.cloud.nacos.registry.NacosServiceRegistry.register(NacosServiceRegistry.java:61) ~[spring-cloud-alibaba-nacos-discovery-2.1.0.RELEASE.jar:2.1.0.RELEASE]\\n\\tat org.springframework.cloud.client.serviceregistry.AbstractAutoServiceRegistration.register(AbstractAutoServiceRegistration.java:239) [spring-cloud-commons-2.2.1.RELEASE.jar:2.2.1.RELEASE]\\n\\tat com.alibaba.cloud.nacos.registry.NacosAutoServiceRegistration.register(NacosAutoServiceRegistration.java:74) [spring-cloud-alibaba-nacos-discovery-2.1.0.RELEASE.jar:2.1.0.RELEASE]\\n\\tat org.springframework.cloud.client.serviceregistry.AbstractAutoServiceRegistration.start(AbstractAutoServiceRegistration.java:138) [spring-cloud-commons-2.2.1.RELEASE.jar:2.2.1.RELEASE]\\n\\tat org.springframework.cloud.client.serviceregistry.AbstractAutoServiceRegistration.bind(AbstractAutoServiceRegistration.java:101) [spring-cloud-commons-2.2.1.RELEASE.jar:2.2.1.RELEASE]\\n\\tat org.springframework.cloud.client.serviceregistry.AbstractAutoServiceRegistration.onApplicationEvent(AbstractAutoServiceRegistration.java:88) [spring-cloud-commons-2.2.1.RELEASE.jar:2.2.1.RELEASE]\\n\\tat org.springframework.cloud.client.serviceregistry.AbstractAutoServiceRegistration.onApplicationEvent(AbstractAutoServiceRegistration.java:47) [spring-cloud-commons-2.2.1.RELEASE.jar:2.2.1.RELEASE]\\n\\tat org.springframework.context.event.SimpleApplicationEventMulticaster.doInvokeListener(SimpleApplicationEventMulticaster.java:172) [spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]\\n\\tat org.springframework.context.event.SimpleApplicationEventMulticaster.invokeListener(SimpleApplicationEventMulticaster.java:165) [spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]\\n\\tat org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:139) [spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]\\n\\tat org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:403) [spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]\\n\\tat org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:360) [spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]\\n\\tat org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.finishRefresh(ServletWebServerApplicationContext.java:165) [spring-boot-2.2.2.RELEASE.jar:2.2.2.RELEASE]\\n\\tat org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:553) [spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]\\n\\tat org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:141) [spring-boot-2.2.2.RELEASE.jar:2.2.2.RELEASE]\\n\\tat org.springframework.boot.SpringApplication.refresh(SpringApplication.java:747) [spring-boot-2.2.2.RELEASE.jar:2.2.2.RELEASE]\\n\\tat org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:397) [spring-boot-2.2.2.RELEASE.jar:2.2.2.RELEASE]\\n\\tat org.springframework.boot.SpringApplication.run(SpringApplication.java:315) [spring-boot-2.2.2.RELEASE.jar:2.2.2.RELEASE]\\n\\tat org.springframework.boot.SpringApplication.run(SpringApplication.java:1226) [spring-boot-2.2.2.RELEASE.jar:2.2.2.RELEASE]\\n\\tat org.springframework.boot.SpringApplication.run(SpringApplication.java:1215) [spring-boot-2.2.2.RELEASE.jar:2.2.2.RELEASE]\\n\\tat com.wsy.springcloud.AlibabaProviderApplication.main(AlibabaProviderApplication.java:15) [classes/:na]\\n\\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_73]\\n\\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_73]\\n\\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_73]\\n\\tat java.lang.reflect.Method.invoke(Method.java:497) ~[na:1.8.0_73]\\n\\tat org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49) [spring-boot-devtools-2.2.2.RELEASE.jar:2.2.2.RELEASE]\\n</code></pre>\\n<p>像阿里云、腾讯云这种云服务器, 会提供一个外网ip和内网ip, 访问外网ip时会指向对应的内网ip来访问到该服务器, 由于nacos集群内部是指定的使用网卡ip地址来进行通信,但是由于三台服务器各自的内网ip不在同一网段, 所以造成无法通信, 也会造成以下问题</p>\\n<p>注册服务:</p>\\n<pre><code class=\\\"lang-\\\">code:503 msg: server is STARTING now, please try again later!\\n</code></pre>\\n<p>naming-raft.log 日志:</p>\\n<pre><code class=\\\"lang-\\\">2019-05-15 00:02:00,000 WARN [IS LEADER] no leader is available now!\\n</code></pre>\\n<p>这时只要修改启动参数, 设置本机ip地址就可以了<br />\\n修改 nacos/bin/startup.sh 文件<br />\\n找到 JVM Configuration 这部分, 在集群参数里增加 -Dnacos.server.ip=xx</p>\\n<pre><div class=\\\"hljs\\\"><code class=\\\"lang-sh\\\"><span class=\\\"hljs-comment\\\">#===========================================================================================</span>\\n<span class=\\\"hljs-comment\\\"># JVM Configuration</span>\\n<span class=\\\"hljs-comment\\\">#===========================================================================================</span>\\n\\n<span class=\\\"hljs-comment\\\"># 单机模式对应的启动参数</span>\\n<span class=\\\"hljs-keyword\\\">if</span> [[ <span class=\\\"hljs-string\\\">\\\"<span class=\\\"hljs-variable\\\">${MODE}</span>\\\"</span> == <span class=\\\"hljs-string\\\">\\\"standalone\\\"</span> ]]; <span class=\\\"hljs-keyword\\\">then</span>\\n    JAVA_OPT=<span class=\\\"hljs-string\\\">\\\"<span class=\\\"hljs-variable\\\">${JAVA_OPT}</span> -Xms512m -Xmx512m -Xmn256m\\\"</span>\\n    JAVA_OPT=<span class=\\\"hljs-string\\\">\\\"<span class=\\\"hljs-variable\\\">${JAVA_OPT}</span> -Dnacos.standalone=true\\\"</span>\\n<span class=\\\"hljs-keyword\\\">else</span>\\n<span class=\\\"hljs-comment\\\"># 集群模式对应的启动参数</span>\\n    JAVA_OPT=<span class=\\\"hljs-string\\\">\\\"<span class=\\\"hljs-variable\\\">${JAVA_OPT}</span> -server -Xms2g -Xmx2g -Xmn1g -XX:MetaspaceSize=128m -XX:MaxMetaspaceSize=320m\\\"</span>\\n    JAVA_OPT=<span class=\\\"hljs-string\\\">\\\"<span class=\\\"hljs-variable\\\">${JAVA_OPT}</span> -XX:-OmitStackTraceInFastThrow -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=<span class=\\\"hljs-variable\\\">${BASE_DIR}</span>/logs/java_heapdump.hprof\\\"</span>\\n    JAVA_OPT=<span class=\\\"hljs-string\\\">\\\"<span class=\\\"hljs-variable\\\">${JAVA_OPT}</span> -XX:-UseLargePages\\\"</span>\\n    \\n    <span class=\\\"hljs-comment\\\"># *新增以下参数设置本机ip地址*</span>\\n    JAVA_OPT=<span class=\\\"hljs-string\\\">\\\"<span class=\\\"hljs-variable\\\">${JAVA_OPT}</span> -Dnacos.server.ip=本机ip\\\"</span>\\n\\n<span class=\\\"hljs-keyword\\\">fi</span>\\n\\n<span class=\\\"hljs-keyword\\\">if</span> [[ <span class=\\\"hljs-string\\\">\\\"<span class=\\\"hljs-variable\\\">${FUNCTION_MODE}</span>\\\"</span> == <span class=\\\"hljs-string\\\">\\\"config\\\"</span> ]]; <span class=\\\"hljs-keyword\\\">then</span>\\n    JAVA_OPT=<span class=\\\"hljs-string\\\">\\\"<span class=\\\"hljs-variable\\\">${JAVA_OPT}</span> -Dnacos.functionMode=config\\\"</span>\\n<span class=\\\"hljs-keyword\\\">elif</span> [[ <span class=\\\"hljs-string\\\">\\\"<span class=\\\"hljs-variable\\\">${FUNCTION_MODE}</span>\\\"</span> == <span class=\\\"hljs-string\\\">\\\"naming\\\"</span> ]]; <span class=\\\"hljs-keyword\\\">then</span>\\n    JAVA_OPT=<span class=\\\"hljs-string\\\">\\\"<span class=\\\"hljs-variable\\\">${JAVA_OPT}</span> -Dnacos.functionMode=naming\\\"</span>\\n<span class=\\\"hljs-keyword\\\">fi</span>\\n\\n</code></div></pre>\\n<p>参考博客：https://www.freesion.com/article/33101142210/</p>\\n<p>服务注册时报BadRequest400 问题暂时还未解决</p>\\n<pre><code class=\\\"lang-text\\\">com.alibaba.nacos.api.exception.NacosException: failed to req API:/nacos/v1/ns/instance after all servers([wsy.oopsw.top:1111]) tried: ErrCode:400, ErrMsg:&lt;html&gt;&lt;body&gt;&lt;h1&gt;Whitelabel Error Page&lt;/h1&gt;&lt;p&gt;This application has no explicit mapping for /error, so you are seeing this as a fallback.&lt;/p&gt;&lt;div id=\'created\'&gt;Mon Nov 30 01:33:45 CST 2020&lt;/div&gt;&lt;div&gt;There was an unexpected error (type=Bad Request, status=400).&lt;/div&gt;&lt;div&gt;receive invalid redirect request from peer 172.20.9.153&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;\\n</code></pre>\\n<p>#############################################################</p>\\n<p>问题已解决，是nacos版本的问题，据群里老哥解释说是nacos需要使用与之对应的SpringCloudAlibaba的版本，不然就会报错，我更换版本到1.3.2问题解决服务注册正常</p>\\n\",\"blogGoods\":0,\"blogId\":\"1333411378995605504\",\"blogImage\":\"http://808km.top/blog/img/img/default/1333411206555185152\",\"blogRead\":54,\"blogRemark\":\"nacos集群环境搭建\",\"blogTitle\":\"nacos集群环境搭建\",\"blogType\":20,\"createdTime\":1606745021000,\"typeName\":\"nacos\",\"updateTime\":1608654509000,\"version\":39},\"msg\":\"阅读成功\"}', '218.77.40.108', '2020-12-28 01:40:04', NULL);
INSERT INTO `bl_log` VALUES (2775, '阅读博客', '//blog/read/1322169187161767936', '[1322169187161767936]', 1, NULL, 'PUT', 20, '{\"code\":20000,\"data\":{\"blogCollection\":0,\"blogComment\":0,\"blogContent\":\"<h1><a id=\\\"Dubbo_0\\\"></a>Dubbo的超时问题</h1>\\n<p>Dubbo如果不设置timeout属性的话，默认会有一个1000ms的超时时间，当你超过这个值的时候dubbo就会抛出TimeOutException<br />\\n<img src=\\\"https://img-blog.csdnimg.cn/20201030210230916.png#pic_center\\\" alt=\\\"在这里插入图片描述\\\" /><br />\\n而我在Controller里使用了hystrix做了熔断保护</p>\\n<pre><div class=\\\"hljs\\\"><code class=\\\"lang-java\\\">    <span class=\\\"hljs-comment\\\">/**\\n     * 入库操作\\n     * <span class=\\\"hljs-doctag\\\">@param</span> purchaseId 采购单id\\n     * <span class=\\\"hljs-doctag\\\">@return</span> 统一返回类型\\n     */</span>\\n    <span class=\\\"hljs-meta\\\">@HystrixCommand</span>\\n    <span class=\\\"hljs-meta\\\">@PostMapping</span>(<span class=\\\"hljs-string\\\">\\\"doInventory/{purchaseId}\\\"</span>)\\n    <span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">public</span> AjaxResult <span class=\\\"hljs-title\\\">doInventory</span><span class=\\\"hljs-params\\\">(@PathVariable String purchaseId)</span> </span>{\\n        <span class=\\\"hljs-keyword\\\">return</span> AjaxResult.toAjax(<span class=\\\"hljs-keyword\\\">this</span>.purchaseService.doInventory(purchaseId, ShiroSecurityUtils.getCurrentSimpleUser()));\\n    }\\n</code></div></pre>\\n<p>其中熔断保护后执行的方法来自于Controller里集成的BaseController</p>\\n<pre><div class=\\\"hljs\\\"><code class=\\\"lang-java\\\"><span class=\\\"hljs-comment\\\">/**\\n * <span class=\\\"hljs-doctag\\\">@author</span> wsy\\n * <span class=\\\"hljs-doctag\\\">@date</span> 2020-10-29 9:33\\n * <span class=\\\"hljs-doctag\\\">@DefaultProperties</span> 配置熔断保护的方法\\n */</span>\\n<span class=\\\"hljs-meta\\\">@DefaultProperties</span>(defaultFallback = <span class=\\\"hljs-string\\\">\\\"fullBack\\\"</span>)\\n<span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-class\\\"><span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title\\\">BaseController</span> </span>{\\n    <span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">public</span> AjaxResult <span class=\\\"hljs-title\\\">fullBack</span><span class=\\\"hljs-params\\\">()</span> </span>{\\n        <span class=\\\"hljs-keyword\\\">return</span> AjaxResult.toAjax(-<span class=\\\"hljs-number\\\">1</span>);\\n    }\\n}\\n</code></div></pre>\\n<p>fullBack方法的返回值就是给我的统一返回类返回一个-1值<br />\\n我的统一返回类中会认为-1值是错误信息， 所以会返回操作失败</p>\\n<pre><div class=\\\"hljs\\\"><code class=\\\"lang-java\\\">    <span class=\\\"hljs-comment\\\">/**\\n     * 返回错误消息\\n     *\\n     * <span class=\\\"hljs-doctag\\\">@param</span> rows 返回行数\\n     * <span class=\\\"hljs-doctag\\\">@return</span> 添加修改删除转化信息\\n     */</span>\\n    <span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">static</span> AjaxResult <span class=\\\"hljs-title\\\">toAjax</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-keyword\\\">int</span> rows)</span> </span>{\\n        <span class=\\\"hljs-keyword\\\">return</span> rows &gt; <span class=\\\"hljs-number\\\">0</span> ? AjaxResult.success() : AjaxResult.fail();\\n    }\\n</code></div></pre>\\n<p>在我今天3个小时的一步步排查异常下终于找到了错误，就是Dubbo的超时机制，在我没有设置超时时间的情况下给我一直在抛异常，导致服务返回的code一直是操作失败</p>\\n<h1><a id=\\\"_47\\\"></a>优先级选择</h1>\\n<p>在dubbo中如果provider和consumer都配置了相同的一个属性，比如本文分析的timeout，其实是有一个优先级的，优先级：<br />\\n<strong>consumer方法配置 &gt; provider方法配置 &gt; consumer接口配置 &gt; provider接口配置 &gt; consumer全局配置 &gt; provider全局配置。</strong></p>\\n<p>参考博客：<a href=\\\"https://segmentfault.com/a/1190000018924018\\\" target=\\\"_blank\\\">https://segmentfault.com/a/1190000018924018</a></p>\\n\",\"blogGoods\":0,\"blogId\":\"1322169187161767936\",\"blogImage\":\"http://808km.top/blog/img/default.jpg\",\"blogRead\":39,\"blogTitle\":\"Dubbo超时问题\",\"blogType\":18,\"createdTime\":1604064673000,\"typeName\":\"dubbo\",\"updateTime\":1606994979000,\"version\":39},\"msg\":\"阅读成功\"}', '218.77.40.108', '2020-12-28 01:40:19', NULL);
INSERT INTO `bl_log` VALUES (2776, '查询时间轴', '//blog/getTimeLine', '[]', 1, NULL, 'GET', 7, '{\"code\":20000,\"data\":[{\"list\":[{\"blogId\":\"1333708609683533824\",\"blogMonth\":\"2020-12\",\"blogTitle\":\"shiro+redis整合实现session持久化登陆失败时也会生成session问题\",\"createdTime\":1606815886000}],\"month\":\"2020-12\"},{\"list\":[{\"blogId\":\"1333411378995605504\",\"blogMonth\":\"2020-11\",\"blogTitle\":\"nacos集群环境搭建\",\"createdTime\":1606745021000},{\"blogId\":\"1332742588649615360\",\"blogMonth\":\"2020-11\",\"blogTitle\":\"vue项目引入markdown\",\"createdTime\":1606585569000},{\"blogId\":\"1331436834413211648\",\"blogMonth\":\"2020-11\",\"blogTitle\":\"springboot 后端传给前端相差8小时\",\"createdTime\":1606274253000}],\"month\":\"2020-11\"},{\"list\":[{\"blogId\":\"1322169187161767936\",\"blogMonth\":\"2020-10\",\"blogTitle\":\"Dubbo超时问题\",\"createdTime\":1604064673000}],\"month\":\"2020-10\"},{\"list\":[{\"blogId\":\"1311375132718956544\",\"blogMonth\":\"2020-09\",\"blogTitle\":\"docker中使用fastdfs问题\",\"createdTime\":1601462370000},{\"blogId\":\"1305852969815642112\",\"blogMonth\":\"2020-09\",\"blogTitle\":\"dubbo-admin登录问题\",\"createdTime\":1600174584000}],\"month\":\"2020-09\"},{\"list\":[{\"blogId\":\"1294647161643978752\",\"blogMonth\":\"2020-08\",\"blogTitle\":\"shiroFilter踩坑\",\"createdTime\":1597474112000},{\"blogId\":\"1293808631053139968\",\"blogMonth\":\"2020-08\",\"blogTitle\":\"docker 安装 mysql5.7\",\"createdTime\":1597274190000}],\"month\":\"2020-08\"},{\"list\":[{\"blogId\":\"1293850784802377728\",\"blogMonth\":\"2020-07\",\"blogTitle\":\"mybatis <if>标签踩坑\",\"createdTime\":1594605840000}],\"month\":\"2020-07\"}],\"msg\":\"操作成功！\"}', '218.77.40.108', '2020-12-28 01:40:25', NULL);
INSERT INTO `bl_log` VALUES (2777, '阅读关于我的', '//about/read', '[]', 1, NULL, 'PUT', 28, '{\"code\":20000,\"data\":{\"aboutContent\":\"<h1><a id=\\\"_0\\\"></a>前言</h1>\\n<p>我是一名即将大三的在校大学生，自主学习的过程中跟随讲师开发了该个人博客“闲言博客”，这个博客功能简单，但是为我巩固了不少的技术知识，该网站为前后端分离项目，后端:<em><strong>springboot+mybatis</strong></em> 前端-前台：_<strong>vue+ and design</strong><em>前端-后台: <em><strong>vue+ element-ui</strong></em> 开发该项目花了我大概10来天时间，前台页面代码是我copy的讲师提供的静态页面（原谅我写的css自己都看不下去），后续想追加个</em><strong>redis</strong><em>写个缓存，以及加一个</em><strong>ElasticSearch</strong>_搜索引擎，加油吧！</p>\\n<h2><a id=\\\"_4\\\"></a>该博客使用到的技术栈：</h2>\\n<p>SpringBoot，Mybatis，Shiro，Maven，Vue，ElementUI，AntDesignVue，Flex布局，Linux，Nginx，Docker，FastDFS，MongoDB，SpringDataMongoDB<br />\\n该博客由我在腾讯课堂购买课程学习开发，网址：</p>\\n<p><a href=\\\"https://ke.qq.com/course/1129309\\\" target=\\\"_blank\\\">课程地址</a></p>\\n<hr />\\n<p>目前我正在修改该博客的小bug并且在集成更多的新功能，我希望能够使用这个博客项目去巩固我学习的新知识，也希望能有更多的人看到我写的这个项目。</p>\\n<h2><a id=\\\"_15\\\"></a>目前需要改进的地方：</h2>\\n<ol>\\n<li>使用elasticSearch 进行博客的检索</li>\\n<li>将首页的主图片修改为轮播图</li>\\n<li><s>注册时上传头像</s></li>\\n<li><s>将富文本编辑器改为Markdown编辑器</s></li>\\n<li><s>更新记录日志的方式</s></li>\\n<li><s>首页url的问题</s></li>\\n<li><s>数据库时间问题</s></li>\\n<li><s>前台md5加密改为后台加密后再匹配</s></li>\\n<li><s>推荐博客下的时间</s></li>\\n<li><s>登录注册页面的背景图片</s></li>\\n<li><s>登录注册页面的卡片问题</s></li>\\n<li>后台中写博客路由问题</li>\\n<li>后端登录中管理员和用户混淆不清关系</li>\\n<li><s>阅读博客时会更新version(乐观锁)这可能会导致在别人观看博客的时候导致博主无法更新博客影响博主体验</s></li>\\n<li>在进入下一个路由之后回到顶部</li>\\n<li>将分页功能改为加载更多</li>\\n</ol>\\n<p>暂时还需要学习一点其他的之后，等有时间的时候再来继续完善该博客。</p>\\n<h2><a id=\\\"_36\\\"></a>更新记录</h2>\\n<ul>\\n<li>\\n<p>2020-11-17 09:25 add:如果添加博客不上传封面将会设置一个默认封面图片</p>\\n</li>\\n<li>\\n<p>2020-11-18 21:48 update:将原本前端md5加密后再跟后端匹配改为后端进行加密后再匹配</p>\\n</li>\\n<li>\\n<p>2020-11-19 22:15 fix:将页面url后面会添加publicPath问题解决</p>\\n</li>\\n<li>\\n<p>2020-11-24 11:25 update:将前端静态资源使用cdn加速、日志原记录为controller层的所有方法切入改为Log注解处切入</p>\\n</li>\\n<li>\\n<p>2020-11-24 21:51 fix:修复推荐博客下的时间bug</p>\\n</li>\\n<li>\\n<p>2020-11-24 21:51 add:注册时添加上传头像功能</p>\\n</li>\\n<li>\\n<p>2020-11-25 11:46 fix:修复数据库时间问题，具体问题已发博客，<a href=\\\"http://oopsw.top:1001/info/1331436834413211648\\\" target=\\\"_blank\\\">点我查看</a></p>\\n</li>\\n<li>\\n<p>2020-11-27 23:47 fix:登录注册页面卡片超出页面没有显示滚动条、背景图片在页面放大时会出现多个背景图片</p>\\n</li>\\n<li>\\n<p>2020-11-29 00:51 update:将前后台的所有富文本编辑器更换为markdown编辑器，并用markdown的样式</p>\\n</li>\\n<li>\\n<p>2020-12-01 08:30 update:修改markdown代码块样式</p>\\n</li>\\n<li>\\n<p>2020-12-01 08:57 fix:手机访问登录注册页面时样式体验差</p>\\n</li>\\n<li>\\n<p>2020-12-03 22:18 update:更换markdown存储方式，从存储markdown源码改为存储HTML源码</p>\\n</li>\\n</ul>\\n\",\"aboutId\":\"5\",\"aboutRead\":178,\"aboutTitle\":\"关于我的 关于“闲言”\",\"createdTime\":1597816791000,\"enable\":1,\"updateTime\":1608856377000,\"version\":227},\"msg\":\"阅读成功\"}', '218.77.40.108', '2020-12-28 01:40:27', NULL);
INSERT INTO `bl_log` VALUES (2778, '查询时间轴', '//blog/getTimeLine', '[]', 1, NULL, 'GET', 7, '{\"code\":20000,\"data\":[{\"list\":[{\"blogId\":\"1333708609683533824\",\"blogMonth\":\"2020-12\",\"blogTitle\":\"shiro+redis整合实现session持久化登陆失败时也会生成session问题\",\"createdTime\":1606815886000}],\"month\":\"2020-12\"},{\"list\":[{\"blogId\":\"1333411378995605504\",\"blogMonth\":\"2020-11\",\"blogTitle\":\"nacos集群环境搭建\",\"createdTime\":1606745021000},{\"blogId\":\"1332742588649615360\",\"blogMonth\":\"2020-11\",\"blogTitle\":\"vue项目引入markdown\",\"createdTime\":1606585569000},{\"blogId\":\"1331436834413211648\",\"blogMonth\":\"2020-11\",\"blogTitle\":\"springboot 后端传给前端相差8小时\",\"createdTime\":1606274253000}],\"month\":\"2020-11\"},{\"list\":[{\"blogId\":\"1322169187161767936\",\"blogMonth\":\"2020-10\",\"blogTitle\":\"Dubbo超时问题\",\"createdTime\":1604064673000}],\"month\":\"2020-10\"},{\"list\":[{\"blogId\":\"1311375132718956544\",\"blogMonth\":\"2020-09\",\"blogTitle\":\"docker中使用fastdfs问题\",\"createdTime\":1601462370000},{\"blogId\":\"1305852969815642112\",\"blogMonth\":\"2020-09\",\"blogTitle\":\"dubbo-admin登录问题\",\"createdTime\":1600174584000}],\"month\":\"2020-09\"},{\"list\":[{\"blogId\":\"1294647161643978752\",\"blogMonth\":\"2020-08\",\"blogTitle\":\"shiroFilter踩坑\",\"createdTime\":1597474112000},{\"blogId\":\"1293808631053139968\",\"blogMonth\":\"2020-08\",\"blogTitle\":\"docker 安装 mysql5.7\",\"createdTime\":1597274190000}],\"month\":\"2020-08\"},{\"list\":[{\"blogId\":\"1293850784802377728\",\"blogMonth\":\"2020-07\",\"blogTitle\":\"mybatis <if>标签踩坑\",\"createdTime\":1594605840000}],\"month\":\"2020-07\"}],\"msg\":\"操作成功！\"}', '218.77.40.108', '2020-12-28 01:40:27', NULL);
INSERT INTO `bl_log` VALUES (2779, '阅读关于我的', '//about/read', '[]', 1, NULL, 'PUT', 34, '{\"code\":20000,\"data\":{\"aboutContent\":\"<h1><a id=\\\"_0\\\"></a>前言</h1>\\n<p>我是一名即将大三的在校大学生，自主学习的过程中跟随讲师开发了该个人博客“闲言博客”，这个博客功能简单，但是为我巩固了不少的技术知识，该网站为前后端分离项目，后端:<em><strong>springboot+mybatis</strong></em> 前端-前台：_<strong>vue+ and design</strong><em>前端-后台: <em><strong>vue+ element-ui</strong></em> 开发该项目花了我大概10来天时间，前台页面代码是我copy的讲师提供的静态页面（原谅我写的css自己都看不下去），后续想追加个</em><strong>redis</strong><em>写个缓存，以及加一个</em><strong>ElasticSearch</strong>_搜索引擎，加油吧！</p>\\n<h2><a id=\\\"_4\\\"></a>该博客使用到的技术栈：</h2>\\n<p>SpringBoot，Mybatis，Shiro，Maven，Vue，ElementUI，AntDesignVue，Flex布局，Linux，Nginx，Docker，FastDFS，MongoDB，SpringDataMongoDB<br />\\n该博客由我在腾讯课堂购买课程学习开发，网址：</p>\\n<p><a href=\\\"https://ke.qq.com/course/1129309\\\" target=\\\"_blank\\\">课程地址</a></p>\\n<hr />\\n<p>目前我正在修改该博客的小bug并且在集成更多的新功能，我希望能够使用这个博客项目去巩固我学习的新知识，也希望能有更多的人看到我写的这个项目。</p>\\n<h2><a id=\\\"_15\\\"></a>目前需要改进的地方：</h2>\\n<ol>\\n<li>使用elasticSearch 进行博客的检索</li>\\n<li>将首页的主图片修改为轮播图</li>\\n<li><s>注册时上传头像</s></li>\\n<li><s>将富文本编辑器改为Markdown编辑器</s></li>\\n<li><s>更新记录日志的方式</s></li>\\n<li><s>首页url的问题</s></li>\\n<li><s>数据库时间问题</s></li>\\n<li><s>前台md5加密改为后台加密后再匹配</s></li>\\n<li><s>推荐博客下的时间</s></li>\\n<li><s>登录注册页面的背景图片</s></li>\\n<li><s>登录注册页面的卡片问题</s></li>\\n<li>后台中写博客路由问题</li>\\n<li>后端登录中管理员和用户混淆不清关系</li>\\n<li><s>阅读博客时会更新version(乐观锁)这可能会导致在别人观看博客的时候导致博主无法更新博客影响博主体验</s></li>\\n<li>在进入下一个路由之后回到顶部</li>\\n<li>将分页功能改为加载更多</li>\\n</ol>\\n<p>暂时还需要学习一点其他的之后，等有时间的时候再来继续完善该博客。</p>\\n<h2><a id=\\\"_36\\\"></a>更新记录</h2>\\n<ul>\\n<li>\\n<p>2020-11-17 09:25 add:如果添加博客不上传封面将会设置一个默认封面图片</p>\\n</li>\\n<li>\\n<p>2020-11-18 21:48 update:将原本前端md5加密后再跟后端匹配改为后端进行加密后再匹配</p>\\n</li>\\n<li>\\n<p>2020-11-19 22:15 fix:将页面url后面会添加publicPath问题解决</p>\\n</li>\\n<li>\\n<p>2020-11-24 11:25 update:将前端静态资源使用cdn加速、日志原记录为controller层的所有方法切入改为Log注解处切入</p>\\n</li>\\n<li>\\n<p>2020-11-24 21:51 fix:修复推荐博客下的时间bug</p>\\n</li>\\n<li>\\n<p>2020-11-24 21:51 add:注册时添加上传头像功能</p>\\n</li>\\n<li>\\n<p>2020-11-25 11:46 fix:修复数据库时间问题，具体问题已发博客，<a href=\\\"http://oopsw.top:1001/info/1331436834413211648\\\" target=\\\"_blank\\\">点我查看</a></p>\\n</li>\\n<li>\\n<p>2020-11-27 23:47 fix:登录注册页面卡片超出页面没有显示滚动条、背景图片在页面放大时会出现多个背景图片</p>\\n</li>\\n<li>\\n<p>2020-11-29 00:51 update:将前后台的所有富文本编辑器更换为markdown编辑器，并用markdown的样式</p>\\n</li>\\n<li>\\n<p>2020-12-01 08:30 update:修改markdown代码块样式</p>\\n</li>\\n<li>\\n<p>2020-12-01 08:57 fix:手机访问登录注册页面时样式体验差</p>\\n</li>\\n<li>\\n<p>2020-12-03 22:18 update:更换markdown存储方式，从存储markdown源码改为存储HTML源码</p>\\n</li>\\n</ul>\\n\",\"aboutId\":\"5\",\"aboutRead\":179,\"aboutTitle\":\"关于我的 关于“闲言”\",\"createdTime\":1597816791000,\"enable\":1,\"updateTime\":1609090826000,\"version\":228},\"msg\":\"阅读成功\"}', '218.77.40.108', '2020-12-28 01:40:30', NULL);
INSERT INTO `bl_log` VALUES (2780, '查询时间轴', '//blog/getTimeLine', '[]', 1, NULL, 'GET', 7, '{\"code\":20000,\"data\":[{\"list\":[{\"blogId\":\"1333708609683533824\",\"blogMonth\":\"2020-12\",\"blogTitle\":\"shiro+redis整合实现session持久化登陆失败时也会生成session问题\",\"createdTime\":1606815886000}],\"month\":\"2020-12\"},{\"list\":[{\"blogId\":\"1333411378995605504\",\"blogMonth\":\"2020-11\",\"blogTitle\":\"nacos集群环境搭建\",\"createdTime\":1606745021000},{\"blogId\":\"1332742588649615360\",\"blogMonth\":\"2020-11\",\"blogTitle\":\"vue项目引入markdown\",\"createdTime\":1606585569000},{\"blogId\":\"1331436834413211648\",\"blogMonth\":\"2020-11\",\"blogTitle\":\"springboot 后端传给前端相差8小时\",\"createdTime\":1606274253000}],\"month\":\"2020-11\"},{\"list\":[{\"blogId\":\"1322169187161767936\",\"blogMonth\":\"2020-10\",\"blogTitle\":\"Dubbo超时问题\",\"createdTime\":1604064673000}],\"month\":\"2020-10\"},{\"list\":[{\"blogId\":\"1311375132718956544\",\"blogMonth\":\"2020-09\",\"blogTitle\":\"docker中使用fastdfs问题\",\"createdTime\":1601462370000},{\"blogId\":\"1305852969815642112\",\"blogMonth\":\"2020-09\",\"blogTitle\":\"dubbo-admin登录问题\",\"createdTime\":1600174584000}],\"month\":\"2020-09\"},{\"list\":[{\"blogId\":\"1294647161643978752\",\"blogMonth\":\"2020-08\",\"blogTitle\":\"shiroFilter踩坑\",\"createdTime\":1597474112000},{\"blogId\":\"1293808631053139968\",\"blogMonth\":\"2020-08\",\"blogTitle\":\"docker 安装 mysql5.7\",\"createdTime\":1597274190000}],\"month\":\"2020-08\"},{\"list\":[{\"blogId\":\"1293850784802377728\",\"blogMonth\":\"2020-07\",\"blogTitle\":\"mybatis <if>标签踩坑\",\"createdTime\":1594605840000}],\"month\":\"2020-07\"}],\"msg\":\"操作成功！\"}', '218.77.40.108', '2020-12-28 01:40:42', NULL);
INSERT INTO `bl_log` VALUES (2781, '阅读博客', '//blog/read/1331436834413211648', '[1331436834413211648]', 1, NULL, 'PUT', 146, '{\"code\":20000,\"data\":{\"blogCollection\":0,\"blogComment\":0,\"blogContent\":\"<p>在开发中日期最常打交道的东西之一，但是日期又会存在各式各样的格式，常见的情形就是，从数据库取出的日期往往都是时间戳（毫秒数）的形式，这个一般情况下是前端不想要的结果，需要进行处理，那在springboot中比较简单：<br />\\n因为后端传给前端时默认使用jackson转换格式所以我们可以</p>\\n<ol>\\n<li>在application.yml中设置</li>\\n</ol>\\n<pre><div class=\\\"hljs\\\"><code class=\\\"lang-yml\\\"><span class=\\\"hljs-attr\\\">spring:</span>\\n<span class=\\\"hljs-attr\\\">  jackson:</span>\\n<span class=\\\"hljs-attr\\\">    date-format:</span> <span class=\\\"hljs-string\\\">yyyy-MM-dd</span> <span class=\\\"hljs-attr\\\">HH:mm:ss</span>\\n<span class=\\\"hljs-attr\\\">    time-zone:</span> <span class=\\\"hljs-string\\\">GMT+8</span>\\n</code></div></pre>\\n<ol start=\\\"2\\\">\\n<li>在pojo对象上添加@JsonFormat注解</li>\\n</ol>\\n<pre><div class=\\\"hljs\\\"><code class=\\\"lang-java\\\">    <span class=\\\"hljs-meta\\\">@JsonFormat</span>(pattern = <span class=\\\"hljs-string\\\">\\\"yyyy-MM-dd HH:mm:ss\\\"</span>, timezone = <span class=\\\"hljs-string\\\">\\\"GMT+8\\\"</span>)\\n    <span class=\\\"hljs-keyword\\\">private</span> Date createdTime;\\n</code></div></pre>\\n<p>但是我在尝试了这两个方法以及相类似的方法，但是都无效，要么就是格式化无效，直接返回的时间戳，要么就是时间还是相差8个小时，但是格式化有效。</p>\\n<p>这时我看到了另外一篇不一样的博客，随后明白了为什么我的配置没有用，原来是因为我添加拦截器时写的配置类的问题。<br />\\n以下代码是我更改之前的配置类</p>\\n<pre><div class=\\\"hljs\\\"><code class=\\\"lang-java\\\"><span class=\\\"hljs-keyword\\\">package</span> com.wsy.blog.config;\\n\\n<span class=\\\"hljs-keyword\\\">import</span> com.fasterxml.jackson.databind.DeserializationFeature;\\n<span class=\\\"hljs-keyword\\\">import</span> com.fasterxml.jackson.databind.ObjectMapper;\\n<span class=\\\"hljs-keyword\\\">import</span> com.wsy.blog.interceptor.LoginInterceptor;\\n<span class=\\\"hljs-keyword\\\">import</span> org.springframework.context.annotation.Bean;\\n<span class=\\\"hljs-keyword\\\">import</span> org.springframework.context.annotation.Configuration;\\n<span class=\\\"hljs-keyword\\\">import</span> org.springframework.http.converter.HttpMessageConverter;\\n<span class=\\\"hljs-keyword\\\">import</span> org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;\\n<span class=\\\"hljs-keyword\\\">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistry;\\n<span class=\\\"hljs-keyword\\\">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport;\\n\\n<span class=\\\"hljs-keyword\\\">import</span> java.text.SimpleDateFormat;\\n<span class=\\\"hljs-keyword\\\">import</span> java.util.List;\\n\\n<span class=\\\"hljs-comment\\\">/**\\n * <span class=\\\"hljs-doctag\\\">@Author</span>: wsy\\n * <span class=\\\"hljs-doctag\\\">@Date</span>: 2020/8/10 11:34\\n */</span>\\n<span class=\\\"hljs-meta\\\">@Configuration</span>\\n<span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-class\\\"><span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title\\\">InterceptorConfig</span> <span class=\\\"hljs-keyword\\\">extends</span> <span class=\\\"hljs-title\\\">WebMvcConfigurationSupport</span> </span>{\\n\\n    <span class=\\\"hljs-meta\\\">@Bean</span>\\n    <span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">public</span> LoginInterceptor <span class=\\\"hljs-title\\\">getLoginInterceptor</span><span class=\\\"hljs-params\\\">()</span> </span>{\\n        <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-keyword\\\">new</span> LoginInterceptor();\\n    }\\n\\n    <span class=\\\"hljs-comment\\\">/**\\n     * 添加拦截器\\n     * <span class=\\\"hljs-doctag\\\">@param</span> registry  拦截器注册\\n     */</span>\\n    <span class=\\\"hljs-meta\\\">@Override</span>\\n    <span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">protected</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title\\\">addInterceptors</span><span class=\\\"hljs-params\\\">(InterceptorRegistry registry)</span> </span>{\\n        <span class=\\\"hljs-comment\\\">// TODO Auto-generated method stub</span>\\n        registry.addInterceptor(getLoginInterceptor()).addPathPatterns(<span class=\\\"hljs-string\\\">\\\"/**\\\"</span>)\\n                .excludePathPatterns(<span class=\\\"hljs-string\\\">\\\"/*/login\\\"</span>);;\\n        <span class=\\\"hljs-keyword\\\">super</span>.addInterceptors(registry);\\n    }\\n}\\n</code></div></pre>\\n<p>这里大家注意，看看自己的代码有没有因为添加拦截器而创建了一个配置类，该类继承了<code>WebMvcConfigurationSupport</code>，就是他！以前是用 <code>WebMvcConfigurerAdapter</code> ，springboot 2.0 建议使用 <code>WebMvcConfigurationSupport</code> 。但是在添加拦截器并继承 <code>WebMvcConfigurationSupport</code> 后会覆盖<code>@EnableAutoConfiguration</code>关于<code>WebMvcAutoConfiguration</code>的配置！从而导致所有的Date返回都变成时间戳！<br />\\n可以采用另外一种方式，在你继承<code>WebMvcConfigurationSupport</code>的子类中添加日期转换的bean<br />\\n以下是我更改后的代码</p>\\n<pre><div class=\\\"hljs\\\"><code class=\\\"lang-java\\\"><span class=\\\"hljs-keyword\\\">package</span> com.wsy.blog.config;\\n\\n<span class=\\\"hljs-keyword\\\">import</span> com.fasterxml.jackson.databind.DeserializationFeature;\\n<span class=\\\"hljs-keyword\\\">import</span> com.fasterxml.jackson.databind.ObjectMapper;\\n<span class=\\\"hljs-keyword\\\">import</span> com.wsy.blog.interceptor.LoginInterceptor;\\n<span class=\\\"hljs-keyword\\\">import</span> org.springframework.context.annotation.Bean;\\n<span class=\\\"hljs-keyword\\\">import</span> org.springframework.context.annotation.Configuration;\\n<span class=\\\"hljs-keyword\\\">import</span> org.springframework.http.converter.HttpMessageConverter;\\n<span class=\\\"hljs-keyword\\\">import</span> org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;\\n<span class=\\\"hljs-keyword\\\">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistry;\\n<span class=\\\"hljs-keyword\\\">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport;\\n\\n<span class=\\\"hljs-keyword\\\">import</span> java.text.SimpleDateFormat;\\n<span class=\\\"hljs-keyword\\\">import</span> java.util.List;\\n\\n<span class=\\\"hljs-comment\\\">/**\\n * <span class=\\\"hljs-doctag\\\">@Author</span>: wsy\\n * <span class=\\\"hljs-doctag\\\">@Date</span>: 2020/8/10 11:34\\n */</span>\\n<span class=\\\"hljs-meta\\\">@Configuration</span>\\n<span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-class\\\"><span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title\\\">InterceptorConfig</span> <span class=\\\"hljs-keyword\\\">extends</span> <span class=\\\"hljs-title\\\">WebMvcConfigurationSupport</span> </span>{\\n\\n    <span class=\\\"hljs-meta\\\">@Bean</span>\\n    <span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">public</span> LoginInterceptor <span class=\\\"hljs-title\\\">getLoginInterceptor</span><span class=\\\"hljs-params\\\">()</span> </span>{\\n        <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-keyword\\\">new</span> LoginInterceptor();\\n    }\\n\\n    <span class=\\\"hljs-comment\\\">/**\\n     * 定义时间格式转换器\\n     * <span class=\\\"hljs-doctag\\\">@return</span>  MappingJackson2HttpMessageConverter\\n     */</span>\\n    <span class=\\\"hljs-meta\\\">@Bean</span>\\n    <span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">public</span> MappingJackson2HttpMessageConverter <span class=\\\"hljs-title\\\">jackson2HttpMessageConverter</span><span class=\\\"hljs-params\\\">()</span> </span>{\\n        MappingJackson2HttpMessageConverter converter = <span class=\\\"hljs-keyword\\\">new</span> MappingJackson2HttpMessageConverter();\\n        ObjectMapper mapper = <span class=\\\"hljs-keyword\\\">new</span> ObjectMapper();\\n        mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, <span class=\\\"hljs-keyword\\\">false</span>);\\n        mapper.setDateFormat(<span class=\\\"hljs-keyword\\\">new</span> SimpleDateFormat(<span class=\\\"hljs-string\\\">\\\"yyyy-MM-dd HH:mm:ss\\\"</span>));\\n        converter.setObjectMapper(mapper);\\n        <span class=\\\"hljs-keyword\\\">return</span> converter;\\n    }\\n\\n    <span class=\\\"hljs-comment\\\">/**\\n     * 添加转换器\\n     * <span class=\\\"hljs-doctag\\\">@param</span> converters    converters\\n     */</span>\\n    <span class=\\\"hljs-meta\\\">@Override</span>\\n    <span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title\\\">configureMessageConverters</span><span class=\\\"hljs-params\\\">(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters)</span> </span>{\\n        <span class=\\\"hljs-comment\\\">//将我们定义的时间格式转换器添加到转换器列表中,</span>\\n        <span class=\\\"hljs-comment\\\">//这样jackson格式化时候但凡遇到Date类型就会转换成我们定义的格式</span>\\n        converters.add(jackson2HttpMessageConverter());\\n    }\\n\\n    <span class=\\\"hljs-comment\\\">/**\\n     * 添加拦截器\\n     * <span class=\\\"hljs-doctag\\\">@param</span> registry  拦截器注册\\n     */</span>\\n    <span class=\\\"hljs-meta\\\">@Override</span>\\n    <span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">protected</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title\\\">addInterceptors</span><span class=\\\"hljs-params\\\">(InterceptorRegistry registry)</span> </span>{\\n        <span class=\\\"hljs-comment\\\">// TODO Auto-generated method stub</span>\\n        registry.addInterceptor(getLoginInterceptor()).addPathPatterns(<span class=\\\"hljs-string\\\">\\\"/**\\\"</span>)\\n                .excludePathPatterns(<span class=\\\"hljs-string\\\">\\\"/*/login\\\"</span>);;\\n        <span class=\\\"hljs-keyword\\\">super</span>.addInterceptors(registry);\\n    }\\n}\\n</code></div></pre>\\n<p>感谢博主的分享经验<br />\\n参考博客：<a href=\\\"https://blog.csdn.net/qq_34975710/article/details/84872489\\\" target=\\\"_blank\\\">https://blog.csdn.net/qq_34975710/article/details/84872489</a></p>\\n\",\"blogGoods\":1,\"blogId\":\"1331436834413211648\",\"blogImage\":\"http://808km.top/blog/img/default.jpg\",\"blogRead\":73,\"blogTitle\":\"springboot 后端传给前端相差8小时\",\"blogType\":9,\"createdTime\":1606274253000,\"typeName\":\"Springboot\",\"updateTime\":1608171856000,\"version\":37},\"msg\":\"阅读成功\"}', '119.123.120.156', '2020-12-29 15:40:43', NULL);
INSERT INTO `bl_log` VALUES (2782, '查询时间轴', '//blog/getTimeLine', '[]', 1, NULL, 'GET', 6, '{\"code\":20000,\"data\":[{\"list\":[{\"blogId\":\"1333708609683533824\",\"blogMonth\":\"2020-12\",\"blogTitle\":\"shiro+redis整合实现session持久化登陆失败时也会生成session问题\",\"createdTime\":1606815886000}],\"month\":\"2020-12\"},{\"list\":[{\"blogId\":\"1333411378995605504\",\"blogMonth\":\"2020-11\",\"blogTitle\":\"nacos集群环境搭建\",\"createdTime\":1606745021000},{\"blogId\":\"1332742588649615360\",\"blogMonth\":\"2020-11\",\"blogTitle\":\"vue项目引入markdown\",\"createdTime\":1606585569000},{\"blogId\":\"1331436834413211648\",\"blogMonth\":\"2020-11\",\"blogTitle\":\"springboot 后端传给前端相差8小时\",\"createdTime\":1606274253000}],\"month\":\"2020-11\"},{\"list\":[{\"blogId\":\"1322169187161767936\",\"blogMonth\":\"2020-10\",\"blogTitle\":\"Dubbo超时问题\",\"createdTime\":1604064673000}],\"month\":\"2020-10\"},{\"list\":[{\"blogId\":\"1311375132718956544\",\"blogMonth\":\"2020-09\",\"blogTitle\":\"docker中使用fastdfs问题\",\"createdTime\":1601462370000},{\"blogId\":\"1305852969815642112\",\"blogMonth\":\"2020-09\",\"blogTitle\":\"dubbo-admin登录问题\",\"createdTime\":1600174584000}],\"month\":\"2020-09\"},{\"list\":[{\"blogId\":\"1294647161643978752\",\"blogMonth\":\"2020-08\",\"blogTitle\":\"shiroFilter踩坑\",\"createdTime\":1597474112000},{\"blogId\":\"1293808631053139968\",\"blogMonth\":\"2020-08\",\"blogTitle\":\"docker 安装 mysql5.7\",\"createdTime\":1597274190000}],\"month\":\"2020-08\"},{\"list\":[{\"blogId\":\"1293850784802377728\",\"blogMonth\":\"2020-07\",\"blogTitle\":\"mybatis <if>标签踩坑\",\"createdTime\":1594605840000}],\"month\":\"2020-07\"}],\"msg\":\"操作成功！\"}', '119.123.120.156', '2020-12-29 15:41:31', NULL);
INSERT INTO `bl_log` VALUES (2783, '阅读关于我的', '//about/read', '[]', 1, NULL, 'PUT', 18, '{\"code\":20000,\"data\":{\"aboutContent\":\"<h1><a id=\\\"_0\\\"></a>前言</h1>\\n<p>我是一名即将大三的在校大学生，自主学习的过程中跟随讲师开发了该个人博客“闲言博客”，这个博客功能简单，但是为我巩固了不少的技术知识，该网站为前后端分离项目，后端:<em><strong>springboot+mybatis</strong></em> 前端-前台：_<strong>vue+ and design</strong><em>前端-后台: <em><strong>vue+ element-ui</strong></em> 开发该项目花了我大概10来天时间，前台页面代码是我copy的讲师提供的静态页面（原谅我写的css自己都看不下去），后续想追加个</em><strong>redis</strong><em>写个缓存，以及加一个</em><strong>ElasticSearch</strong>_搜索引擎，加油吧！</p>\\n<h2><a id=\\\"_4\\\"></a>该博客使用到的技术栈：</h2>\\n<p>SpringBoot，Mybatis，Shiro，Maven，Vue，ElementUI，AntDesignVue，Flex布局，Linux，Nginx，Docker，FastDFS，MongoDB，SpringDataMongoDB<br />\\n该博客由我在腾讯课堂购买课程学习开发，网址：</p>\\n<p><a href=\\\"https://ke.qq.com/course/1129309\\\" target=\\\"_blank\\\">课程地址</a></p>\\n<hr />\\n<p>目前我正在修改该博客的小bug并且在集成更多的新功能，我希望能够使用这个博客项目去巩固我学习的新知识，也希望能有更多的人看到我写的这个项目。</p>\\n<h2><a id=\\\"_15\\\"></a>目前需要改进的地方：</h2>\\n<ol>\\n<li>使用elasticSearch 进行博客的检索</li>\\n<li>将首页的主图片修改为轮播图</li>\\n<li><s>注册时上传头像</s></li>\\n<li><s>将富文本编辑器改为Markdown编辑器</s></li>\\n<li><s>更新记录日志的方式</s></li>\\n<li><s>首页url的问题</s></li>\\n<li><s>数据库时间问题</s></li>\\n<li><s>前台md5加密改为后台加密后再匹配</s></li>\\n<li><s>推荐博客下的时间</s></li>\\n<li><s>登录注册页面的背景图片</s></li>\\n<li><s>登录注册页面的卡片问题</s></li>\\n<li>后台中写博客路由问题</li>\\n<li>后端登录中管理员和用户混淆不清关系</li>\\n<li><s>阅读博客时会更新version(乐观锁)这可能会导致在别人观看博客的时候导致博主无法更新博客影响博主体验</s></li>\\n<li>在进入下一个路由之后回到顶部</li>\\n<li>将分页功能改为加载更多</li>\\n</ol>\\n<p>暂时还需要学习一点其他的之后，等有时间的时候再来继续完善该博客。</p>\\n<h2><a id=\\\"_36\\\"></a>更新记录</h2>\\n<ul>\\n<li>\\n<p>2020-11-17 09:25 add:如果添加博客不上传封面将会设置一个默认封面图片</p>\\n</li>\\n<li>\\n<p>2020-11-18 21:48 update:将原本前端md5加密后再跟后端匹配改为后端进行加密后再匹配</p>\\n</li>\\n<li>\\n<p>2020-11-19 22:15 fix:将页面url后面会添加publicPath问题解决</p>\\n</li>\\n<li>\\n<p>2020-11-24 11:25 update:将前端静态资源使用cdn加速、日志原记录为controller层的所有方法切入改为Log注解处切入</p>\\n</li>\\n<li>\\n<p>2020-11-24 21:51 fix:修复推荐博客下的时间bug</p>\\n</li>\\n<li>\\n<p>2020-11-24 21:51 add:注册时添加上传头像功能</p>\\n</li>\\n<li>\\n<p>2020-11-25 11:46 fix:修复数据库时间问题，具体问题已发博客，<a href=\\\"http://oopsw.top:1001/info/1331436834413211648\\\" target=\\\"_blank\\\">点我查看</a></p>\\n</li>\\n<li>\\n<p>2020-11-27 23:47 fix:登录注册页面卡片超出页面没有显示滚动条、背景图片在页面放大时会出现多个背景图片</p>\\n</li>\\n<li>\\n<p>2020-11-29 00:51 update:将前后台的所有富文本编辑器更换为markdown编辑器，并用markdown的样式</p>\\n</li>\\n<li>\\n<p>2020-12-01 08:30 update:修改markdown代码块样式</p>\\n</li>\\n<li>\\n<p>2020-12-01 08:57 fix:手机访问登录注册页面时样式体验差</p>\\n</li>\\n<li>\\n<p>2020-12-03 22:18 update:更换markdown存储方式，从存储markdown源码改为存储HTML源码</p>\\n</li>\\n</ul>\\n\",\"aboutId\":\"5\",\"aboutRead\":180,\"aboutTitle\":\"关于我的 关于“闲言”\",\"createdTime\":1597816791000,\"enable\":1,\"updateTime\":1609090829000,\"version\":229},\"msg\":\"阅读成功\"}', '119.123.120.156', '2020-12-29 15:41:33', NULL);
INSERT INTO `bl_log` VALUES (2784, '阅读博客', '//blog/read/1333708609683533824', '[1333708609683533824]', 1, NULL, 'PUT', 25, '{\"code\":20000,\"data\":{\"blogCollection\":1,\"blogComment\":0,\"blogContent\":\"<h1><a id=\\\"_0\\\"></a>前言</h1>\\n<p>今天在给博客更新，将session存到redis中持久化存储，正常操作是没问题的，但是后来尝试发现，在我输入的密码是错误的时候，他也创建了session，经过我的一番从尾到头的debug。。。。<br />\\n复杂的debug过程就不贴出来了，放出问题的根源<br />\\n在登陆时，会访问到我用来记录日志的切面,而我的记录日志方法中有一个需要获取到当前登录的用户的信息，来完善日志的字段</p>\\n<blockquote>\\n<p><img src=\\\"http://808km.top/blog/img/img/blogImg/1333703986787631104\\\" alt=\\\"image.png\\\" /><br />\\n以下是工具类中的原方法：<br />\\n<img src=\\\"http://808km.top/blog/img/img/blogImg/1333704236625543168\\\" alt=\\\"image.png\\\" /><br />\\n以下是修改后的方法<br />\\n<img src=\\\"http://808km.top/blog/img/img/blogImg/1333704399599419392\\\" alt=\\\"image.png\\\" /><br />\\n这就是问题的根源，因为在我登录的时候，要记录日志，然后去调用工具类，工具类去获取session，如果没有getSession(false)的话，就会判断session是否存在，如果不存在的话就会自动创建session，这就是为什么明明密码错了还会创建session的原因</p>\\n</blockquote>\\n\",\"blogGoods\":1,\"blogId\":\"1333708609683533824\",\"blogImage\":\"http://808km.top/blog/img/default.jpg\",\"blogRead\":44,\"blogRemark\":\"shiro+redis整合实现session持久化登陆失败时也会生成session问题\",\"blogTitle\":\"shiro+redis整合实现session持久化登陆失败时也会生成session问题\",\"blogType\":6,\"createdTime\":1606815886000,\"typeName\":\"Java\",\"updateTime\":1609090798000,\"version\":3},\"msg\":\"阅读成功\"}', '218.77.40.122', '2021-01-02 09:37:28', NULL);
INSERT INTO `bl_log` VALUES (2785, '阅读博客', '//blog/read/1331436834413211648', '[1331436834413211648]', 1, NULL, 'PUT', 156, '{\"code\":20000,\"data\":{\"blogCollection\":0,\"blogComment\":0,\"blogContent\":\"<p>在开发中日期最常打交道的东西之一，但是日期又会存在各式各样的格式，常见的情形就是，从数据库取出的日期往往都是时间戳（毫秒数）的形式，这个一般情况下是前端不想要的结果，需要进行处理，那在springboot中比较简单：<br />\\n因为后端传给前端时默认使用jackson转换格式所以我们可以</p>\\n<ol>\\n<li>在application.yml中设置</li>\\n</ol>\\n<pre><div class=\\\"hljs\\\"><code class=\\\"lang-yml\\\"><span class=\\\"hljs-attr\\\">spring:</span>\\n<span class=\\\"hljs-attr\\\">  jackson:</span>\\n<span class=\\\"hljs-attr\\\">    date-format:</span> <span class=\\\"hljs-string\\\">yyyy-MM-dd</span> <span class=\\\"hljs-attr\\\">HH:mm:ss</span>\\n<span class=\\\"hljs-attr\\\">    time-zone:</span> <span class=\\\"hljs-string\\\">GMT+8</span>\\n</code></div></pre>\\n<ol start=\\\"2\\\">\\n<li>在pojo对象上添加@JsonFormat注解</li>\\n</ol>\\n<pre><div class=\\\"hljs\\\"><code class=\\\"lang-java\\\">    <span class=\\\"hljs-meta\\\">@JsonFormat</span>(pattern = <span class=\\\"hljs-string\\\">\\\"yyyy-MM-dd HH:mm:ss\\\"</span>, timezone = <span class=\\\"hljs-string\\\">\\\"GMT+8\\\"</span>)\\n    <span class=\\\"hljs-keyword\\\">private</span> Date createdTime;\\n</code></div></pre>\\n<p>但是我在尝试了这两个方法以及相类似的方法，但是都无效，要么就是格式化无效，直接返回的时间戳，要么就是时间还是相差8个小时，但是格式化有效。</p>\\n<p>这时我看到了另外一篇不一样的博客，随后明白了为什么我的配置没有用，原来是因为我添加拦截器时写的配置类的问题。<br />\\n以下代码是我更改之前的配置类</p>\\n<pre><div class=\\\"hljs\\\"><code class=\\\"lang-java\\\"><span class=\\\"hljs-keyword\\\">package</span> com.wsy.blog.config;\\n\\n<span class=\\\"hljs-keyword\\\">import</span> com.fasterxml.jackson.databind.DeserializationFeature;\\n<span class=\\\"hljs-keyword\\\">import</span> com.fasterxml.jackson.databind.ObjectMapper;\\n<span class=\\\"hljs-keyword\\\">import</span> com.wsy.blog.interceptor.LoginInterceptor;\\n<span class=\\\"hljs-keyword\\\">import</span> org.springframework.context.annotation.Bean;\\n<span class=\\\"hljs-keyword\\\">import</span> org.springframework.context.annotation.Configuration;\\n<span class=\\\"hljs-keyword\\\">import</span> org.springframework.http.converter.HttpMessageConverter;\\n<span class=\\\"hljs-keyword\\\">import</span> org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;\\n<span class=\\\"hljs-keyword\\\">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistry;\\n<span class=\\\"hljs-keyword\\\">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport;\\n\\n<span class=\\\"hljs-keyword\\\">import</span> java.text.SimpleDateFormat;\\n<span class=\\\"hljs-keyword\\\">import</span> java.util.List;\\n\\n<span class=\\\"hljs-comment\\\">/**\\n * <span class=\\\"hljs-doctag\\\">@Author</span>: wsy\\n * <span class=\\\"hljs-doctag\\\">@Date</span>: 2020/8/10 11:34\\n */</span>\\n<span class=\\\"hljs-meta\\\">@Configuration</span>\\n<span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-class\\\"><span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title\\\">InterceptorConfig</span> <span class=\\\"hljs-keyword\\\">extends</span> <span class=\\\"hljs-title\\\">WebMvcConfigurationSupport</span> </span>{\\n\\n    <span class=\\\"hljs-meta\\\">@Bean</span>\\n    <span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">public</span> LoginInterceptor <span class=\\\"hljs-title\\\">getLoginInterceptor</span><span class=\\\"hljs-params\\\">()</span> </span>{\\n        <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-keyword\\\">new</span> LoginInterceptor();\\n    }\\n\\n    <span class=\\\"hljs-comment\\\">/**\\n     * 添加拦截器\\n     * <span class=\\\"hljs-doctag\\\">@param</span> registry  拦截器注册\\n     */</span>\\n    <span class=\\\"hljs-meta\\\">@Override</span>\\n    <span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">protected</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title\\\">addInterceptors</span><span class=\\\"hljs-params\\\">(InterceptorRegistry registry)</span> </span>{\\n        <span class=\\\"hljs-comment\\\">// TODO Auto-generated method stub</span>\\n        registry.addInterceptor(getLoginInterceptor()).addPathPatterns(<span class=\\\"hljs-string\\\">\\\"/**\\\"</span>)\\n                .excludePathPatterns(<span class=\\\"hljs-string\\\">\\\"/*/login\\\"</span>);;\\n        <span class=\\\"hljs-keyword\\\">super</span>.addInterceptors(registry);\\n    }\\n}\\n</code></div></pre>\\n<p>这里大家注意，看看自己的代码有没有因为添加拦截器而创建了一个配置类，该类继承了<code>WebMvcConfigurationSupport</code>，就是他！以前是用 <code>WebMvcConfigurerAdapter</code> ，springboot 2.0 建议使用 <code>WebMvcConfigurationSupport</code> 。但是在添加拦截器并继承 <code>WebMvcConfigurationSupport</code> 后会覆盖<code>@EnableAutoConfiguration</code>关于<code>WebMvcAutoConfiguration</code>的配置！从而导致所有的Date返回都变成时间戳！<br />\\n可以采用另外一种方式，在你继承<code>WebMvcConfigurationSupport</code>的子类中添加日期转换的bean<br />\\n以下是我更改后的代码</p>\\n<pre><div class=\\\"hljs\\\"><code class=\\\"lang-java\\\"><span class=\\\"hljs-keyword\\\">package</span> com.wsy.blog.config;\\n\\n<span class=\\\"hljs-keyword\\\">import</span> com.fasterxml.jackson.databind.DeserializationFeature;\\n<span class=\\\"hljs-keyword\\\">import</span> com.fasterxml.jackson.databind.ObjectMapper;\\n<span class=\\\"hljs-keyword\\\">import</span> com.wsy.blog.interceptor.LoginInterceptor;\\n<span class=\\\"hljs-keyword\\\">import</span> org.springframework.context.annotation.Bean;\\n<span class=\\\"hljs-keyword\\\">import</span> org.springframework.context.annotation.Configuration;\\n<span class=\\\"hljs-keyword\\\">import</span> org.springframework.http.converter.HttpMessageConverter;\\n<span class=\\\"hljs-keyword\\\">import</span> org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;\\n<span class=\\\"hljs-keyword\\\">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistry;\\n<span class=\\\"hljs-keyword\\\">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport;\\n\\n<span class=\\\"hljs-keyword\\\">import</span> java.text.SimpleDateFormat;\\n<span class=\\\"hljs-keyword\\\">import</span> java.util.List;\\n\\n<span class=\\\"hljs-comment\\\">/**\\n * <span class=\\\"hljs-doctag\\\">@Author</span>: wsy\\n * <span class=\\\"hljs-doctag\\\">@Date</span>: 2020/8/10 11:34\\n */</span>\\n<span class=\\\"hljs-meta\\\">@Configuration</span>\\n<span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-class\\\"><span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title\\\">InterceptorConfig</span> <span class=\\\"hljs-keyword\\\">extends</span> <span class=\\\"hljs-title\\\">WebMvcConfigurationSupport</span> </span>{\\n\\n    <span class=\\\"hljs-meta\\\">@Bean</span>\\n    <span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">public</span> LoginInterceptor <span class=\\\"hljs-title\\\">getLoginInterceptor</span><span class=\\\"hljs-params\\\">()</span> </span>{\\n        <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-keyword\\\">new</span> LoginInterceptor();\\n    }\\n\\n    <span class=\\\"hljs-comment\\\">/**\\n     * 定义时间格式转换器\\n     * <span class=\\\"hljs-doctag\\\">@return</span>  MappingJackson2HttpMessageConverter\\n     */</span>\\n    <span class=\\\"hljs-meta\\\">@Bean</span>\\n    <span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">public</span> MappingJackson2HttpMessageConverter <span class=\\\"hljs-title\\\">jackson2HttpMessageConverter</span><span class=\\\"hljs-params\\\">()</span> </span>{\\n        MappingJackson2HttpMessageConverter converter = <span class=\\\"hljs-keyword\\\">new</span> MappingJackson2HttpMessageConverter();\\n        ObjectMapper mapper = <span class=\\\"hljs-keyword\\\">new</span> ObjectMapper();\\n        mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, <span class=\\\"hljs-keyword\\\">false</span>);\\n        mapper.setDateFormat(<span class=\\\"hljs-keyword\\\">new</span> SimpleDateFormat(<span class=\\\"hljs-string\\\">\\\"yyyy-MM-dd HH:mm:ss\\\"</span>));\\n        converter.setObjectMapper(mapper);\\n        <span class=\\\"hljs-keyword\\\">return</span> converter;\\n    }\\n\\n    <span class=\\\"hljs-comment\\\">/**\\n     * 添加转换器\\n     * <span class=\\\"hljs-doctag\\\">@param</span> converters    converters\\n     */</span>\\n    <span class=\\\"hljs-meta\\\">@Override</span>\\n    <span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title\\\">configureMessageConverters</span><span class=\\\"hljs-params\\\">(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters)</span> </span>{\\n        <span class=\\\"hljs-comment\\\">//将我们定义的时间格式转换器添加到转换器列表中,</span>\\n        <span class=\\\"hljs-comment\\\">//这样jackson格式化时候但凡遇到Date类型就会转换成我们定义的格式</span>\\n        converters.add(jackson2HttpMessageConverter());\\n    }\\n\\n    <span class=\\\"hljs-comment\\\">/**\\n     * 添加拦截器\\n     * <span class=\\\"hljs-doctag\\\">@param</span> registry  拦截器注册\\n     */</span>\\n    <span class=\\\"hljs-meta\\\">@Override</span>\\n    <span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">protected</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title\\\">addInterceptors</span><span class=\\\"hljs-params\\\">(InterceptorRegistry registry)</span> </span>{\\n        <span class=\\\"hljs-comment\\\">// TODO Auto-generated method stub</span>\\n        registry.addInterceptor(getLoginInterceptor()).addPathPatterns(<span class=\\\"hljs-string\\\">\\\"/**\\\"</span>)\\n                .excludePathPatterns(<span class=\\\"hljs-string\\\">\\\"/*/login\\\"</span>);;\\n        <span class=\\\"hljs-keyword\\\">super</span>.addInterceptors(registry);\\n    }\\n}\\n</code></div></pre>\\n<p>感谢博主的分享经验<br />\\n参考博客：<a href=\\\"https://blog.csdn.net/qq_34975710/article/details/84872489\\\" target=\\\"_blank\\\">https://blog.csdn.net/qq_34975710/article/details/84872489</a></p>\\n\",\"blogGoods\":1,\"blogId\":\"1331436834413211648\",\"blogImage\":\"http://808km.top/blog/img/default.jpg\",\"blogRead\":74,\"blogTitle\":\"springboot 后端传给前端相差8小时\",\"blogType\":9,\"createdTime\":1606274253000,\"typeName\":\"Springboot\",\"updateTime\":1609227642000,\"version\":37},\"msg\":\"阅读成功\"}', '218.77.40.122', '2021-01-02 09:54:00', NULL);
INSERT INTO `bl_log` VALUES (2786, '阅读博客', '//blog/read/1331436834413211648', '[1331436834413211648]', 1, NULL, 'PUT', 241, '{\"code\":20000,\"data\":{\"blogCollection\":0,\"blogComment\":0,\"blogContent\":\"<p>在开发中日期最常打交道的东西之一，但是日期又会存在各式各样的格式，常见的情形就是，从数据库取出的日期往往都是时间戳（毫秒数）的形式，这个一般情况下是前端不想要的结果，需要进行处理，那在springboot中比较简单：<br />\\n因为后端传给前端时默认使用jackson转换格式所以我们可以</p>\\n<ol>\\n<li>在application.yml中设置</li>\\n</ol>\\n<pre><div class=\\\"hljs\\\"><code class=\\\"lang-yml\\\"><span class=\\\"hljs-attr\\\">spring:</span>\\n<span class=\\\"hljs-attr\\\">  jackson:</span>\\n<span class=\\\"hljs-attr\\\">    date-format:</span> <span class=\\\"hljs-string\\\">yyyy-MM-dd</span> <span class=\\\"hljs-attr\\\">HH:mm:ss</span>\\n<span class=\\\"hljs-attr\\\">    time-zone:</span> <span class=\\\"hljs-string\\\">GMT+8</span>\\n</code></div></pre>\\n<ol start=\\\"2\\\">\\n<li>在pojo对象上添加@JsonFormat注解</li>\\n</ol>\\n<pre><div class=\\\"hljs\\\"><code class=\\\"lang-java\\\">    <span class=\\\"hljs-meta\\\">@JsonFormat</span>(pattern = <span class=\\\"hljs-string\\\">\\\"yyyy-MM-dd HH:mm:ss\\\"</span>, timezone = <span class=\\\"hljs-string\\\">\\\"GMT+8\\\"</span>)\\n    <span class=\\\"hljs-keyword\\\">private</span> Date createdTime;\\n</code></div></pre>\\n<p>但是我在尝试了这两个方法以及相类似的方法，但是都无效，要么就是格式化无效，直接返回的时间戳，要么就是时间还是相差8个小时，但是格式化有效。</p>\\n<p>这时我看到了另外一篇不一样的博客，随后明白了为什么我的配置没有用，原来是因为我添加拦截器时写的配置类的问题。<br />\\n以下代码是我更改之前的配置类</p>\\n<pre><div class=\\\"hljs\\\"><code class=\\\"lang-java\\\"><span class=\\\"hljs-keyword\\\">package</span> com.wsy.blog.config;\\n\\n<span class=\\\"hljs-keyword\\\">import</span> com.fasterxml.jackson.databind.DeserializationFeature;\\n<span class=\\\"hljs-keyword\\\">import</span> com.fasterxml.jackson.databind.ObjectMapper;\\n<span class=\\\"hljs-keyword\\\">import</span> com.wsy.blog.interceptor.LoginInterceptor;\\n<span class=\\\"hljs-keyword\\\">import</span> org.springframework.context.annotation.Bean;\\n<span class=\\\"hljs-keyword\\\">import</span> org.springframework.context.annotation.Configuration;\\n<span class=\\\"hljs-keyword\\\">import</span> org.springframework.http.converter.HttpMessageConverter;\\n<span class=\\\"hljs-keyword\\\">import</span> org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;\\n<span class=\\\"hljs-keyword\\\">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistry;\\n<span class=\\\"hljs-keyword\\\">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport;\\n\\n<span class=\\\"hljs-keyword\\\">import</span> java.text.SimpleDateFormat;\\n<span class=\\\"hljs-keyword\\\">import</span> java.util.List;\\n\\n<span class=\\\"hljs-comment\\\">/**\\n * <span class=\\\"hljs-doctag\\\">@Author</span>: wsy\\n * <span class=\\\"hljs-doctag\\\">@Date</span>: 2020/8/10 11:34\\n */</span>\\n<span class=\\\"hljs-meta\\\">@Configuration</span>\\n<span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-class\\\"><span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title\\\">InterceptorConfig</span> <span class=\\\"hljs-keyword\\\">extends</span> <span class=\\\"hljs-title\\\">WebMvcConfigurationSupport</span> </span>{\\n\\n    <span class=\\\"hljs-meta\\\">@Bean</span>\\n    <span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">public</span> LoginInterceptor <span class=\\\"hljs-title\\\">getLoginInterceptor</span><span class=\\\"hljs-params\\\">()</span> </span>{\\n        <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-keyword\\\">new</span> LoginInterceptor();\\n    }\\n\\n    <span class=\\\"hljs-comment\\\">/**\\n     * 添加拦截器\\n     * <span class=\\\"hljs-doctag\\\">@param</span> registry  拦截器注册\\n     */</span>\\n    <span class=\\\"hljs-meta\\\">@Override</span>\\n    <span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">protected</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title\\\">addInterceptors</span><span class=\\\"hljs-params\\\">(InterceptorRegistry registry)</span> </span>{\\n        <span class=\\\"hljs-comment\\\">// TODO Auto-generated method stub</span>\\n        registry.addInterceptor(getLoginInterceptor()).addPathPatterns(<span class=\\\"hljs-string\\\">\\\"/**\\\"</span>)\\n                .excludePathPatterns(<span class=\\\"hljs-string\\\">\\\"/*/login\\\"</span>);;\\n        <span class=\\\"hljs-keyword\\\">super</span>.addInterceptors(registry);\\n    }\\n}\\n</code></div></pre>\\n<p>这里大家注意，看看自己的代码有没有因为添加拦截器而创建了一个配置类，该类继承了<code>WebMvcConfigurationSupport</code>，就是他！以前是用 <code>WebMvcConfigurerAdapter</code> ，springboot 2.0 建议使用 <code>WebMvcConfigurationSupport</code> 。但是在添加拦截器并继承 <code>WebMvcConfigurationSupport</code> 后会覆盖<code>@EnableAutoConfiguration</code>关于<code>WebMvcAutoConfiguration</code>的配置！从而导致所有的Date返回都变成时间戳！<br />\\n可以采用另外一种方式，在你继承<code>WebMvcConfigurationSupport</code>的子类中添加日期转换的bean<br />\\n以下是我更改后的代码</p>\\n<pre><div class=\\\"hljs\\\"><code class=\\\"lang-java\\\"><span class=\\\"hljs-keyword\\\">package</span> com.wsy.blog.config;\\n\\n<span class=\\\"hljs-keyword\\\">import</span> com.fasterxml.jackson.databind.DeserializationFeature;\\n<span class=\\\"hljs-keyword\\\">import</span> com.fasterxml.jackson.databind.ObjectMapper;\\n<span class=\\\"hljs-keyword\\\">import</span> com.wsy.blog.interceptor.LoginInterceptor;\\n<span class=\\\"hljs-keyword\\\">import</span> org.springframework.context.annotation.Bean;\\n<span class=\\\"hljs-keyword\\\">import</span> org.springframework.context.annotation.Configuration;\\n<span class=\\\"hljs-keyword\\\">import</span> org.springframework.http.converter.HttpMessageConverter;\\n<span class=\\\"hljs-keyword\\\">import</span> org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;\\n<span class=\\\"hljs-keyword\\\">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistry;\\n<span class=\\\"hljs-keyword\\\">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport;\\n\\n<span class=\\\"hljs-keyword\\\">import</span> java.text.SimpleDateFormat;\\n<span class=\\\"hljs-keyword\\\">import</span> java.util.List;\\n\\n<span class=\\\"hljs-comment\\\">/**\\n * <span class=\\\"hljs-doctag\\\">@Author</span>: wsy\\n * <span class=\\\"hljs-doctag\\\">@Date</span>: 2020/8/10 11:34\\n */</span>\\n<span class=\\\"hljs-meta\\\">@Configuration</span>\\n<span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-class\\\"><span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title\\\">InterceptorConfig</span> <span class=\\\"hljs-keyword\\\">extends</span> <span class=\\\"hljs-title\\\">WebMvcConfigurationSupport</span> </span>{\\n\\n    <span class=\\\"hljs-meta\\\">@Bean</span>\\n    <span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">public</span> LoginInterceptor <span class=\\\"hljs-title\\\">getLoginInterceptor</span><span class=\\\"hljs-params\\\">()</span> </span>{\\n        <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-keyword\\\">new</span> LoginInterceptor();\\n    }\\n\\n    <span class=\\\"hljs-comment\\\">/**\\n     * 定义时间格式转换器\\n     * <span class=\\\"hljs-doctag\\\">@return</span>  MappingJackson2HttpMessageConverter\\n     */</span>\\n    <span class=\\\"hljs-meta\\\">@Bean</span>\\n    <span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">public</span> MappingJackson2HttpMessageConverter <span class=\\\"hljs-title\\\">jackson2HttpMessageConverter</span><span class=\\\"hljs-params\\\">()</span> </span>{\\n        MappingJackson2HttpMessageConverter converter = <span class=\\\"hljs-keyword\\\">new</span> MappingJackson2HttpMessageConverter();\\n        ObjectMapper mapper = <span class=\\\"hljs-keyword\\\">new</span> ObjectMapper();\\n        mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, <span class=\\\"hljs-keyword\\\">false</span>);\\n        mapper.setDateFormat(<span class=\\\"hljs-keyword\\\">new</span> SimpleDateFormat(<span class=\\\"hljs-string\\\">\\\"yyyy-MM-dd HH:mm:ss\\\"</span>));\\n        converter.setObjectMapper(mapper);\\n        <span class=\\\"hljs-keyword\\\">return</span> converter;\\n    }\\n\\n    <span class=\\\"hljs-comment\\\">/**\\n     * 添加转换器\\n     * <span class=\\\"hljs-doctag\\\">@param</span> converters    converters\\n     */</span>\\n    <span class=\\\"hljs-meta\\\">@Override</span>\\n    <span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title\\\">configureMessageConverters</span><span class=\\\"hljs-params\\\">(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters)</span> </span>{\\n        <span class=\\\"hljs-comment\\\">//将我们定义的时间格式转换器添加到转换器列表中,</span>\\n        <span class=\\\"hljs-comment\\\">//这样jackson格式化时候但凡遇到Date类型就会转换成我们定义的格式</span>\\n        converters.add(jackson2HttpMessageConverter());\\n    }\\n\\n    <span class=\\\"hljs-comment\\\">/**\\n     * 添加拦截器\\n     * <span class=\\\"hljs-doctag\\\">@param</span> registry  拦截器注册\\n     */</span>\\n    <span class=\\\"hljs-meta\\\">@Override</span>\\n    <span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">protected</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title\\\">addInterceptors</span><span class=\\\"hljs-params\\\">(InterceptorRegistry registry)</span> </span>{\\n        <span class=\\\"hljs-comment\\\">// TODO Auto-generated method stub</span>\\n        registry.addInterceptor(getLoginInterceptor()).addPathPatterns(<span class=\\\"hljs-string\\\">\\\"/**\\\"</span>)\\n                .excludePathPatterns(<span class=\\\"hljs-string\\\">\\\"/*/login\\\"</span>);;\\n        <span class=\\\"hljs-keyword\\\">super</span>.addInterceptors(registry);\\n    }\\n}\\n</code></div></pre>\\n<p>感谢博主的分享经验<br />\\n参考博客：<a href=\\\"https://blog.csdn.net/qq_34975710/article/details/84872489\\\" target=\\\"_blank\\\">https://blog.csdn.net/qq_34975710/article/details/84872489</a></p>\\n\",\"blogGoods\":1,\"blogId\":\"1331436834413211648\",\"blogImage\":\"http://808km.top/blog/img/default.jpg\",\"blogRead\":75,\"blogTitle\":\"springboot 后端传给前端相差8小时\",\"blogType\":9,\"createdTime\":1606274253000,\"typeName\":\"Springboot\",\"updateTime\":1609552439000,\"version\":37},\"msg\":\"阅读成功\"}', '61.157.243.117', '2021-01-02 15:19:13', NULL);
INSERT INTO `bl_log` VALUES (2787, '阅读博客', '//blog/read/1331436834413211648', '[1331436834413211648]', 1, NULL, 'PUT', 35, '{\"code\":20000,\"data\":{\"blogCollection\":0,\"blogComment\":0,\"blogContent\":\"<p>在开发中日期最常打交道的东西之一，但是日期又会存在各式各样的格式，常见的情形就是，从数据库取出的日期往往都是时间戳（毫秒数）的形式，这个一般情况下是前端不想要的结果，需要进行处理，那在springboot中比较简单：<br />\\n因为后端传给前端时默认使用jackson转换格式所以我们可以</p>\\n<ol>\\n<li>在application.yml中设置</li>\\n</ol>\\n<pre><div class=\\\"hljs\\\"><code class=\\\"lang-yml\\\"><span class=\\\"hljs-attr\\\">spring:</span>\\n<span class=\\\"hljs-attr\\\">  jackson:</span>\\n<span class=\\\"hljs-attr\\\">    date-format:</span> <span class=\\\"hljs-string\\\">yyyy-MM-dd</span> <span class=\\\"hljs-attr\\\">HH:mm:ss</span>\\n<span class=\\\"hljs-attr\\\">    time-zone:</span> <span class=\\\"hljs-string\\\">GMT+8</span>\\n</code></div></pre>\\n<ol start=\\\"2\\\">\\n<li>在pojo对象上添加@JsonFormat注解</li>\\n</ol>\\n<pre><div class=\\\"hljs\\\"><code class=\\\"lang-java\\\">    <span class=\\\"hljs-meta\\\">@JsonFormat</span>(pattern = <span class=\\\"hljs-string\\\">\\\"yyyy-MM-dd HH:mm:ss\\\"</span>, timezone = <span class=\\\"hljs-string\\\">\\\"GMT+8\\\"</span>)\\n    <span class=\\\"hljs-keyword\\\">private</span> Date createdTime;\\n</code></div></pre>\\n<p>但是我在尝试了这两个方法以及相类似的方法，但是都无效，要么就是格式化无效，直接返回的时间戳，要么就是时间还是相差8个小时，但是格式化有效。</p>\\n<p>这时我看到了另外一篇不一样的博客，随后明白了为什么我的配置没有用，原来是因为我添加拦截器时写的配置类的问题。<br />\\n以下代码是我更改之前的配置类</p>\\n<pre><div class=\\\"hljs\\\"><code class=\\\"lang-java\\\"><span class=\\\"hljs-keyword\\\">package</span> com.wsy.blog.config;\\n\\n<span class=\\\"hljs-keyword\\\">import</span> com.fasterxml.jackson.databind.DeserializationFeature;\\n<span class=\\\"hljs-keyword\\\">import</span> com.fasterxml.jackson.databind.ObjectMapper;\\n<span class=\\\"hljs-keyword\\\">import</span> com.wsy.blog.interceptor.LoginInterceptor;\\n<span class=\\\"hljs-keyword\\\">import</span> org.springframework.context.annotation.Bean;\\n<span class=\\\"hljs-keyword\\\">import</span> org.springframework.context.annotation.Configuration;\\n<span class=\\\"hljs-keyword\\\">import</span> org.springframework.http.converter.HttpMessageConverter;\\n<span class=\\\"hljs-keyword\\\">import</span> org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;\\n<span class=\\\"hljs-keyword\\\">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistry;\\n<span class=\\\"hljs-keyword\\\">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport;\\n\\n<span class=\\\"hljs-keyword\\\">import</span> java.text.SimpleDateFormat;\\n<span class=\\\"hljs-keyword\\\">import</span> java.util.List;\\n\\n<span class=\\\"hljs-comment\\\">/**\\n * <span class=\\\"hljs-doctag\\\">@Author</span>: wsy\\n * <span class=\\\"hljs-doctag\\\">@Date</span>: 2020/8/10 11:34\\n */</span>\\n<span class=\\\"hljs-meta\\\">@Configuration</span>\\n<span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-class\\\"><span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title\\\">InterceptorConfig</span> <span class=\\\"hljs-keyword\\\">extends</span> <span class=\\\"hljs-title\\\">WebMvcConfigurationSupport</span> </span>{\\n\\n    <span class=\\\"hljs-meta\\\">@Bean</span>\\n    <span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">public</span> LoginInterceptor <span class=\\\"hljs-title\\\">getLoginInterceptor</span><span class=\\\"hljs-params\\\">()</span> </span>{\\n        <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-keyword\\\">new</span> LoginInterceptor();\\n    }\\n\\n    <span class=\\\"hljs-comment\\\">/**\\n     * 添加拦截器\\n     * <span class=\\\"hljs-doctag\\\">@param</span> registry  拦截器注册\\n     */</span>\\n    <span class=\\\"hljs-meta\\\">@Override</span>\\n    <span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">protected</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title\\\">addInterceptors</span><span class=\\\"hljs-params\\\">(InterceptorRegistry registry)</span> </span>{\\n        <span class=\\\"hljs-comment\\\">// TODO Auto-generated method stub</span>\\n        registry.addInterceptor(getLoginInterceptor()).addPathPatterns(<span class=\\\"hljs-string\\\">\\\"/**\\\"</span>)\\n                .excludePathPatterns(<span class=\\\"hljs-string\\\">\\\"/*/login\\\"</span>);;\\n        <span class=\\\"hljs-keyword\\\">super</span>.addInterceptors(registry);\\n    }\\n}\\n</code></div></pre>\\n<p>这里大家注意，看看自己的代码有没有因为添加拦截器而创建了一个配置类，该类继承了<code>WebMvcConfigurationSupport</code>，就是他！以前是用 <code>WebMvcConfigurerAdapter</code> ，springboot 2.0 建议使用 <code>WebMvcConfigurationSupport</code> 。但是在添加拦截器并继承 <code>WebMvcConfigurationSupport</code> 后会覆盖<code>@EnableAutoConfiguration</code>关于<code>WebMvcAutoConfiguration</code>的配置！从而导致所有的Date返回都变成时间戳！<br />\\n可以采用另外一种方式，在你继承<code>WebMvcConfigurationSupport</code>的子类中添加日期转换的bean<br />\\n以下是我更改后的代码</p>\\n<pre><div class=\\\"hljs\\\"><code class=\\\"lang-java\\\"><span class=\\\"hljs-keyword\\\">package</span> com.wsy.blog.config;\\n\\n<span class=\\\"hljs-keyword\\\">import</span> com.fasterxml.jackson.databind.DeserializationFeature;\\n<span class=\\\"hljs-keyword\\\">import</span> com.fasterxml.jackson.databind.ObjectMapper;\\n<span class=\\\"hljs-keyword\\\">import</span> com.wsy.blog.interceptor.LoginInterceptor;\\n<span class=\\\"hljs-keyword\\\">import</span> org.springframework.context.annotation.Bean;\\n<span class=\\\"hljs-keyword\\\">import</span> org.springframework.context.annotation.Configuration;\\n<span class=\\\"hljs-keyword\\\">import</span> org.springframework.http.converter.HttpMessageConverter;\\n<span class=\\\"hljs-keyword\\\">import</span> org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;\\n<span class=\\\"hljs-keyword\\\">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistry;\\n<span class=\\\"hljs-keyword\\\">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport;\\n\\n<span class=\\\"hljs-keyword\\\">import</span> java.text.SimpleDateFormat;\\n<span class=\\\"hljs-keyword\\\">import</span> java.util.List;\\n\\n<span class=\\\"hljs-comment\\\">/**\\n * <span class=\\\"hljs-doctag\\\">@Author</span>: wsy\\n * <span class=\\\"hljs-doctag\\\">@Date</span>: 2020/8/10 11:34\\n */</span>\\n<span class=\\\"hljs-meta\\\">@Configuration</span>\\n<span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-class\\\"><span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title\\\">InterceptorConfig</span> <span class=\\\"hljs-keyword\\\">extends</span> <span class=\\\"hljs-title\\\">WebMvcConfigurationSupport</span> </span>{\\n\\n    <span class=\\\"hljs-meta\\\">@Bean</span>\\n    <span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">public</span> LoginInterceptor <span class=\\\"hljs-title\\\">getLoginInterceptor</span><span class=\\\"hljs-params\\\">()</span> </span>{\\n        <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-keyword\\\">new</span> LoginInterceptor();\\n    }\\n\\n    <span class=\\\"hljs-comment\\\">/**\\n     * 定义时间格式转换器\\n     * <span class=\\\"hljs-doctag\\\">@return</span>  MappingJackson2HttpMessageConverter\\n     */</span>\\n    <span class=\\\"hljs-meta\\\">@Bean</span>\\n    <span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">public</span> MappingJackson2HttpMessageConverter <span class=\\\"hljs-title\\\">jackson2HttpMessageConverter</span><span class=\\\"hljs-params\\\">()</span> </span>{\\n        MappingJackson2HttpMessageConverter converter = <span class=\\\"hljs-keyword\\\">new</span> MappingJackson2HttpMessageConverter();\\n        ObjectMapper mapper = <span class=\\\"hljs-keyword\\\">new</span> ObjectMapper();\\n        mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, <span class=\\\"hljs-keyword\\\">false</span>);\\n        mapper.setDateFormat(<span class=\\\"hljs-keyword\\\">new</span> SimpleDateFormat(<span class=\\\"hljs-string\\\">\\\"yyyy-MM-dd HH:mm:ss\\\"</span>));\\n        converter.setObjectMapper(mapper);\\n        <span class=\\\"hljs-keyword\\\">return</span> converter;\\n    }\\n\\n    <span class=\\\"hljs-comment\\\">/**\\n     * 添加转换器\\n     * <span class=\\\"hljs-doctag\\\">@param</span> converters    converters\\n     */</span>\\n    <span class=\\\"hljs-meta\\\">@Override</span>\\n    <span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title\\\">configureMessageConverters</span><span class=\\\"hljs-params\\\">(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters)</span> </span>{\\n        <span class=\\\"hljs-comment\\\">//将我们定义的时间格式转换器添加到转换器列表中,</span>\\n        <span class=\\\"hljs-comment\\\">//这样jackson格式化时候但凡遇到Date类型就会转换成我们定义的格式</span>\\n        converters.add(jackson2HttpMessageConverter());\\n    }\\n\\n    <span class=\\\"hljs-comment\\\">/**\\n     * 添加拦截器\\n     * <span class=\\\"hljs-doctag\\\">@param</span> registry  拦截器注册\\n     */</span>\\n    <span class=\\\"hljs-meta\\\">@Override</span>\\n    <span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">protected</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title\\\">addInterceptors</span><span class=\\\"hljs-params\\\">(InterceptorRegistry registry)</span> </span>{\\n        <span class=\\\"hljs-comment\\\">// TODO Auto-generated method stub</span>\\n        registry.addInterceptor(getLoginInterceptor()).addPathPatterns(<span class=\\\"hljs-string\\\">\\\"/**\\\"</span>)\\n                .excludePathPatterns(<span class=\\\"hljs-string\\\">\\\"/*/login\\\"</span>);;\\n        <span class=\\\"hljs-keyword\\\">super</span>.addInterceptors(registry);\\n    }\\n}\\n</code></div></pre>\\n<p>感谢博主的分享经验<br />\\n参考博客：<a href=\\\"https://blog.csdn.net/qq_34975710/article/details/84872489\\\" target=\\\"_blank\\\">https://blog.csdn.net/qq_34975710/article/details/84872489</a></p>\\n\",\"blogGoods\":1,\"blogId\":\"1331436834413211648\",\"blogImage\":\"http://808km.top/blog/img/default.jpg\",\"blogRead\":76,\"blogTitle\":\"springboot 后端传给前端相差8小时\",\"blogType\":9,\"createdTime\":1606274253000,\"typeName\":\"Springboot\",\"updateTime\":1609571952000,\"version\":37},\"msg\":\"阅读成功\"}', '61.157.243.117', '2021-01-02 15:19:25', NULL);
INSERT INTO `bl_log` VALUES (2788, '登录', '//admin/login', '[LoginDto(username=qq1437631334, password=wangsiy1i314)]', 1, NULL, 'POST', 146, '{\"code\":400006,\"msg\":\"用户名或密码错误！\"}', '218.77.40.108', '2021-01-04 22:31:14', NULL);
INSERT INTO `bl_log` VALUES (2789, '登录', '//admin/login', '[LoginDto(username=qq1437631334, password=wsy112233..)]', 1, NULL, 'POST', 8, '{\"code\":400006,\"msg\":\"用户名或密码错误！\"}', '218.77.40.108', '2021-01-04 22:31:18', NULL);
INSERT INTO `bl_log` VALUES (2790, '登录', '/admin/login', '[LoginDto(username=oops, password=wangsiyi1314)]', 1, NULL, 'POST', 610, '{\"code\":400006,\"msg\":\"用户名或密码错误！\"}', '127.0.0.1', '2021-04-11 14:09:18', NULL);
INSERT INTO `bl_log` VALUES (2791, '登录', '/admin/login', '[LoginDto(username=oops, password=123456)]', 1, NULL, 'POST', 17, '{\"code\":400006,\"msg\":\"用户名或密码错误！\"}', '127.0.0.1', '2021-04-11 14:10:38', NULL);
INSERT INTO `bl_log` VALUES (2792, '登录', '/admin/login', '[LoginDto(username=oops, password=123456)]', 1, NULL, 'POST', 20, '{\"code\":400006,\"msg\":\"用户名或密码错误！\"}', '127.0.0.1', '2021-04-11 14:10:49', NULL);
INSERT INTO `bl_log` VALUES (2793, '登录', '/admin/login', '[LoginDto(username=oops, password=123456)]', 1, NULL, 'POST', 29, '{\"code\":400006,\"msg\":\"用户名或密码错误！\"}', '127.0.0.1', '2021-04-11 14:11:45', NULL);
INSERT INTO `bl_log` VALUES (2794, '登录', '/admin/login', '[LoginDto(username=oops, password=123456)]', 1, NULL, 'POST', 12, '{\"code\":400006,\"msg\":\"用户名或密码错误！\"}', '127.0.0.1', '2021-04-11 14:11:57', NULL);
INSERT INTO `bl_log` VALUES (2795, '上传图片', '/upload/uploadImage', '[org.springframework.web.multipart.support.StandardMultipartHttpServletRequest$StandardMultipartFile@184f9db0, test/image]', 0, '	at com.wsy.blog.utils.MinioUtils.putObject(MinioUtils.java:93)\n	at com.wsy.blog.utils.UploadService.upload(UploadService.java:38)\n	at com.wsy.blog.controller.UploadController.uploadImage(UploadController.java:35)\n	at com.wsy.blog.controller.UploadController$$FastClassBySpringCGLIB$$d3ffeb61.invoke(<generated>)\n	at com.wsy.blog.aspect.RequestAspect.doAround(RequestAspect.java:80)\n	at com.wsy.blog.controller.UploadController$$EnhancerBySpringCGLIB$$4f1c476b.uploadImage(<generated>)\n', 'POST', NULL, NULL, '127.0.0.1', '2021-04-11 20:09:23', NULL);
INSERT INTO `bl_log` VALUES (2796, '上传图片', '/upload/uploadImage', '[org.springframework.web.multipart.support.StandardMultipartHttpServletRequest$StandardMultipartFile@51c1b62a, test/image]', 0, '	at com.wsy.blog.utils.MinioUtils.putObject(MinioUtils.java:93)\n	at com.wsy.blog.utils.UploadService.upload(UploadService.java:38)\n	at com.wsy.blog.controller.UploadController.uploadImage(UploadController.java:35)\n	at com.wsy.blog.controller.UploadController$$FastClassBySpringCGLIB$$d3ffeb61.invoke(<generated>)\n	at com.wsy.blog.aspect.RequestAspect.doAround(RequestAspect.java:80)\n	at com.wsy.blog.controller.UploadController$$EnhancerBySpringCGLIB$$4f1c476b.uploadImage(<generated>)\n', 'POST', NULL, NULL, '127.0.0.1', '2021-04-11 20:12:29', NULL);
INSERT INTO `bl_log` VALUES (2797, '上传图片', '/upload/uploadImage', '[org.springframework.web.multipart.support.StandardMultipartHttpServletRequest$StandardMultipartFile@41483a8f, test/image]', 1, NULL, 'POST', 196411, '{\"code\":20000,\"data\":\"http://127.0.0.1:9000/oops/test/image\",\"msg\":\"上传成功！\"}', '127.0.0.1', '2021-04-11 20:19:29', NULL);
INSERT INTO `bl_log` VALUES (2798, '上传图片', '/upload/uploadImage', '[org.springframework.web.multipart.support.StandardMultipartHttpServletRequest$StandardMultipartFile@3990164c]', 0, 'java.lang.ArrayIndexOutOfBoundsException: -1\n	at com.wsy.blog.utils.FileUtils.getFileExtName(FileUtils.java:16)\n	at com.wsy.blog.utils.UploadService.upload(UploadService.java:38)\n	at com.wsy.blog.controller.UploadController.uploadImage(UploadController.java:33)\n	at com.wsy.blog.controller.UploadController$$FastClassBySpringCGLIB$$d3ffeb61.invoke(<generated>)\n	at com.wsy.blog.aspect.RequestAspect.doAround(RequestAspect.java:80)\n	at com.wsy.blog.controller.UploadController$$EnhancerBySpringCGLIB$$98b4f081.uploadImage(<generated>)\n', 'POST', NULL, NULL, '127.0.0.1', '2021-04-11 20:19:51', NULL);
INSERT INTO `bl_log` VALUES (2799, '上传图片', '/upload/uploadImage', '[org.springframework.web.multipart.support.StandardMultipartHttpServletRequest$StandardMultipartFile@2c713b17]', 0, 'java.lang.ArrayIndexOutOfBoundsException: -1\n	at com.wsy.blog.utils.FileUtils.getFileExtName(FileUtils.java:16)\n	at com.wsy.blog.utils.UploadService.upload(UploadService.java:38)\n	at com.wsy.blog.controller.UploadController.uploadImage(UploadController.java:33)\n	at com.wsy.blog.controller.UploadController$$FastClassBySpringCGLIB$$d3ffeb61.invoke(<generated>)\n	at com.wsy.blog.aspect.RequestAspect.doAround(RequestAspect.java:80)\n	at com.wsy.blog.controller.UploadController$$EnhancerBySpringCGLIB$$98b4f081.uploadImage(<generated>)\n', 'POST', NULL, NULL, '127.0.0.1', '2021-04-11 20:21:05', NULL);
INSERT INTO `bl_log` VALUES (2800, '上传图片', '/upload/uploadImage', '[org.springframework.web.multipart.support.StandardMultipartHttpServletRequest$StandardMultipartFile@6055b494]', 0, 'java.lang.ArrayIndexOutOfBoundsException: -1\n	at com.wsy.blog.utils.FileUtils.getFileExtName(FileUtils.java:16)\n	at com.wsy.blog.utils.UploadService.upload(UploadService.java:38)\n	at com.wsy.blog.controller.UploadController.uploadImage(UploadController.java:33)\n	at com.wsy.blog.controller.UploadController$$FastClassBySpringCGLIB$$d3ffeb61.invoke(<generated>)\n	at com.wsy.blog.aspect.RequestAspect.doAround(RequestAspect.java:80)\n	at com.wsy.blog.controller.UploadController$$EnhancerBySpringCGLIB$$ad7d158c.uploadImage(<generated>)\n', 'POST', NULL, NULL, '127.0.0.1', '2021-04-11 20:26:24', NULL);
INSERT INTO `bl_log` VALUES (2801, '上传图片', '/upload/uploadImage', '[org.springframework.web.multipart.support.StandardMultipartHttpServletRequest$StandardMultipartFile@7aec8cf1]', 0, '	at com.wsy.blog.utils.MinioUtils.putObject(MinioUtils.java:94)\n	at com.wsy.blog.utils.UploadService.upload(UploadService.java:38)\n	at com.wsy.blog.controller.UploadController.uploadImage(UploadController.java:33)\n	at com.wsy.blog.controller.UploadController$$FastClassBySpringCGLIB$$d3ffeb61.invoke(<generated>)\n	at com.wsy.blog.aspect.RequestAspect.doAround(RequestAspect.java:80)\n	at com.wsy.blog.controller.UploadController$$EnhancerBySpringCGLIB$$a33d0622.uploadImage(<generated>)\n', 'POST', NULL, NULL, '127.0.0.1', '2021-04-11 20:27:55', NULL);
INSERT INTO `bl_log` VALUES (2802, '上传图片', '/upload/uploadImage', '[org.springframework.web.multipart.support.StandardMultipartHttpServletRequest$StandardMultipartFile@62daad9]', 0, '	at com.wsy.blog.utils.MinioUtils.putObject(MinioUtils.java:93)\n	at com.wsy.blog.utils.UploadService.upload(UploadService.java:39)\n	at com.wsy.blog.controller.UploadController.uploadImage(UploadController.java:33)\n	at com.wsy.blog.controller.UploadController$$FastClassBySpringCGLIB$$d3ffeb61.invoke(<generated>)\n	at com.wsy.blog.aspect.RequestAspect.doAround(RequestAspect.java:80)\n	at com.wsy.blog.controller.UploadController$$EnhancerBySpringCGLIB$$662bf5ed.uploadImage(<generated>)\n', 'POST', NULL, NULL, '127.0.0.1', '2021-04-11 20:36:30', NULL);
INSERT INTO `bl_log` VALUES (2803, '上传图片', '/upload/uploadImage', '[org.springframework.web.multipart.support.StandardMultipartHttpServletRequest$StandardMultipartFile@3d1d5046]', 1, NULL, 'POST', 135, '{\"code\":40000,\"msg\":\"操作失败！\"}', '127.0.0.1', '2021-04-11 20:41:25', NULL);
INSERT INTO `bl_log` VALUES (2804, '上传图片', '/upload/uploadImage', '[org.springframework.web.multipart.support.StandardMultipartHttpServletRequest$StandardMultipartFile@e70229c]', 0, '	at com.wsy.blog.utils.MinioUtils.uploadObject(MinioUtils.java:62)\n	at com.wsy.blog.utils.UploadService.upload(UploadService.java:34)\n	at com.wsy.blog.controller.UploadController.uploadImage(UploadController.java:31)\n	at com.wsy.blog.controller.UploadController$$FastClassBySpringCGLIB$$d3ffeb61.invoke(<generated>)\n	at com.wsy.blog.aspect.RequestAspect.doAround(RequestAspect.java:80)\n	at com.wsy.blog.controller.UploadController$$EnhancerBySpringCGLIB$$40a12b6e.uploadImage(<generated>)\n', 'POST', NULL, NULL, '127.0.0.1', '2021-04-11 20:43:39', NULL);
COMMIT;

-- ----------------------------
-- Table structure for bl_music
-- ----------------------------
DROP TABLE IF EXISTS `bl_music`;
CREATE TABLE `bl_music` (
  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT '音乐id',
  `name` varchar(255) NOT NULL COMMENT '歌曲名',
  `artist` varchar(127) NOT NULL DEFAULT '佚名' COMMENT '歌手',
  `url` varchar(255) NOT NULL COMMENT '歌曲链接',
  `cover` varchar(255) NOT NULL COMMENT '封面',
  `lrc` mediumtext COMMENT '歌词',
  `created_time` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `enable` int(1) NOT NULL DEFAULT '1' COMMENT '是否启用，0否1是',
  `deleted` int(1) NOT NULL DEFAULT '0' COMMENT '是否删除，0否1是',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=10 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC COMMENT='歌曲表';

-- ----------------------------
-- Records of bl_music
-- ----------------------------
BEGIN;
INSERT INTO `bl_music` VALUES (9, '偏爱', '张芸京', 'http://808km.top/blog/img/1626084261', 'http://808km.top/blog/img/368258252', NULL, '2020-11-18 01:41:58', 1, 0);
COMMIT;

-- ----------------------------
-- Table structure for bl_type
-- ----------------------------
DROP TABLE IF EXISTS `bl_type`;
CREATE TABLE `bl_type` (
  `type_id` int(11) NOT NULL AUTO_INCREMENT COMMENT '分类id',
  `type_name` varchar(31) NOT NULL COMMENT '分类名称',
  `type_blog_count` int(11) NOT NULL DEFAULT '0' COMMENT '帖子数',
  `enable` int(1) NOT NULL DEFAULT '1' COMMENT '是否启用，0否1是',
  `deleted` int(1) NOT NULL DEFAULT '0' COMMENT '是否删除，0否1是',
  PRIMARY KEY (`type_id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=21 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC COMMENT='帖子类型表';

-- ----------------------------
-- Records of bl_type
-- ----------------------------
BEGIN;
INSERT INTO `bl_type` VALUES (6, 'Java', 0, 1, 0);
INSERT INTO `bl_type` VALUES (8, 'JavaScript', 0, 1, 0);
INSERT INTO `bl_type` VALUES (9, 'Springboot', 1, 1, 0);
INSERT INTO `bl_type` VALUES (10, 'Mybatis', 1, 1, 0);
INSERT INTO `bl_type` VALUES (11, 'HTML', 0, 1, 0);
INSERT INTO `bl_type` VALUES (12, 'Shiro', 1, 1, 0);
INSERT INTO `bl_type` VALUES (13, 'fastdfs', 1, 1, 0);
INSERT INTO `bl_type` VALUES (14, 'docker', 0, 1, 0);
INSERT INTO `bl_type` VALUES (15, 'Vue', 1, 1, 0);
INSERT INTO `bl_type` VALUES (16, 'Mysql', 1, 1, 0);
INSERT INTO `bl_type` VALUES (17, '数据结构', 0, 1, 0);
INSERT INTO `bl_type` VALUES (18, 'dubbo', 2, 1, 0);
INSERT INTO `bl_type` VALUES (19, '对象存储', 0, 1, 0);
INSERT INTO `bl_type` VALUES (20, 'nacos', 1, 1, 0);
COMMIT;

-- ----------------------------
-- Table structure for bl_user
-- ----------------------------
DROP TABLE IF EXISTS `bl_user`;
CREATE TABLE `bl_user` (
  `user_id` int(11) unsigned NOT NULL AUTO_INCREMENT COMMENT '用户id',
  `username` varchar(31) NOT NULL COMMENT '用户名',
  `password` varchar(32) NOT NULL COMMENT '密码',
  `name` varchar(31) DEFAULT NULL COMMENT '姓名',
  `sex` int(1) DEFAULT NULL COMMENT '性别。1男2女',
  `header` varchar(255) DEFAULT NULL COMMENT '头像',
  `nickname` varchar(31) NOT NULL DEFAULT '无' COMMENT '昵称',
  `user_email` varchar(31) DEFAULT NULL COMMENT '邮箱',
  `salt` varchar(32) DEFAULT NULL COMMENT '盐',
  `created_time` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `update_time` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '更新时间',
  `version` int(11) NOT NULL DEFAULT '1' COMMENT '乐观锁',
  `deleted` int(1) NOT NULL DEFAULT '0' COMMENT '是否删除。0否1是',
  PRIMARY KEY (`user_id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=37 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC COMMENT='用户表';

-- ----------------------------
-- Records of bl_user
-- ----------------------------
BEGIN;
INSERT INTO `bl_user` VALUES (36, 'oops', 'fd5a74d480a130d5d56ba1abd8ed003f', NULL, 1, 'http://808km.top/blog/img/default/1333697337684463616', 'oops', '123@qq.com', 'D6FF3816E4B14CA089DCEF61E707A780', '2020-12-01 17:00:11', '2021-04-11 14:10:28', 1, 0);
COMMIT;

SET FOREIGN_KEY_CHECKS = 1;
